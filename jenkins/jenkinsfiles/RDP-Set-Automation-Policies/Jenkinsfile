pipeline {
	agent {
		node {
			label "windows"
		}
	}
	stages {
		stage ('Install Automation/Build server oriented RDP Policies') {
			environment {
				INSTALL_AHK = "${env.INSTALL_AHK}"
			}
			steps {
				powershell(
					returnStatus:true,
					script:'''

						[System.Net.ServicePointManager]::SecurityProtocol=[System.Net.SecurityProtocolType]::Tls12; Install-PackageProvider -Name ("NuGet") -Force -Confirm:$False;

						[System.Net.ServicePointManager]::SecurityProtocol=[System.Net.SecurityProtocolType]::Tls12; Install-Module -Name ("PolicyFileEditor") -Force -AllowClobber;

						Write-host "";
						Write-host "View exhaustive list of terminal services group policies (and their associated registry keys) @ [ https://getadmx.com/HKLM/SOFTWARE/Policies/Microsoft/Windows%20NT/Terminal%20Services ]";

						$Name="KeepAliveEnable";
						[UInt32]$Value = 0x00000001;
						$HKLM_Path="SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services";
						$Type="DWord";
						Write-Host "";
						Write-Host "Setting [ KeepAliveEnable ] Group Policy - For more information, refer to [ https://getadmx.com/?Category=Windows_7_2008R2&Policy=Microsoft.Policies.TerminalServer::TS_SERVER_COMPRESSOR ]";
						Write-Host -NoNewLine "`n";
						Set-PolicyFileEntry -Path ("${Env:SystemRoot}\\System32\\GroupPolicy\\Machine\\Registry.pol") -Key ("${HKLM_Path}") -ValueName ("${Name}") -Data (${Value}) -Type ("${Type}");

						$Name="KeepAliveInterval";
						[UInt32]$Value = 0x006DDD00; # 0x006DDD00 == 7,200,000
						$HKLM_Path="SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services";
						$Type="DWord";
						Write-Host "";
						Write-Host "Setting [ KeepAliveInterval ] Group Policy - For more information, refer to [ https://getadmx.com/?Category=Windows_7_2008R2&Policy=Microsoft.Policies.TerminalServer::TS_KEEP_ALIVE&Language=sv-se ]";
						Write-Host -NoNewLine "`n";
						Set-PolicyFileEntry -Path ("${Env:SystemRoot}\\System32\\GroupPolicy\\Machine\\Registry.pol") -Key ("${HKLM_Path}") -ValueName ("${Name}") -Data (${Value}) -Type ("${Type}");

						$Name="MaxCompressionLevel";
						[UInt32]$Value = 0x00000002;
						$HKLM_Path="SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services";
						$Type="DWord";
						Write-Host "";
						Write-Host "Setting [ MaxCompressionLevel ] Group Policy - For more information, refer to [ https://getadmx.com/?Category=Windows_10_2016&Policy=Microsoft.Policies.TerminalServer::TS_SERVER_COMPRESSOR ]";
						Write-Host -NoNewLine "`n";
						Set-PolicyFileEntry -Path ("${Env:SystemRoot}\\System32\\GroupPolicy\\Machine\\Registry.pol") -Key ("${HKLM_Path}") -ValueName ("${Name}") -Data (${Value}) -Type ("${Type}");

						$Name="RemoteDesktop_SuppressWhenMinimized ";
						[UInt32]$Value = 0x00000002;
						$Type="DWord";
						Write-Host "";
						Write-Host "Setting [ RemoteDesktop_SuppressWhenMinimized ] Group Policy - For more information, refer to [ https://docs.uipath.com/robot/docs/executing-tasks-in-a-minimized-rdp-window ]";
						Write-Host -NoNewLine "`n";
						$HKLM_Path="SOFTWARE\\Microsoft\\Terminal Server Client";
						Set-PolicyFileEntry -Path ("${Env:SystemRoot}\\System32\\GroupPolicy\\Machine\\Registry.pol") -Key ("${HKLM_Path}") -ValueName ("${Name}") -Data (${Value}) -Type ("${Type}");
						$HKLM_Path="SOFTWARE\\Wow6432Node\\Microsoft\\Terminal Server Client";
						Set-PolicyFileEntry -Path ("${Env:SystemRoot}\\System32\\GroupPolicy\\Machine\\Registry.pol") -Key ("${HKLM_Path}") -ValueName ("${Name}") -Data (${Value}) -Type ("${Type}");

						Write-Host "";
						Write-Host "If auto-logon is desired at bootup, please download/setup `"Autologon`", by sysinternals @ [ https://docs.microsoft.com/en-us/sysinternals/downloads/autologon ]";

						If ((Test-Path -Path ("Env:INSTALL_AHK") -PathType ("Leaf")) -And (("${Env:INSTALL_AHK}") -Eq ("1"))) { 
							Write-Host "`n`nEnvironment Variable `"`${Env:INSTALL_AHK}`" is set with value `"${Env:INSTALL_AHK}`"";
							Write-Host "`n`nInstalling/Updating Chocolatey...";
							Set-ExecutionPolicy "RemoteSigned" -Scope "CurrentUser" -Force;
							[System.Net.ServicePointManager]::SecurityProtocol=[System.Net.SecurityProtocolType]::Tls12;
							Invoke-Expression ((New-Object System.Net.WebClient).DownloadString("https://chocolatey.org/install.ps1"));
							Start-Process -Filepath ("choco") -ArgumentList (@("feature","enable","-n=allowGlobalConfirmation")) -NoNewWindow -Wait -PassThru;
							Write-Host "`n`nInstalling/Updating AutoHotkey...";
							Start-Process -Filepath ("choco") -ArgumentList (@("install","autohotkey")) -NoNewWindow -Wait -PassThru;
							Write-Host "`n`nChecking if update to system PATH is required...";
							$AppendPath = "C:\\Program Files\\AutoHotkey"; `
							$SystemPath = ((Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\Environment').Path);
							If ((${AppendPath} -NE $Null) -And (Test-Path "${AppendPath}") -And (((${SystemPath}).Split(';') | Where-Object { $_ -Eq "${AppendPath}" }).Count -Eq 0)) {
								Write-Host "`n`nAppending new filepath to the `${Env:PATH} environment variable: `"${AppendPath}`"...";
								[System.Environment]::SetEnvironmentVariable("Path","${SystemPath};${AppendPath}",[System.EnvironmentVariableTarget]::Machine);
							}
						} Else {
							Write-Host "";
							Write-Host "If auto-clicking/keypress actions are desired after bootup, please download/setup `"Autohotkey`" @ [ https://www.autohotkey.com/ ]";
							Write-Host " |";
							Write-Host " |--> Alternatively, call this script with a value of "1" given to environment variable "${Env:INSTALL_AHK}";
						}


						If ((Test-Path -Path ("Env:NEVER_SLEEP") -PathType ("Leaf")) -And (("${Env:NEVER_SLEEP}") -Eq ("1"))) { 
							Write-Host "`n`nEnvironment Variable `"`${Env:NEVER_SLEEP}`" is set with value `"${Env:MEVER_SLEEP}`"";
							Start-Process -Filepath ("powercfg") -ArgumentList (@("-change","-monitor-timeout-ac 0")) -NoNewWindow -Wait -PassThru;
						} Else {
							Write-Host "";
							Write-Host "If you wish to never sleep the monitor/display, assign a value of "1" to the environment variable "${Env:NEVER_SLEEP}";
						}


					'''
				)
			}
		}
	}
}


// ------------------------------------------------------------
//
// Citation(s)
//
//   docs.microsoft.com  |  "Autologon - Windows Sysinternals | Microsoft Docs"  |  https://docs.microsoft.com/en-us/sysinternals/downloads/autologon
//
//   stackoverflow.com  |  "Executing powershell command directly in jenkins pipeline - Stack Overflow"  |  https://stackoverflow.com/a/42576572
//
//   stackoverflow.com  |  "Using a Jenkins pipeline to checkout multiple git repos into same job - Stack Overflow"  |  https://stackoverflow.com/a/40225216
//
//   www.jfrog.com  |  "Scripted Pipeline Syntax - JFrog - JFrog Documentation"  |  https://www.jfrog.com/confluence/display/JFROG/Scripted+Pipeline+Syntax
//
//   www.jfrog.com  |  "Working With Pipeline Jobs in Jenkins - Artifactory 5.x - JFrog Wiki"  |  https://www.jfrog.com/confluence/display/RTF5X/Working+With+Pipeline+Jobs+in+Jenkins
//
//   www.jenkins.io  |  "Pipeline: Basic Steps"  |  https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/
//
//   www.jenkins.io  |  "Pipeline Examples"  |  https://www.jenkins.io/doc/pipeline/examples/
//
//   www.jenkins.io  |  "Pipeline Syntax"  |  https://www.jenkins.io/doc/book/pipeline/syntax/
//
//   www.jenkins.io  |  "Using a Jenkinsfile"  |  https://www.jenkins.io/doc/book/pipeline/jenkinsfile/
//
// ------------------------------------------------------------