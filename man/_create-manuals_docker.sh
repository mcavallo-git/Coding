if [[ 1 -eq 1 ]]; then

  # ${REPOS_DIR}/Coding/man/_create-manuals_docker.sh

  COMMAND="docker";

  MANFILE="$(realpath "${HOME}/man/${COMMAND}.help.man";)";

  # ------------------------------

  unset COMMANDS_ARRAY; declare -a COMMANDS_ARRAY; # [Re-]Instantiate bash array
  COMMANDS_ARRAY+=("${COMMAND}");
  COMMANDS_ARRAY+=("${COMMAND} attach");
  COMMANDS_ARRAY+=("${COMMAND} build");
  COMMANDS_ARRAY+=("${COMMAND} builder");
  COMMANDS_ARRAY+=("${COMMAND} builder build");
  COMMANDS_ARRAY+=("${COMMAND} builder prune");
  COMMANDS_ARRAY+=("${COMMAND} commit");
  COMMANDS_ARRAY+=("${COMMAND} compose");
  COMMANDS_ARRAY+=("${COMMAND} compose build");
  COMMANDS_ARRAY+=("${COMMAND} compose convert");
  COMMANDS_ARRAY+=("${COMMAND} compose cp");
  COMMANDS_ARRAY+=("${COMMAND} compose create");
  COMMANDS_ARRAY+=("${COMMAND} compose down");
  COMMANDS_ARRAY+=("${COMMAND} compose events");
  COMMANDS_ARRAY+=("${COMMAND} compose exec");
  COMMANDS_ARRAY+=("${COMMAND} compose images");
  COMMANDS_ARRAY+=("${COMMAND} compose kill");
  COMMANDS_ARRAY+=("${COMMAND} compose logs");
  COMMANDS_ARRAY+=("${COMMAND} compose ls");
  COMMANDS_ARRAY+=("${COMMAND} compose pause");
  COMMANDS_ARRAY+=("${COMMAND} compose port");
  COMMANDS_ARRAY+=("${COMMAND} compose ps");
  COMMANDS_ARRAY+=("${COMMAND} compose pull");
  COMMANDS_ARRAY+=("${COMMAND} compose push");
  COMMANDS_ARRAY+=("${COMMAND} compose restart");
  COMMANDS_ARRAY+=("${COMMAND} compose rm");
  COMMANDS_ARRAY+=("${COMMAND} compose run");
  COMMANDS_ARRAY+=("${COMMAND} compose start");
  COMMANDS_ARRAY+=("${COMMAND} compose stop");
  COMMANDS_ARRAY+=("${COMMAND} compose top");
  COMMANDS_ARRAY+=("${COMMAND} compose unpause");
  COMMANDS_ARRAY+=("${COMMAND} compose up");
  COMMANDS_ARRAY+=("${COMMAND} compose version");
  COMMANDS_ARRAY+=("${COMMAND} config");
  COMMANDS_ARRAY+=("${COMMAND} config create");
  COMMANDS_ARRAY+=("${COMMAND} config inspect");
  COMMANDS_ARRAY+=("${COMMAND} config ls");
  COMMANDS_ARRAY+=("${COMMAND} config rm");
  COMMANDS_ARRAY+=("${COMMAND} container");
  COMMANDS_ARRAY+=("${COMMAND} container attach");
  COMMANDS_ARRAY+=("${COMMAND} container commit");
  COMMANDS_ARRAY+=("${COMMAND} container cp");
  COMMANDS_ARRAY+=("${COMMAND} container create");
  COMMANDS_ARRAY+=("${COMMAND} container diff");
  COMMANDS_ARRAY+=("${COMMAND} container exec");
  COMMANDS_ARRAY+=("${COMMAND} container export");
  COMMANDS_ARRAY+=("${COMMAND} container inspect");
  COMMANDS_ARRAY+=("${COMMAND} container kill");
  COMMANDS_ARRAY+=("${COMMAND} container logs");
  COMMANDS_ARRAY+=("${COMMAND} container ls");
  COMMANDS_ARRAY+=("${COMMAND} container pause");
  COMMANDS_ARRAY+=("${COMMAND} container port");
  COMMANDS_ARRAY+=("${COMMAND} container prune");
  COMMANDS_ARRAY+=("${COMMAND} container rename");
  COMMANDS_ARRAY+=("${COMMAND} container restart");
  COMMANDS_ARRAY+=("${COMMAND} container rm");
  COMMANDS_ARRAY+=("${COMMAND} container run");
  COMMANDS_ARRAY+=("${COMMAND} container start");
  COMMANDS_ARRAY+=("${COMMAND} container stats");
  COMMANDS_ARRAY+=("${COMMAND} container stop");
  COMMANDS_ARRAY+=("${COMMAND} container top");
  COMMANDS_ARRAY+=("${COMMAND} container unpause");
  COMMANDS_ARRAY+=("${COMMAND} container update");
  COMMANDS_ARRAY+=("${COMMAND} container wait");
  COMMANDS_ARRAY+=("${COMMAND} context");
  COMMANDS_ARRAY+=("${COMMAND} context create");
  COMMANDS_ARRAY+=("${COMMAND} context export");
  COMMANDS_ARRAY+=("${COMMAND} context import");
  COMMANDS_ARRAY+=("${COMMAND} context inspect");
  COMMANDS_ARRAY+=("${COMMAND} context ls");
  COMMANDS_ARRAY+=("${COMMAND} context rm");
  COMMANDS_ARRAY+=("${COMMAND} context update");
  COMMANDS_ARRAY+=("${COMMAND} context use");
  COMMANDS_ARRAY+=("${COMMAND} cp");
  COMMANDS_ARRAY+=("${COMMAND} create");
  COMMANDS_ARRAY+=("${COMMAND} diff");
  COMMANDS_ARRAY+=("${COMMAND} events");
  COMMANDS_ARRAY+=("${COMMAND} exec");
  COMMANDS_ARRAY+=("${COMMAND} export");
  COMMANDS_ARRAY+=("${COMMAND} history");
  COMMANDS_ARRAY+=("${COMMAND} image");
  COMMANDS_ARRAY+=("${COMMAND} image build");
  COMMANDS_ARRAY+=("${COMMAND} image history");
  COMMANDS_ARRAY+=("${COMMAND} image import");
  COMMANDS_ARRAY+=("${COMMAND} image inspect");
  COMMANDS_ARRAY+=("${COMMAND} image load");
  COMMANDS_ARRAY+=("${COMMAND} image ls");
  COMMANDS_ARRAY+=("${COMMAND} image prune");
  COMMANDS_ARRAY+=("${COMMAND} image pull");
  COMMANDS_ARRAY+=("${COMMAND} image push");
  COMMANDS_ARRAY+=("${COMMAND} image rm");
  COMMANDS_ARRAY+=("${COMMAND} image save");
  COMMANDS_ARRAY+=("${COMMAND} image tag");
  COMMANDS_ARRAY+=("${COMMAND} images");
  COMMANDS_ARRAY+=("${COMMAND} import");
  COMMANDS_ARRAY+=("${COMMAND} info");
  COMMANDS_ARRAY+=("${COMMAND} inspect");
  COMMANDS_ARRAY+=("${COMMAND} kill");
  COMMANDS_ARRAY+=("${COMMAND} load");
  COMMANDS_ARRAY+=("${COMMAND} login");
  COMMANDS_ARRAY+=("${COMMAND} logout");
  COMMANDS_ARRAY+=("${COMMAND} logs");
  COMMANDS_ARRAY+=("${COMMAND} network");
  COMMANDS_ARRAY+=("${COMMAND} network connect");
  COMMANDS_ARRAY+=("${COMMAND} network create");
  COMMANDS_ARRAY+=("${COMMAND} network disconnect");
  COMMANDS_ARRAY+=("${COMMAND} network inspect");
  COMMANDS_ARRAY+=("${COMMAND} network ls");
  COMMANDS_ARRAY+=("${COMMAND} network prune");
  COMMANDS_ARRAY+=("${COMMAND} network rm");
  COMMANDS_ARRAY+=("${COMMAND} node");
  COMMANDS_ARRAY+=("${COMMAND} node demote");
  COMMANDS_ARRAY+=("${COMMAND} node inspect");
  COMMANDS_ARRAY+=("${COMMAND} node ls");
  COMMANDS_ARRAY+=("${COMMAND} node promote");
  COMMANDS_ARRAY+=("${COMMAND} node ps");
  COMMANDS_ARRAY+=("${COMMAND} node rm");
  COMMANDS_ARRAY+=("${COMMAND} node update");
  COMMANDS_ARRAY+=("${COMMAND} pause");
  COMMANDS_ARRAY+=("${COMMAND} plugin");
  COMMANDS_ARRAY+=("${COMMAND} plugin create");
  COMMANDS_ARRAY+=("${COMMAND} plugin disable");
  COMMANDS_ARRAY+=("${COMMAND} plugin enable");
  COMMANDS_ARRAY+=("${COMMAND} plugin inspect");
  COMMANDS_ARRAY+=("${COMMAND} plugin install");
  COMMANDS_ARRAY+=("${COMMAND} plugin ls");
  COMMANDS_ARRAY+=("${COMMAND} plugin push");
  COMMANDS_ARRAY+=("${COMMAND} plugin rm");
  COMMANDS_ARRAY+=("${COMMAND} plugin set");
  COMMANDS_ARRAY+=("${COMMAND} plugin upgrade");
  COMMANDS_ARRAY+=("${COMMAND} port");
  COMMANDS_ARRAY+=("${COMMAND} ps");
  COMMANDS_ARRAY+=("${COMMAND} pull");
  COMMANDS_ARRAY+=("${COMMAND} push");
  COMMANDS_ARRAY+=("${COMMAND} rename");
  COMMANDS_ARRAY+=("${COMMAND} restart");
  COMMANDS_ARRAY+=("${COMMAND} rm");
  COMMANDS_ARRAY+=("${COMMAND} rmi");
  COMMANDS_ARRAY+=("${COMMAND} run");
  COMMANDS_ARRAY+=("${COMMAND} save");
  COMMANDS_ARRAY+=("${COMMAND} search");
  COMMANDS_ARRAY+=("${COMMAND} secret");
  COMMANDS_ARRAY+=("${COMMAND} secret create");
  COMMANDS_ARRAY+=("${COMMAND} secret inspect");
  COMMANDS_ARRAY+=("${COMMAND} secret ls");
  COMMANDS_ARRAY+=("${COMMAND} secret rm");
  COMMANDS_ARRAY+=("${COMMAND} service");
  COMMANDS_ARRAY+=("${COMMAND} service create");
  COMMANDS_ARRAY+=("${COMMAND} service inspect");
  COMMANDS_ARRAY+=("${COMMAND} service logs");
  COMMANDS_ARRAY+=("${COMMAND} service ls");
  COMMANDS_ARRAY+=("${COMMAND} service ps");
  COMMANDS_ARRAY+=("${COMMAND} service rm");
  COMMANDS_ARRAY+=("${COMMAND} service rollback");
  COMMANDS_ARRAY+=("${COMMAND} service scale");
  COMMANDS_ARRAY+=("${COMMAND} service update");
  COMMANDS_ARRAY+=("${COMMAND} stack deploy");
  COMMANDS_ARRAY+=("${COMMAND} stack ls");
  COMMANDS_ARRAY+=("${COMMAND} stack ps");
  COMMANDS_ARRAY+=("${COMMAND} stack rm");
  COMMANDS_ARRAY+=("${COMMAND} stack services");
  COMMANDS_ARRAY+=("${COMMAND} stack");
  COMMANDS_ARRAY+=("${COMMAND} start");
  COMMANDS_ARRAY+=("${COMMAND} stats");
  COMMANDS_ARRAY+=("${COMMAND} stop");
  COMMANDS_ARRAY+=("${COMMAND} swarm");
  COMMANDS_ARRAY+=("${COMMAND} swarm ca");
  COMMANDS_ARRAY+=("${COMMAND} swarm init");
  COMMANDS_ARRAY+=("${COMMAND} swarm join");
  COMMANDS_ARRAY+=("${COMMAND} swarm join-token");
  COMMANDS_ARRAY+=("${COMMAND} swarm leave");
  COMMANDS_ARRAY+=("${COMMAND} swarm unlock");
  COMMANDS_ARRAY+=("${COMMAND} swarm unlock-key");
  COMMANDS_ARRAY+=("${COMMAND} swarm update");
  COMMANDS_ARRAY+=("${COMMAND} system");
  COMMANDS_ARRAY+=("${COMMAND} system df");
  COMMANDS_ARRAY+=("${COMMAND} system events");
  COMMANDS_ARRAY+=("${COMMAND} system info");
  COMMANDS_ARRAY+=("${COMMAND} system prune");
  COMMANDS_ARRAY+=("${COMMAND} tag");
  COMMANDS_ARRAY+=("${COMMAND} top");
  COMMANDS_ARRAY+=("${COMMAND} trust");
  COMMANDS_ARRAY+=("${COMMAND} trust inspect");
  COMMANDS_ARRAY+=("${COMMAND} trust key");
  COMMANDS_ARRAY+=("${COMMAND} trust revoke");
  COMMANDS_ARRAY+=("${COMMAND} trust sign");
  COMMANDS_ARRAY+=("${COMMAND} trust signer");
  COMMANDS_ARRAY+=("${COMMAND} unpause");
  COMMANDS_ARRAY+=("${COMMAND} update");
  COMMANDS_ARRAY+=("${COMMAND} version");
  COMMANDS_ARRAY+=("${COMMAND} volume");
  COMMANDS_ARRAY+=("${COMMAND} volume create");
  COMMANDS_ARRAY+=("${COMMAND} volume inspect");
  COMMANDS_ARRAY+=("${COMMAND} volume ls");
  COMMANDS_ARRAY+=("${COMMAND} volume prune");
  COMMANDS_ARRAY+=("${COMMAND} volume rm");
  COMMANDS_ARRAY+=("${COMMAND} wait");

  # ------------------------------

  if [[ -f "${MANFILE}" ]]; then
    rm -fv "${MANFILE}";
  fi;

  for EACH_COMMAND in "${COMMANDS_ARRAY[@]}"; do
    EACH_EVAL_COMMAND="${EACH_COMMAND} --help";
    echo "------------------------------------------------------------" >> "${MANFILE}";
    echo "[ ${EACH_EVAL_COMMAND} ]" >> "${MANFILE}";
    eval " ${EACH_EVAL_COMMAND}" >> "${MANFILE}";
    echo "" >> "${MANFILE}";
    echo "EACH_EVAL_COMMAND=[${EACH_EVAL_COMMAND}]";
  done;

  echo "MANFILE=[${MANFILE}]";

fi;