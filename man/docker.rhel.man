DOCKER(1)                                                                  APRIL 2014                                                                  DOCKER(1)



NAME
       docker - Docker image and container command line interface



SYNOPSIS
       docker [OPTIONS] COMMAND [ARG...]


       docker [--help|-v|--version]



DESCRIPTION
       docker is a client for interacting with the daemon (see dockerd(8)) through the CLI.


       The Docker CLI has over 30 commands. The commands are listed below and each has its own man page which explain usage and arguments.


       To see the man page for a command run man docker <command>.



OPTIONS
       --help
         Print usage statement


       --config=""
         Specifies the location of the Docker client configuration files. The default is ' /.docker'.


       -D, --debug=true|false
         Enable debug mode. Default is false.


       -H, --host=[unix:///var/run/docker.sock]: tcp://[host]:[port][path] to bind or unix://[/path/to/socket] to use.
         The socket(s) to bind to in daemon mode specified using one or more
         tcp://host:port/path, unix:///path/to/socket, fd://* or fd://socketfd.
         If the tcp port is not specified, then it will default to either 2375 when
         --tls is off, or 2376 when --tls is on, or --tlsverify is specified.


       -l, --log-level="debug|info|warn|error|fatal"
         Set the logging level. Default is info.


       --tls=true|false
         Use TLS; implied by --tlsverify. Default is false.


       --tlscacert= /.docker/ca.pem
         Trust certs signed only by this CA.


       --tlscert= /.docker/cert.pem
         Path to TLS certificate file.


       --tlskey= /.docker/key.pem
         Path to TLS key file.


       --tlsverify=true|false
         Use TLS and verify the remote (daemon: verify client, client: verify daemon).
         Default is false.


       -v, --version=true|false
         Print version information and quit. Default is false.



COMMANDS
       Use "docker help" or "docker --help" to get an overview of available commands.



EXAMPLES
       For specific client examples please see the man page for the specific Docker command. For example:


              man docker-run




HISTORY
       April 2014, Originally compiled by William Henry (whenry at redhat dot com) based on docker.com source material and internal work.



William Henry                                                          Docker User Manuals                                                             DOCKER(1)
------------------------------------------------------------

Usage:	docker [OPTIONS] COMMAND

A self-sufficient runtime for containers

Options:
      --config string      Location of client config files (default "/home/mcavallo/.docker")
  -c, --context string     Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and default context set with "docker context use")
  -D, --debug              Enable debug mode
  -H, --host list          Daemon socket(s) to connect to
  -l, --log-level string   Set the logging level ("debug"|"info"|"warn"|"error"|"fatal") (default "info")
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default "/home/mcavallo/.docker/ca.pem")
      --tlscert string     Path to TLS certificate file (default "/home/mcavallo/.docker/cert.pem")
      --tlskey string      Path to TLS key file (default "/home/mcavallo/.docker/key.pem")
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version information and quit

Management Commands:
  builder     Manage builds
  config      Manage Docker configs
  container   Manage containers
  context     Manage contexts
  engine      Manage the docker engine
  image       Manage images
  network     Manage networks
  node        Manage Swarm nodes
  plugin      Manage plugins
  secret      Manage Docker secrets
  service     Manage services
  stack       Manage Docker stacks
  swarm       Manage Swarm
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  build       Build an image from a Dockerfile
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  deploy      Deploy a new stack or update an existing stack
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  images      List images
  import      Import the contents from a tarball to create a filesystem image
  info        Display system-wide information
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  login       Log in to a Docker registry
  logout      Log out from a Docker registry
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  ps          List containers
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  run         Run a command in a new container
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  search      Search the Docker Hub for images
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  version     Show the Docker version information
  wait        Block until one or more containers stop, then print their exit codes

Run 'docker COMMAND --help' for more information on a command.
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-builder - Manage builds



SYNOPSIS
       docker builder



DESCRIPTION
       Manage builds



OPTIONS
       -h, --help[=false]
           help for builder



SEE ALSO
       docker(1), docker-builder-build(1), docker-builder-prune(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker builder COMMAND

Manage builds

Commands:
  build       Build an image from a Dockerfile
  prune       Remove build cache

Run 'docker builder COMMAND --help' for more information on a command.
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-config - Manage Docker configs



SYNOPSIS
       docker config



DESCRIPTION
       Manage Docker configs



OPTIONS
       -h, --help[=false]
           help for config



SEE ALSO
       docker(1), docker-config-create(1), docker-config-inspect(1), docker-config-ls(1), docker-config-rm(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker config COMMAND

Manage Docker configs

Commands:
  create      Create a config from a file or STDIN
  inspect     Display detailed information on one or more configs
  ls          List configs
  rm          Remove one or more configs

Run 'docker config COMMAND --help' for more information on a command.
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-container - Manage containers



SYNOPSIS
       docker container



DESCRIPTION
       Manage containers



OPTIONS
       -h, --help[=false]
           help for container



SEE ALSO
       docker(1), docker-container-attach(1), docker-container-commit(1), docker-container-cp(1), docker-container-create(1), docker-container-diff(1),
       docker-container-exec(1), docker-container-export(1), docker-container-inspect(1), docker-container-kill(1), docker-container-logs(1),
       docker-container-ls(1), docker-container-pause(1), docker-container-port(1), docker-container-prune(1), docker-container-rename(1),
       docker-container-restart(1), docker-container-rm(1), docker-container-run(1), docker-container-start(1), docker-container-stats(1),
       docker-container-stop(1), docker-container-top(1), docker-container-unpause(1), docker-container-update(1), docker-container-wait(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker container COMMAND

Manage containers

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  diff        Inspect changes to files or directories on a container's filesystem
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  inspect     Display detailed information on one or more containers
  kill        Kill one or more running containers
  logs        Fetch the logs of a container
  ls          List containers
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  prune       Remove all stopped containers
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  run         Run a command in a new container
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  wait        Block until one or more containers stop, then print their exit codes

Run 'docker container COMMAND --help' for more information on a command.
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-context - Manage contexts



SYNOPSIS
       docker context



DESCRIPTION
       Manage contexts



OPTIONS
       -h, --help[=false]
           help for context



SEE ALSO
       docker(1), docker-context-create(1), docker-context-export(1), docker-context-import(1), docker-context-inspect(1), docker-context-ls(1),
       docker-context-rm(1), docker-context-update(1), docker-context-use(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker context COMMAND

Manage contexts

Commands:
  create      Create a context
  export      Export a context to a tar or kubeconfig file
  import      Import a context from a tar or zip file
  inspect     Display detailed information on one or more contexts
  ls          List contexts
  rm          Remove one or more contexts
  update      Update a context
  use         Set the current docker context

Run 'docker context COMMAND --help' for more information on a command.
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-engine - Manage the docker engine



SYNOPSIS
       docker engine COMMAND



DESCRIPTION
       Manage the docker engine



OPTIONS
       -h, --help[=false]
           help for engine



SEE ALSO
       docker(1), docker-engine-activate(1), docker-engine-check(1), docker-engine-update(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker engine COMMAND

Manage the docker engine

Commands:
  activate    Activate Enterprise Edition
  check       Check for available engine updates
  update      Update a local engine

Run 'docker engine COMMAND --help' for more information on a command.
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-image - Manage images



SYNOPSIS
       docker image



DESCRIPTION
       Manage images



OPTIONS
       -h, --help[=false]
           help for image



SEE ALSO
       docker(1), docker-image-build(1), docker-image-history(1), docker-image-import(1), docker-image-inspect(1), docker-image-load(1), docker-image-ls(1),
       docker-image-prune(1), docker-image-pull(1), docker-image-push(1), docker-image-rm(1), docker-image-save(1), docker-image-tag(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker image COMMAND

Manage images

Commands:
  build       Build an image from a Dockerfile
  history     Show the history of an image
  import      Import the contents from a tarball to create a filesystem image
  inspect     Display detailed information on one or more images
  load        Load an image from a tar archive or STDIN
  ls          List images
  prune       Remove unused images
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rm          Remove one or more images
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE

Run 'docker image COMMAND --help' for more information on a command.
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-network - Manage networks



SYNOPSIS
       docker network



DESCRIPTION
       Manage networks



OPTIONS
       -h, --help[=false]
           help for network



SEE ALSO
       docker(1), docker-network-connect(1), docker-network-create(1), docker-network-disconnect(1), docker-network-inspect(1), docker-network-ls(1),
       docker-network-prune(1), docker-network-rm(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker network COMMAND

Manage networks

Commands:
  connect     Connect a container to a network
  create      Create a network
  disconnect  Disconnect a container from a network
  inspect     Display detailed information on one or more networks
  ls          List networks
  prune       Remove all unused networks
  rm          Remove one or more networks

Run 'docker network COMMAND --help' for more information on a command.
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-node - Manage Swarm nodes



SYNOPSIS
       docker node



DESCRIPTION
       Manage Swarm nodes



OPTIONS
       -h, --help[=false]
           help for node



SEE ALSO
       docker(1), docker-node-demote(1), docker-node-inspect(1), docker-node-ls(1), docker-node-promote(1), docker-node-ps(1), docker-node-rm(1),
       docker-node-update(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker node COMMAND

Manage Swarm nodes

Commands:
  demote      Demote one or more nodes from manager in the swarm
  inspect     Display detailed information on one or more nodes
  ls          List nodes in the swarm
  promote     Promote one or more nodes to manager in the swarm
  ps          List tasks running on one or more nodes, defaults to current node
  rm          Remove one or more nodes from the swarm
  update      Update a node

Run 'docker node COMMAND --help' for more information on a command.
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-plugin - Manage plugins



SYNOPSIS
       docker plugin



DESCRIPTION
       Manage plugins



OPTIONS
       -h, --help[=false]
           help for plugin



SEE ALSO
       docker(1), docker-plugin-create(1), docker-plugin-disable(1), docker-plugin-enable(1), docker-plugin-inspect(1), docker-plugin-install(1),
       docker-plugin-ls(1), docker-plugin-push(1), docker-plugin-rm(1), docker-plugin-set(1), docker-plugin-upgrade(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker plugin COMMAND

Manage plugins

Commands:
  create      Create a plugin from a rootfs and configuration. Plugin data directory must contain config.json and rootfs directory.
  disable     Disable a plugin
  enable      Enable a plugin
  inspect     Display detailed information on one or more plugins
  install     Install a plugin
  ls          List plugins
  push        Push a plugin to a registry
  rm          Remove one or more plugins
  set         Change settings for a plugin
  upgrade     Upgrade an existing plugin

Run 'docker plugin COMMAND --help' for more information on a command.
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-secret - Manage Docker secrets



SYNOPSIS
       docker secret



DESCRIPTION
       Manage Docker secrets



OPTIONS
       -h, --help[=false]
           help for secret



SEE ALSO
       docker(1), docker-secret-create(1), docker-secret-inspect(1), docker-secret-ls(1), docker-secret-rm(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker secret COMMAND

Manage Docker secrets

Commands:
  create      Create a secret from a file or STDIN as content
  inspect     Display detailed information on one or more secrets
  ls          List secrets
  rm          Remove one or more secrets

Run 'docker secret COMMAND --help' for more information on a command.
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-service - Manage services



SYNOPSIS
       docker service



DESCRIPTION
       Manage services



OPTIONS
       -h, --help[=false]
           help for service



SEE ALSO
       docker(1), docker-service-create(1), docker-service-inspect(1), docker-service-logs(1), docker-service-ls(1), docker-service-ps(1), docker-service-rm(1),
       docker-service-rollback(1), docker-service-scale(1), docker-service-update(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker service COMMAND

Manage services

Commands:
  create      Create a new service
  inspect     Display detailed information on one or more services
  logs        Fetch the logs of a service or task
  ls          List services
  ps          List the tasks of one or more services
  rm          Remove one or more services
  rollback    Revert changes to a service's configuration
  scale       Scale one or multiple replicated services
  update      Update a service

Run 'docker service COMMAND --help' for more information on a command.
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-stack - Manage Docker stacks



SYNOPSIS
       docker stack [OPTIONS]



DESCRIPTION
       Manage Docker stacks



OPTIONS
       -h, --help[=false]
           help for stack


       --kubeconfig=""
           Kubernetes config file


       --orchestrator=""
           Orchestrator to use (swarm|kubernetes|all)



SEE ALSO
       docker(1), docker-stack-deploy(1), docker-stack-ls(1), docker-stack-ps(1), docker-stack-rm(1), docker-stack-services(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker stack [OPTIONS] COMMAND

Manage Docker stacks

Options:
      --orchestrator string   Orchestrator to use (swarm|kubernetes|all)

Commands:
  deploy      Deploy a new stack or update an existing stack
  ls          List stacks
  ps          List the tasks in the stack
  rm          Remove one or more stacks
  services    List the services in the stack

Run 'docker stack COMMAND --help' for more information on a command.
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-swarm - Manage Swarm



SYNOPSIS
       docker swarm



DESCRIPTION
       Manage Swarm



OPTIONS
       -h, --help[=false]
           help for swarm



SEE ALSO
       docker(1), docker-swarm-ca(1), docker-swarm-init(1), docker-swarm-join(1), docker-swarm-join-token(1), docker-swarm-leave(1), docker-swarm-unlock(1),
       docker-swarm-unlock-key(1), docker-swarm-update(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker swarm COMMAND

Manage Swarm

Commands:
  ca          Display and rotate the root CA
  init        Initialize a swarm
  join        Join a swarm as a node and/or manager
  join-token  Manage join tokens
  leave       Leave the swarm
  unlock      Unlock swarm
  unlock-key  Manage the unlock key
  update      Update the swarm

Run 'docker swarm COMMAND --help' for more information on a command.
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-system - Manage Docker



SYNOPSIS
       docker system



DESCRIPTION
       Manage Docker



OPTIONS
       -h, --help[=false]
           help for system



SEE ALSO
       docker(1), docker-system-df(1), docker-system-events(1), docker-system-info(1), docker-system-prune(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker system COMMAND

Manage Docker

Commands:
  df          Show docker disk usage
  events      Get real time events from the server
  info        Display system-wide information
  prune       Remove unused data

Run 'docker system COMMAND --help' for more information on a command.
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-trust - Manage trust on Docker images



SYNOPSIS
       docker trust



DESCRIPTION
       Manage trust on Docker images



OPTIONS
       -h, --help[=false]
           help for trust



SEE ALSO
       docker(1), docker-trust-inspect(1), docker-trust-key(1), docker-trust-revoke(1), docker-trust-sign(1), docker-trust-signer(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker trust COMMAND

Manage trust on Docker images

Management Commands:
  key         Manage keys for signing Docker images
  signer      Manage entities who can sign Docker images

Commands:
  inspect     Return low-level information about keys and signatures
  revoke      Remove trust for an image
  sign        Sign an image

Run 'docker trust COMMAND --help' for more information on a command.
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-volume - Manage volumes



SYNOPSIS
       docker volume COMMAND



DESCRIPTION
       The docker volume command has subcommands for managing data volumes. A data volume is a specially-designated directory that by-passes storage driver
       management.


       Data volumes persist data independent of a container's life cycle. When you delete a container, the Docker daemon does not delete any data volumes. You
       can share volumes across multiple containers. Moreover, you can share data volumes with other computing resources in your system.


       To see help for a subcommand, use:


              docker volume COMMAND --help



       For full details on using docker volume visit Docker's online documentation.



OPTIONS
       -h, --help[=false]
           help for volume



SEE ALSO
       docker(1), docker-volume-create(1), docker-volume-inspect(1), docker-volume-ls(1), docker-volume-prune(1), docker-volume-rm(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker volume COMMAND

Manage volumes

Commands:
  create      Create a volume
  inspect     Display detailed information on one or more volumes
  ls          List volumes
  prune       Remove all unused local volumes
  rm          Remove one or more volumes

Run 'docker volume COMMAND --help' for more information on a command.
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-attach - Attach local standard input, output, and error streams to a running container



SYNOPSIS
       docker attach [OPTIONS] CONTAINER



DESCRIPTION
       Alias for docker container attach.



OPTIONS
       --detach-keys=""
           Override the key sequence for detaching a container


       -h, --help[=false]
           help for attach


       --no-stdin[=false]
           Do not attach STDIN


       --sig-proxy[=true]
           Proxy all received signals to the process



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker attach [OPTIONS] CONTAINER

Attach local standard input, output, and error streams to a running container

Options:
      --detach-keys string   Override the key sequence for detaching a container
      --no-stdin             Do not attach STDIN
      --sig-proxy            Proxy all received signals to the process (default true)
------------------------------------------------------------
DOCKER(1)                                                                   JUNE 2014                                                                  DOCKER(1)



NAME
       docker-build - Build an image from a Dockerfile



SYNOPSIS
       docker build [--add-host[=[]]] [--build-arg[=[]]] [--cache-from[=[]]] [--cpu-shares[=0]] [--cgroup-parent[=CGROUP-PARENT]] [--help] [--iidfile[=CIDFILE]]
       [-f|--file[=PATH/Dockerfile]] [-squash] Experimental [--force-rm] [--isolation[=default]] [--label[=[]]] [--no-cache] [--pull] [--compress] [-q|--quiet]
       [--rm[=true]] [-t|--tag[=[]]] [-m|--memory[=MEMORY]] [--memory-swap[=LIMIT]] [--network[="default"]] [--shm-size[=SHM-SIZE]] [--cpu-period[=0]]
       [--cpu-quota[=0]] [--cpuset-cpus[=CPUSET-CPUS]] [--cpuset-mems[=CPUSET-MEMS]] [--target[=[]]] [--ulimit[=[]]] PATH | URL | -



DESCRIPTION
       This will read the Dockerfile from the directory specified in PATH.  It also sends any other files and directories found in the current directory to the
       Docker daemon. The contents of this directory would be used by ADD commands found within the Dockerfile.


       Warning, this will send a lot of data to the Docker daemon depending on the contents of the current directory. The build is run by the Docker daemon, not
       by the CLI, so the whole context must be transferred to the daemon.  The Docker CLI reports "Sending build context to Docker daemon" when the context is
       sent to the daemon.


       When the URL to a tarball archive or to a single Dockerfile is given, no context is sent from the client to the Docker daemon. In this case, the
       Dockerfile at the root of the archive and the rest of the archive will get used as the context of the build.  When a Git repository is set as the URL,
       the repository is cloned locally and then sent as the context.



OPTIONS
       -f, --file=PATH/Dockerfile
          Path to the Dockerfile to use. If the path is a relative path and you are
          building from a local directory, then the path must be relative to that
          directory. If you are building from a remote URL pointing to either a
          tarball or a Git repository, then the path must be relative to the root of
          the remote context. In all cases, the file must be within the build context.
          The default is Dockerfile.


       --squash=true|false
          Experimental Only
          Once the image is built, squash the new layers into a new image with a single
          new layer. Squashing does not destroy any existing image, rather it creates a new
          image with the content of the squashed layers. This effectively makes it look
          like all Dockerfile commands were created with a single layer. The build
          cache is preserved with this method.


       Note: using this option means the new image will not be able to take
          advantage of layer sharing with other images and may use significantly more
          space.


       Note: using this option you may see significantly more space used due to
          storing two copies of the image, one for the build cache with all the cache
          layers in tact, and one for the squashed version.


       --add-host=[]
          Add a custom host-to-IP mapping (host:ip)


       Add a line to /etc/hosts. The format is hostname:ip.  The --add-host option can be set multiple times.


       --build-arg=variable
          name and value of a buildarg.


       For example, if you want to pass a value for http_proxy, use
          --build-arg=http_proxy="http://some.proxy.url"


       Users pass these values at build-time. Docker uses the buildargs as the
          environment context for command(s) run via the Dockerfile's RUN instruction
          or for variable expansion in other Dockerfile instructions. This is not meant
          for passing secret values. Read more about the buildargs instruction ⟨https://docs.docker.com/engine/reference/builder/#arg⟩


       --cache-from=""
          Set image that will be used as a build cache source.


       --force-rm=true|false
          Always remove intermediate containers, even after unsuccessful builds. The default is false.


       --isolation="default"
          Isolation specifies the type of isolation technology used by containers.


       --label=label
          Set metadata for an image


       --no-cache=true|false
          Do not use cache when building the image. The default is false.


       --iidfile=""
          Write the image ID to the file


       --help
         Print usage statement


       --pull=true|false
          Always attempt to pull a newer version of the image. The default is false.


       --compress=true|false
           Compress the build context using gzip. The default is false.


       -q, --quiet=true|false
          Suppress the build output and print image ID on success. The default is false.


       --rm=true|false
          Remove intermediate containers after a successful build. The default is true.


       -t, --tag=""
          Repository names (and optionally with tags) to be applied to the resulting
          image in case of success. Refer to docker-tag(1) for more information
          about valid tag names.


       -m, --memory=MEMORY
         Memory limit


       --memory-swap=LIMIT
          A limit value equal to memory plus swap. Must be used with the  -m (--memory) flag. The swap LIMIT should always be larger than -m (--memory) value.


       The format of LIMIT is <number>[<unit>]. Unit can be b (bytes), k (kilobytes), m (megabytes), or g (gigabytes). If you don't specify a unit, b is used.
       Set LIMIT to -1 to enable unlimited swap.


       --network=bridge
         Set the networking mode for the RUN instructions during build. Supported standard
         values are: bridge, host, none and container:<name|id>. Any other value
         is taken as a custom network's name or ID which this container should connect to.


       --shm-size=SHM-SIZE
         Size of /dev/shm. The format is <number><unit>. number must be greater than 0.
         Unit is optional and can be b (bytes), k (kilobytes), m (megabytes), or g (gigabytes). If you omit the unit, the system uses bytes.
         If you omit the size entirely, the system uses 64m.


       --cpu-shares=0
         CPU shares (relative weight).


       By default, all containers get the same proportion of CPU cycles.
         CPU shares is a 'relative weight', relative to the default setting of 1024.
         This default value is defined here:


                 cat /sys/fs/cgroup/cpu/cpu.shares
                 1024



       You can change this proportion by adjusting the container's CPU share
         weighting relative to the weighting of all other running containers.


       To modify the proportion from the default of 1024, use the --cpu-shares
         flag to set the weighting to 2 or higher.


                Container   CPU share    Flag
                {C0}        60% of CPU  --cpu-shares=614 (614 is 60% of 1024)
                {C1}        40% of CPU  --cpu-shares=410 (410 is 40% of 1024)



       The proportion is only applied when CPU-intensive processes are running.
         When tasks in one container are idle, the other containers can use the
         left-over CPU time. The actual amount of CPU time used varies depending on
         the number of containers running on the system.


       For example, consider three containers, where one has --cpu-shares=1024 and
         two others have --cpu-shares=512. When processes in all three
         containers attempt to use 100% of CPU, the first container would receive
         50% of the total CPU time. If you add a fourth container with --cpu-shares=1024,
         the first container only gets 33% of the CPU. The remaining containers
         receive 16.5%, 16.5% and 33% of the CPU.


                Container   CPU share   Flag                CPU time
                {C0}        100%        --cpu-shares=1024   33%
                {C1}        50%         --cpu-shares=512    16.5%
                {C2}        50%         --cpu-shares=512    16.5%
                {C4}        100%        --cpu-shares=1024   33%



       On a multi-core system, the shares of CPU time are distributed across the CPU
         cores. Even if a container is limited to less than 100% of CPU time, it can
         use 100% of each individual CPU core.


       For example, consider a system with more than three cores. If you start one
         container {C0} with --cpu-shares=512 running one process, and another container
         {C1} with --cpu-shares=1024 running two processes, this can result in the following
         division of CPU shares:


                PID    container    CPU    CPU share
                100    {C0}         0      100% of CPU0
                101    {C1}         1      100% of CPU1
                102    {C1}         2      100% of CPU2



       --cpu-period=0
         Limit the CPU CFS (Completely Fair Scheduler) period.


       Limit the container's CPU usage. This flag causes the kernel to restrict the
         container's CPU usage to the period you specify.


       --cpu-quota=0
         Limit the CPU CFS (Completely Fair Scheduler) quota.


       By default, containers run with the full CPU resource. This flag causes the kernel to restrict the container's CPU usage to the quota you specify.


       --cpuset-cpus=CPUSET-CPUS
         CPUs in which to allow execution (0-3, 0,1).


       --cpuset-mems=CPUSET-MEMS
         Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on
         NUMA systems.


       For example, if you have four memory nodes on your system (0-3), use --cpuset-mems=0,1 to ensure the processes in your Docker container only use memory
       from the first two memory nodes.


       --cgroup-parent=CGROUP-PARENT
         Path to cgroups under which the container's cgroup are created.


       If the path is not absolute, the path is considered relative to the cgroups path of the init process.  Cgroups are created if they do not already exist.


       --target=""
          Set the target build stage name.


       --ulimit=[]
         Ulimit options


       For more information about ulimit see Setting ulimits in a container ⟨https://docs.docker.com/engine/reference/commandline/run/#set-ulimits-in-
       container---ulimit⟩



EXAMPLES
Building an image using a Dockerfile located inside the current directory
       Docker images can be built using the build command and a Dockerfile:


              docker build .



       During the build process Docker creates intermediate images. In order to keep them, you must explicitly set --rm=false.


              docker build --rm=false .



       A good practice is to make a sub-directory with a related name and create the Dockerfile in that directory. For example, a directory called mongo may
       contain a Dockerfile to create a Docker MongoDB image. Likewise, another directory called httpd may be used to store Dockerfiles for Apache web server
       images.


       It is also a good practice to add the files required for the image to the sub-directory. These files will then be specified with the COPY or ADD
       instructions in the Dockerfile.


       Note: If you include a tar file (a good practice), then Docker will automatically extract the contents of the tar file specified within the ADD
       instruction into the specified target.


Building an image and naming that image
       A good practice is to give a name to the image you are building. Note that only a-z0-9-_. should be used for consistency.  There are no hard rules here
       but it is best to give the names consideration.


       The -t/--tag flag is used to rename an image. Here are some examples:


       Though it is not a good practice, image names can be arbitrary:


              docker build -t myimage .



       A better approach is to provide a fully qualified and meaningful repository, name, and tag (where the tag in this context means the qualifier after the
       ":"). In this example we build a JBoss image for the Fedora repository and give it the version 1.0:


              docker build -t fedora/jboss:1.0 .



       The next example is for the "whenry" user repository and uses Fedora and JBoss and gives it the version 2.1 :


              docker build -t whenry/fedora-jboss:v2.1 .



       If you do not provide a version tag then Docker will assign latest:


              docker build -t whenry/fedora-jboss .



       When you list the images, the image above will have the tag latest.


       You can apply multiple tags to an image. For example, you can apply the latest tag to a newly built image and add another tag that references a specific
       version.  For example, to tag an image both as whenry/fedora-jboss:latest and whenry/fedora-jboss:v2.1, use the following:


              docker build -t whenry/fedora-jboss:latest -t whenry/fedora-jboss:v2.1 .



       So renaming an image is arbitrary but consideration should be given to a useful convention that makes sense for consumers and should also take into
       account Docker community conventions.


Building an image using a URL
       This will clone the specified GitHub repository from the URL and use it as context. The Dockerfile at the root of the repository is used as Dockerfile.
       This only works if the GitHub repository is a dedicated repository.


              docker build github.com/scollier/purpletest



       Note: You can set an arbitrary Git repository via the git:// scheme.


Building an image using a URL to a tarball'ed context
       This will send the URL itself to the Docker daemon. The daemon will fetch the tarball archive, decompress it and use its contents as the build context.
       The Dockerfile at the root of the archive and the rest of the archive will get used as the context of the build. If you pass an -f PATH/Dockerfile option
       as well, the system will look for that file inside the contents of the tarball.


              docker build -f dev/Dockerfile https://10.10.10.1/docker/context.tar.gz



       Note: supported compression formats are 'xz', 'bzip2', 'gzip' and 'identity' (no compression).


Specify isolation technology for container (--isolation)
       This option is useful in situations where you are running Docker containers on Windows. The --isolation=<value> option sets a container's isolation
       technology. On Linux, the only supported is the default option which uses Linux namespaces. On Microsoft Windows, you can specify these values:


              · default: Use the value specified by the Docker daemon's --exec-opt . If the daemon does not specify an isolation technology, Microsoft Windows
                uses process as its default value.

              · process: Namespace isolation only.

              · hyperv: Hyper-V hypervisor partition-based isolation.



       Specifying the --isolation flag without a value is the same as setting --isolation="default".



HISTORY
       March 2014, Originally compiled by William Henry (whenry at redhat dot com) based on docker.com source material and internal work.  June 2014, updated by
       Sven Dowideit ⟨SvenDowideit@home.org.au⟩ June 2015, updated by Sally O'Malley ⟨somalley@redhat.com⟩



Docker Community                                                       Docker User Manuals                                                             DOCKER(1)
------------------------------------------------------------

Usage:	docker build [OPTIONS] PATH | URL | -

Build an image from a Dockerfile

Options:
      --add-host list           Add a custom host-to-IP mapping (host:ip)
      --build-arg list          Set build-time variables
      --cache-from strings      Images to consider as cache sources
      --cgroup-parent string    Optional parent cgroup for the container
      --compress                Compress the build context using gzip
      --cpu-period int          Limit the CPU CFS (Completely Fair Scheduler) period
      --cpu-quota int           Limit the CPU CFS (Completely Fair Scheduler) quota
  -c, --cpu-shares int          CPU shares (relative weight)
      --cpuset-cpus string      CPUs in which to allow execution (0-3, 0,1)
      --cpuset-mems string      MEMs in which to allow execution (0-3, 0,1)
      --disable-content-trust   Skip image verification (default true)
  -f, --file string             Name of the Dockerfile (Default is 'PATH/Dockerfile')
      --force-rm                Always remove intermediate containers
      --iidfile string          Write the image ID to the file
      --isolation string        Container isolation technology
      --label list              Set metadata for an image
  -m, --memory bytes            Memory limit
      --memory-swap bytes       Swap limit equal to memory plus swap: '-1' to enable unlimited swap
      --network string          Set the networking mode for the RUN instructions during build (default "default")
      --no-cache                Do not use cache when building the image
      --platform string         Set platform if server is multi-platform capable
      --pull                    Always attempt to pull a newer version of the image
  -q, --quiet                   Suppress the build output and print image ID on success
      --rm                      Remove intermediate containers after a successful build (default true)
      --security-opt strings    Security options
      --shm-size bytes          Size of /dev/shm
      --squash                  Squash newly built layers into a single new layer
      --stream                  Stream attaches to server to negotiate build context
  -t, --tag list                Name and optionally a tag in the 'name:tag' format
      --target string           Set the target build stage to build.
      --ulimit ulimit           Ulimit options (default [])
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-commit - Create a new image from a container's changes



SYNOPSIS
       docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]



DESCRIPTION
       Alias for docker container commit.



OPTIONS
       -a, --author=""
           Author (e.g., "John Hannibal Smith ⟨hannibal@a-team.com⟩")


       -c, --change=
           Apply Dockerfile instruction to the created image


       -h, --help[=false]
           help for commit


       -m, --message=""
           Commit message


       -p, --pause[=true]
           Pause container during commit



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]

Create a new image from a container's changes

Options:
  -a, --author string    Author (e.g., "John Hannibal Smith <hannibal@a-team.com>")
  -c, --change list      Apply Dockerfile instruction to the created image
  -m, --message string   Commit message
  -p, --pause            Pause container during commit (default true)
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-cp - Copy files/folders between a container and the local filesystem



SYNOPSIS
       docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-
           docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH



DESCRIPTION
       Alias for docker container cp.



OPTIONS
       -a, --archive[=false]
           Archive mode (copy all uid/gid information)


       -L, --follow-link[=false]
           Always follow symbol link in SRC_PATH


       -h, --help[=false]
           help for cp



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-
	docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH

Copy files/folders between a container and the local filesystem

Use '-' as the source to read a tar archive from stdin
and extract it to a directory destination in a container.
Use '-' as the destination to stream a tar archive of a
container source to stdout.

Options:
  -a, --archive       Archive mode (copy all uid/gid information)
  -L, --follow-link   Always follow symbol link in SRC_PATH
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-create - Create a new container



SYNOPSIS
       docker create [OPTIONS] IMAGE [COMMAND] [ARG...]



DESCRIPTION
       Alias for docker container create.



OPTIONS
       --add-host=
           Add a custom host-to-IP mapping (host:ip)


       -a, --attach=
           Attach to STDIN, STDOUT or STDERR


       --blkio-weight=0
           Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)


       --blkio-weight-device=[]
           Block IO weight (relative device weight)


       --cap-add=
           Add Linux capabilities


       --cap-drop=
           Drop Linux capabilities


       --cgroup-parent=""
           Optional parent cgroup for the container


       --cidfile=""
           Write the container ID to the file


       --cpu-count=0
           CPU count (Windows only)


       --cpu-percent=0
           CPU percent (Windows only)


       --cpu-period=0
           Limit CPU CFS (Completely Fair Scheduler) period


       --cpu-quota=0
           Limit CPU CFS (Completely Fair Scheduler) quota


       --cpu-rt-period=0
           Limit CPU real-time period in microseconds


       --cpu-rt-runtime=0
           Limit CPU real-time runtime in microseconds


       -c, --cpu-shares=0
           CPU shares (relative weight)


       --cpus=
           Number of CPUs


       --cpuset-cpus=""
           CPUs in which to allow execution (0-3, 0,1)


       --cpuset-mems=""
           MEMs in which to allow execution (0-3, 0,1)


       --device=
           Add a host device to the container


       --device-cgroup-rule=
           Add a rule to the cgroup allowed devices list


       --device-read-bps=[]
           Limit read rate (bytes per second) from a device


       --device-read-iops=[]
           Limit read rate (IO per second) from a device


       --device-write-bps=[]
           Limit write rate (bytes per second) to a device


       --device-write-iops=[]
           Limit write rate (IO per second) to a device


       --disable-content-trust[=true]
           Skip image verification


       --dns=
           Set custom DNS servers


       --dns-option=
           Set DNS options


       --dns-search=
           Set custom DNS search domains


       --domainname=""
           Container NIS domain name


       --entrypoint=""
           Overwrite the default ENTRYPOINT of the image


       -e, --env=
           Set environment variables


       --env-file=
           Read in a file of environment variables


       --expose=
           Expose a port or a range of ports


       --gpus=
           GPU devices to add to the container ('all' to pass all GPUs)


       --group-add=
           Add additional groups to join


       --health-cmd=""
           Command to run to check health


       --health-interval=0s
           Time between running the check (ms|s|m|h) (default 0s)


       --health-retries=0
           Consecutive failures needed to report unhealthy


       --health-start-period=0s
           Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)


       --health-timeout=0s
           Maximum time to allow one check to run (ms|s|m|h) (default 0s)


       --help[=false]
           Print usage


       -h, --hostname=""
           Container host name


       --init[=false]
           Run an init inside the container that forwards signals and reaps processes


       -i, --interactive[=false]
           Keep STDIN open even if not attached


       --io-maxbandwidth=0
           Maximum IO bandwidth limit for the system drive (Windows only)


       --io-maxiops=0
           Maximum IOps limit for the system drive (Windows only)


       --ip=""
           IPv4 address (e.g., 172.30.100.104)


       --ip6=""
           IPv6 address (e.g., 2001:db8::33)


       --ipc=""
           IPC mode to use


       --isolation=""
           Container isolation technology


       --kernel-memory=0
           Kernel memory limit


       -l, --label=
           Set meta data on a container


       --label-file=
           Read in a line delimited file of labels


       --link=
           Add link to another container


       --link-local-ip=
           Container IPv4/IPv6 link-local addresses


       --log-driver=""
           Logging driver for the container


       --log-opt=
           Log driver options


       --mac-address=""
           Container MAC address (e.g., 92:d0:c6:0a:29:33)


       -m, --memory=0
           Memory limit


       --memory-reservation=0
           Memory soft limit


       --memory-swap=0
           Swap limit equal to memory plus swap: '-1' to enable unlimited swap


       --memory-swappiness=-1
           Tune container memory swappiness (0 to 100)


       --mount=
           Attach a filesystem mount to the container


       --name=""
           Assign a name to the container


       --network=
           Connect a container to a network


       --network-alias=
           Add network-scoped alias for the container


       --no-healthcheck[=false]
           Disable any container-specified HEALTHCHECK


       --oom-kill-disable[=false]
           Disable OOM Killer


       --oom-score-adj=0
           Tune host's OOM preferences (-1000 to 1000)


       --pid=""
           PID namespace to use


       --pids-limit=0
           Tune container pids limit (set -1 for unlimited)


       --platform=""
           Set platform if server is multi-platform capable


       --privileged[=false]
           Give extended privileges to this container


       -p, --publish=
           Publish a container's port(s) to the host


       -P, --publish-all[=false]
           Publish all exposed ports to random ports


       --read-only[=false]
           Mount the container's root filesystem as read only


       --restart="no"
           Restart policy to apply when a container exits


       --rm[=false]
           Automatically remove the container when it exits


       --runtime=""
           Runtime to use for this container


       --security-opt=
           Security Options


       --shm-size=0
           Size of /dev/shm


       --stop-signal="SIGTERM"
           Signal to stop a container


       --stop-timeout=0
           Timeout (in seconds) to stop a container


       --storage-opt=
           Storage driver options for the container


       --sysctl=map[]
           Sysctl options


       --tmpfs=
           Mount a tmpfs directory


       -t, --tty[=false]
           Allocate a pseudo-TTY


       --ulimit=[]
           Ulimit options


       -u, --user=""
           Username or UID (format: <name|uid>[:<group|gid>])


       --userns=""
           User namespace to use


       --uts=""
           UTS namespace to use


       -v, --volume=
           Bind mount a volume


       --volume-driver=""
           Optional volume driver for the container


       --volumes-from=
           Mount volumes from the specified container(s)


       -w, --workdir=""
           Working directory inside the container



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker create [OPTIONS] IMAGE [COMMAND] [ARG...]

Create a new container

Options:
      --add-host list                  Add a custom host-to-IP mapping (host:ip)
  -a, --attach list                    Attach to STDIN, STDOUT or STDERR
      --blkio-weight uint16            Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)
      --blkio-weight-device list       Block IO weight (relative device weight) (default [])
      --cap-add list                   Add Linux capabilities
      --cap-drop list                  Drop Linux capabilities
      --cgroup-parent string           Optional parent cgroup for the container
      --cidfile string                 Write the container ID to the file
      --cpu-count int                  CPU count (Windows only)
      --cpu-percent int                CPU percent (Windows only)
      --cpu-period int                 Limit CPU CFS (Completely Fair Scheduler) period
      --cpu-quota int                  Limit CPU CFS (Completely Fair Scheduler) quota
      --cpu-rt-period int              Limit CPU real-time period in microseconds
      --cpu-rt-runtime int             Limit CPU real-time runtime in microseconds
  -c, --cpu-shares int                 CPU shares (relative weight)
      --cpus decimal                   Number of CPUs
      --cpuset-cpus string             CPUs in which to allow execution (0-3, 0,1)
      --cpuset-mems string             MEMs in which to allow execution (0-3, 0,1)
      --device list                    Add a host device to the container
      --device-cgroup-rule list        Add a rule to the cgroup allowed devices list
      --device-read-bps list           Limit read rate (bytes per second) from a device (default [])
      --device-read-iops list          Limit read rate (IO per second) from a device (default [])
      --device-write-bps list          Limit write rate (bytes per second) to a device (default [])
      --device-write-iops list         Limit write rate (IO per second) to a device (default [])
      --disable-content-trust          Skip image verification (default true)
      --dns list                       Set custom DNS servers
      --dns-option list                Set DNS options
      --dns-search list                Set custom DNS search domains
      --domainname string              Container NIS domain name
      --entrypoint string              Overwrite the default ENTRYPOINT of the image
  -e, --env list                       Set environment variables
      --env-file list                  Read in a file of environment variables
      --expose list                    Expose a port or a range of ports
      --gpus gpu-request               GPU devices to add to the container ('all' to pass all GPUs)
      --group-add list                 Add additional groups to join
      --health-cmd string              Command to run to check health
      --health-interval duration       Time between running the check (ms|s|m|h) (default 0s)
      --health-retries int             Consecutive failures needed to report unhealthy
      --health-start-period duration   Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)
      --health-timeout duration        Maximum time to allow one check to run (ms|s|m|h) (default 0s)
      --help                           Print usage
  -h, --hostname string                Container host name
      --init                           Run an init inside the container that forwards signals and reaps processes
  -i, --interactive                    Keep STDIN open even if not attached
      --io-maxbandwidth bytes          Maximum IO bandwidth limit for the system drive (Windows only)
      --io-maxiops uint                Maximum IOps limit for the system drive (Windows only)
      --ip string                      IPv4 address (e.g., 172.30.100.104)
      --ip6 string                     IPv6 address (e.g., 2001:db8::33)
      --ipc string                     IPC mode to use
      --isolation string               Container isolation technology
      --kernel-memory bytes            Kernel memory limit
  -l, --label list                     Set meta data on a container
      --label-file list                Read in a line delimited file of labels
      --link list                      Add link to another container
      --link-local-ip list             Container IPv4/IPv6 link-local addresses
      --log-driver string              Logging driver for the container
      --log-opt list                   Log driver options
      --mac-address string             Container MAC address (e.g., 92:d0:c6:0a:29:33)
  -m, --memory bytes                   Memory limit
      --memory-reservation bytes       Memory soft limit
      --memory-swap bytes              Swap limit equal to memory plus swap: '-1' to enable unlimited swap
      --memory-swappiness int          Tune container memory swappiness (0 to 100) (default -1)
      --mount mount                    Attach a filesystem mount to the container
      --name string                    Assign a name to the container
      --network network                Connect a container to a network
      --network-alias list             Add network-scoped alias for the container
      --no-healthcheck                 Disable any container-specified HEALTHCHECK
      --oom-kill-disable               Disable OOM Killer
      --oom-score-adj int              Tune host's OOM preferences (-1000 to 1000)
      --pid string                     PID namespace to use
      --pids-limit int                 Tune container pids limit (set -1 for unlimited)
      --platform string                Set platform if server is multi-platform capable
      --privileged                     Give extended privileges to this container
  -p, --publish list                   Publish a container's port(s) to the host
  -P, --publish-all                    Publish all exposed ports to random ports
      --read-only                      Mount the container's root filesystem as read only
      --restart string                 Restart policy to apply when a container exits (default "no")
      --rm                             Automatically remove the container when it exits
      --runtime string                 Runtime to use for this container
      --security-opt list              Security Options
      --shm-size bytes                 Size of /dev/shm
      --stop-signal string             Signal to stop a container (default "SIGTERM")
      --stop-timeout int               Timeout (in seconds) to stop a container
      --storage-opt list               Storage driver options for the container
      --sysctl map                     Sysctl options (default map[])
      --tmpfs list                     Mount a tmpfs directory
  -t, --tty                            Allocate a pseudo-TTY
      --ulimit ulimit                  Ulimit options (default [])
  -u, --user string                    Username or UID (format: <name|uid>[:<group|gid>])
      --userns string                  User namespace to use
      --uts string                     UTS namespace to use
  -v, --volume list                    Bind mount a volume
      --volume-driver string           Optional volume driver for the container
      --volumes-from list              Mount volumes from the specified container(s)
  -w, --workdir string                 Working directory inside the container
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-deploy - Deploy a new stack or update an existing stack



SYNOPSIS
       docker deploy [OPTIONS] STACK



DESCRIPTION
       Deploy a new stack or update an existing stack



OPTIONS
       --bundle-file=""
           Path to a Distributed Application Bundle file


       -c, --compose-file=[]
           Path to a Compose file, or "-" to read from stdin


       -h, --help[=false]
           help for deploy


       --namespace=""
           Kubernetes namespace to use


       --prune[=false]
           Prune services that are no longer referenced


       --resolve-image="always"
           Query the registry to resolve image digest and supported platforms ("always"|"changed"|"never")


       --with-registry-auth[=false]
           Send registry authentication details to Swarm agents



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker deploy [OPTIONS] STACK

Deploy a new stack or update an existing stack

Options:
      --bundle-file string     Path to a Distributed Application Bundle file
  -c, --compose-file strings   Path to a Compose file, or "-" to read from stdin
      --namespace string       Kubernetes namespace to use
      --prune                  Prune services that are no longer referenced
      --resolve-image string   Query the registry to resolve image digest and supported platforms ("always"|"changed"|"never") (default "always")
      --with-registry-auth     Send registry authentication details to Swarm agents
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-diff - Inspect changes to files or directories on a container's filesystem



SYNOPSIS
       docker diff CONTAINER



DESCRIPTION
       Alias for docker container diff.



OPTIONS
       -h, --help[=false]
           help for diff



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker diff CONTAINER

Inspect changes to files or directories on a container's filesystem
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-events - Get real time events from the server



SYNOPSIS
       docker events [OPTIONS]



DESCRIPTION
       Alias for docker system events.



OPTIONS
       -f, --filter=
           Filter output based on conditions provided


       --format=""
           Format the output using the given Go template


       -h, --help[=false]
           help for events


       --since=""
           Show all events created since timestamp


       --until=""
           Stream events until this timestamp



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker events [OPTIONS]

Get real time events from the server

Options:
  -f, --filter filter   Filter output based on conditions provided
      --format string   Format the output using the given Go template
      --since string    Show all events created since timestamp
      --until string    Stream events until this timestamp
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-exec - Run a command in a running container



SYNOPSIS
       docker exec [OPTIONS] CONTAINER COMMAND [ARG...]



DESCRIPTION
       Alias for docker container exec.



OPTIONS
       -d, --detach[=false]
           Detached mode: run command in the background


       --detach-keys=""
           Override the key sequence for detaching a container


       -e, --env=
           Set environment variables


       -h, --help[=false]
           help for exec


       -i, --interactive[=false]
           Keep STDIN open even if not attached


       --privileged[=false]
           Give extended privileges to the command


       -t, --tty[=false]
           Allocate a pseudo-TTY


       -u, --user=""
           Username or UID (format: <name|uid>[:<group|gid>])


       -w, --workdir=""
           Working directory inside the container



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker exec [OPTIONS] CONTAINER COMMAND [ARG...]

Run a command in a running container

Options:
  -d, --detach               Detached mode: run command in the background
      --detach-keys string   Override the key sequence for detaching a container
  -e, --env list             Set environment variables
  -i, --interactive          Keep STDIN open even if not attached
      --privileged           Give extended privileges to the command
  -t, --tty                  Allocate a pseudo-TTY
  -u, --user string          Username or UID (format: <name|uid>[:<group|gid>])
  -w, --workdir string       Working directory inside the container
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-export - Export a container's filesystem as a tar archive



SYNOPSIS
       docker export [OPTIONS] CONTAINER



DESCRIPTION
       Alias for docker container export.



OPTIONS
       -h, --help[=false]
           help for export


       -o, --output=""
           Write to a file, instead of STDOUT



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker export [OPTIONS] CONTAINER

Export a container's filesystem as a tar archive

Options:
  -o, --output string   Write to a file, instead of STDOUT
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-history - Show the history of an image



SYNOPSIS
       docker history [OPTIONS] IMAGE



DESCRIPTION
       Alias for docker image history.



OPTIONS
       --format=""
           Pretty-print images using a Go template


       -h, --help[=false]
           help for history


       -H, --human[=true]
           Print sizes and dates in human readable format


       --no-trunc[=false]
           Don't truncate output


       -q, --quiet[=false]
           Only show numeric IDs



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker history [OPTIONS] IMAGE

Show the history of an image

Options:
      --format string   Pretty-print images using a Go template
  -H, --human           Print sizes and dates in human readable format (default true)
      --no-trunc        Don't truncate output
  -q, --quiet           Only show numeric IDs
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-images - List images



SYNOPSIS
       docker images [OPTIONS] [REPOSITORY[:TAG]]



DESCRIPTION
       Alias for docker image ls.



OPTIONS
       -a, --all[=false]
           Show all images (default hides intermediate images)


       --digests[=false]
           Show digests


       -f, --filter=
           Filter output based on conditions provided


       --format=""
           Pretty-print images using a Go template


       -h, --help[=false]
           help for images


       --no-trunc[=false]
           Don't truncate output


       -q, --quiet[=false]
           Only show numeric IDs



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker images [OPTIONS] [REPOSITORY[:TAG]]

List images

Options:
  -a, --all             Show all images (default hides intermediate images)
      --digests         Show digests
  -f, --filter filter   Filter output based on conditions provided
      --format string   Pretty-print images using a Go template
      --no-trunc        Don't truncate output
  -q, --quiet           Only show numeric IDs
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-import - Import the contents from a tarball to create a filesystem image



SYNOPSIS
       docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]



DESCRIPTION
       Alias for docker image import.



OPTIONS
       -c, --change=
           Apply Dockerfile instruction to the created image


       -h, --help[=false]
           help for import


       -m, --message=""
           Set commit message for imported image


       --platform=""
           Set platform if server is multi-platform capable



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]

Import the contents from a tarball to create a filesystem image

Options:
  -c, --change list       Apply Dockerfile instruction to the created image
  -m, --message string    Set commit message for imported image
      --platform string   Set platform if server is multi-platform capable
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-info - Display system-wide information



SYNOPSIS
       docker info [OPTIONS]



DESCRIPTION
       Alias for docker system info.



OPTIONS
       -f, --format=""
           Format the output using the given Go template


       -h, --help[=false]
           help for info



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker info [OPTIONS]

Display system-wide information

Options:
  -f, --format string   Format the output using the given Go template
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-inspect - Return low-level information on Docker objects



SYNOPSIS
       docker inspect [OPTIONS] NAME|ID [NAME|ID...]



DESCRIPTION
       This displays the low-level information on Docker object(s) (e.g. container, image, volume,network, node, service, or task) identified by name or ID. By
       default, this will render all results in a JSON array. If the container and image have the same name, this will return container JSON for unspecified
       type. If a format is specified, the given template will be executed for each result.



EXAMPLES
       Get information about an image when image name conflicts with the container name, e.g. both image and container are named rhel7:


              $ docker inspect --type=image rhel7
              [
              {
               "Id": "fe01a428b9d9de35d29531e9994157978e8c48fa693e1bf1d221dffbbb67b170",
               "Parent": "10acc31def5d6f249b548e01e8ffbaccfd61af0240c17315a7ad393d022c5ca2",
               ....
              }
              ]



Getting information on a container
       To get information on a container use its ID or instance name:


              $ docker inspect d2cc496561d6
              [{
              "Id": "d2cc496561d6d520cbc0236b4ba88c362c446a7619992123f11c809cded25b47",
              "Created": "2015-06-08T16:18:02.505155285Z",
              "Path": "bash",
              "Args": [],
              "State": {
                  "Running": false,
                  "Paused": false,
                  "Restarting": false,
                  "OOMKilled": false,
                  "Dead": false,
                  "Pid": 0,
                  "ExitCode": 0,
                  "Error": "",
                  "StartedAt": "2015-06-08T16:18:03.643865954Z",
                  "FinishedAt": "2015-06-08T16:57:06.448552862Z"
              },
              "Image": "ded7cd95e059788f2586a51c275a4f151653779d6a7f4dad77c2bd34601d94e4",
              "NetworkSettings": {
                  "Bridge": "",
                  "SandboxID": "6b4851d1903e16dd6a567bd526553a86664361f31036eaaa2f8454d6f4611f6f",
                  "HairpinMode": false,
                  "LinkLocalIPv6Address": "",
                  "LinkLocalIPv6PrefixLen": 0,
                  "Ports": {},
                  "SandboxKey": "/var/run/docker/netns/6b4851d1903e",
                  "SecondaryIPAddresses": null,
                  "SecondaryIPv6Addresses": null,
                  "EndpointID": "7587b82f0dada3656fda26588aee72630c6fab1536d36e394b2bfbcf898c971d",
                  "Gateway": "172.17.0.1",
                  "GlobalIPv6Address": "",
                  "GlobalIPv6PrefixLen": 0,
                  "IPAddress": "172.17.0.2",
                  "IPPrefixLen": 16,
                  "IPv6Gateway": "",
                  "MacAddress": "02:42:ac:12:00:02",
                  "Networks": {
                      "bridge": {
                          "NetworkID": "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812",
                          "EndpointID": "7587b82f0dada3656fda26588aee72630c6fab1536d36e394b2bfbcf898c971d",
                          "Gateway": "172.17.0.1",
                          "IPAddress": "172.17.0.2",
                          "IPPrefixLen": 16,
                          "IPv6Gateway": "",
                          "GlobalIPv6Address": "",
                          "GlobalIPv6PrefixLen": 0,
                          "MacAddress": "02:42:ac:12:00:02"
                      }
                  }

              },
              "ResolvConfPath": "/var/lib/docker/containers/d2cc496561d6d520cbc0236b4ba88c362c446a7619992123f11c809cded25b47/resolv.conf",
              "HostnamePath": "/var/lib/docker/containers/d2cc496561d6d520cbc0236b4ba88c362c446a7619992123f11c809cded25b47/hostname",
              "HostsPath": "/var/lib/docker/containers/d2cc496561d6d520cbc0236b4ba88c362c446a7619992123f11c809cded25b47/hosts",
              "LogPath": "/var/lib/docker/containers/d2cc496561d6d520cbc0236b4ba88c362c446a7619992123f11c809cded25b47/d2cc496561d6d520cbc0236b4ba88c362c446a7619992123f11c809cded25b47-json.log",
              "Name": "/adoring_wozniak",
              "RestartCount": 0,
              "Driver": "devicemapper",
              "MountLabel": "",
              "ProcessLabel": "",
              "Mounts": [
                {
                  "Source": "/data",
                  "Destination": "/data",
                  "Mode": "ro,Z",
                  "RW": false
              "Propagation": ""
                }
              ],
              "AppArmorProfile": "",
              "ExecIDs": null,
              "HostConfig": {
                  "Binds": null,
                  "ContainerIDFile": "",
                  "Memory": 0,
                  "MemorySwap": 0,
                  "CpuShares": 0,
                  "CpuPeriod": 0,
                  "CpusetCpus": "",
                  "CpusetMems": "",
                  "CpuQuota": 0,
                  "BlkioWeight": 0,
                  "OomKillDisable": false,
                  "Privileged": false,
                  "PortBindings": {},
                  "Links": null,
                  "PublishAllPorts": false,
                  "Dns": null,
                  "DnsSearch": null,
                  "DnsOptions": null,
                  "ExtraHosts": null,
                  "VolumesFrom": null,
                  "Devices": [],
                  "NetworkMode": "bridge",
                  "IpcMode": "",
                  "PidMode": "",
                  "UTSMode": "",
                  "CapAdd": null,
                  "CapDrop": null,
                  "RestartPolicy": {
                      "Name": "no",
                      "MaximumRetryCount": 0
                  },
                  "SecurityOpt": null,
                  "ReadonlyRootfs": false,
                  "Ulimits": null,
                  "LogConfig": {
                      "Type": "json-file",
                      "Config": {}
                  },
                  "CgroupParent": ""
              },
              "GraphDriver": {
                  "Name": "devicemapper",
                  "Data": {
                      "DeviceId": "5",
                      "DeviceName": "docker-253:1-2763198-d2cc496561d6d520cbc0236b4ba88c362c446a7619992123f11c809cded25b47",
                      "DeviceSize": "171798691840"
                  }
              },
              "Config": {
                  "Hostname": "d2cc496561d6",
                  "Domainname": "",
                  "User": "",
                  "AttachStdin": true,
                  "AttachStdout": true,
                  "AttachStderr": true,
                  "ExposedPorts": null,
                  "Tty": true,
                  "OpenStdin": true,
                  "StdinOnce": true,
                  "Env": null,
                  "Cmd": [
                      "bash"
                  ],
                  "Image": "fedora",
                  "Volumes": null,
                  "VolumeDriver": "",
                  "WorkingDir": "",
                  "Entrypoint": null,
                  "NetworkDisabled": false,
                  "MacAddress": "",
                  "OnBuild": null,
                  "Labels": {},
                  "Memory": 0,
                  "MemorySwap": 0,
                  "CpuShares": 0,
                  "Cpuset": "",
                  "StopSignal": "SIGTERM"
              }
              }
              ]



Getting the IP address of a container instance
       To get the IP address of a container use:


              $ docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' d2cc496561d6
              172.17.0.2



Listing all port bindings
       One can loop over arrays and maps in the results to produce simple text output:


              $ docker inspect --format='{{range $p, $conf := .NetworkSettings.Ports}} \
                {{$p}} -> {{(index $conf 0).HostPort}} {{end}}' d2cc496561d6
                80/tcp -> 80



       You can get more information about how to write a Go template from:

       ⟨https://golang.org/pkg/text/template/⟩.


Getting size information on a container
              $ docker inspect -s d2cc496561d6
              [
              {
              "SizeRw": 0,
              "SizeRootFs": 972,
              }
              ]



Getting information on an image
       Use an image's ID or name (e.g., repository/name[:tag]) to get information about the image:


              $ docker inspect ded7cd95e059
              [{
              "Id": "ded7cd95e059788f2586a51c275a4f151653779d6a7f4dad77c2bd34601d94e4",
              "Parent": "48ecf305d2cf7046c1f5f8fcbcd4994403173441d4a7f125b1bb0ceead9de731",
              "Comment": "",
              "Created": "2015-05-27T16:58:22.937503085Z",
              "Container": "76cf7f67d83a7a047454b33007d03e32a8f474ad332c3a03c94537edd22b312b",
              "ContainerConfig": {
                  "Hostname": "76cf7f67d83a",
                  "Domainname": "",
                  "User": "",
                  "AttachStdin": false,
                  "AttachStdout": false,
                  "AttachStderr": false,
                  "ExposedPorts": null,
                  "Tty": false,
                  "OpenStdin": false,
                  "StdinOnce": false,
                  "Env": null,
                  "Cmd": [
                      "/bin/sh",
                      "-c",
                      "#(nop) ADD file:4be46382bcf2b095fcb9fe8334206b584eff60bb3fad8178cbd97697fcb2ea83 in /"
                  ],
                  "Image": "48ecf305d2cf7046c1f5f8fcbcd4994403173441d4a7f125b1bb0ceead9de731",
                  "Volumes": null,
                  "VolumeDriver": "",
                  "WorkingDir": "",
                  "Entrypoint": null,
                  "NetworkDisabled": false,
                  "MacAddress": "",
                  "OnBuild": null,
                  "Labels": {}
              },
              "DockerVersion": "1.6.0",
              "Author": "Lokesh Mandvekar \u003clsm5@fedoraproject.org\u003e",
              "Config": {
                  "Hostname": "76cf7f67d83a",
                  "Domainname": "",
                  "User": "",
                  "AttachStdin": false,
                  "AttachStdout": false,
                  "AttachStderr": false,
                  "ExposedPorts": null,
                  "Tty": false,
                  "OpenStdin": false,
                  "StdinOnce": false,
                  "Env": null,
                  "Cmd": null,
                  "Image": "48ecf305d2cf7046c1f5f8fcbcd4994403173441d4a7f125b1bb0ceead9de731",
                  "Volumes": null,
                  "VolumeDriver": "",
                  "WorkingDir": "",
                  "Entrypoint": null,
                  "NetworkDisabled": false,
                  "MacAddress": "",
                  "OnBuild": null,
                  "Labels": {}
              },
              "Architecture": "amd64",
              "Os": "linux",
              "Size": 186507296,
              "VirtualSize": 186507296,
              "GraphDriver": {
                  "Name": "devicemapper",
                  "Data": {
                      "DeviceId": "3",
                      "DeviceName": "docker-253:1-2763198-ded7cd95e059788f2586a51c275a4f151653779d6a7f4dad77c2bd34601d94e4",
                      "DeviceSize": "171798691840"
                  }
              }
              }
              ]




OPTIONS
       -f, --format=""
           Format the output using the given Go template


       -h, --help[=false]
           help for inspect


       -s, --size[=false]
           Display total file sizes if the type is container


       --type=""
           Return JSON for specified type



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker inspect [OPTIONS] NAME|ID [NAME|ID...]

Return low-level information on Docker objects

Options:
  -f, --format string   Format the output using the given Go template
  -s, --size            Display total file sizes if the type is container
      --type string     Return JSON for specified type
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-kill - Kill one or more running containers



SYNOPSIS
       docker kill [OPTIONS] CONTAINER [CONTAINER...]



DESCRIPTION
       Alias for docker container kill.



OPTIONS
       -h, --help[=false]
           help for kill


       -s, --signal="KILL"
           Signal to send to the container



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker kill [OPTIONS] CONTAINER [CONTAINER...]

Kill one or more running containers

Options:
  -s, --signal string   Signal to send to the container (default "KILL")
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-load - Load an image from a tar archive or STDIN



SYNOPSIS
       docker load [OPTIONS]



DESCRIPTION
       Alias for docker image load.



OPTIONS
       -h, --help[=false]
           help for load


       -i, --input=""
           Read from tar archive file, instead of STDIN


       -q, --quiet[=false]
           Suppress the load output



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker load [OPTIONS]

Load an image from a tar archive or STDIN

Options:
  -i, --input string   Read from tar archive file, instead of STDIN
  -q, --quiet          Suppress the load output
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-login - Log in to a Docker registry



SYNOPSIS
       docker login [OPTIONS] [SERVER]



DESCRIPTION
       Log in to a Docker Registry located on the specified SERVER.  You can specify a URL or a hostname for the SERVER value. If you do not specify a SERVER,
       the command uses Docker's public registry located at https://registry-1.docker.io/ by default.  To get a username/password for Docker's public registry,
       create an account on Docker Hub.


       docker login requires user to use sudo or be root, except when:


                1. connecting to  a remote daemon, such as a docker-machine provisioned docker engine.

                2. user is added to the docker group.  This will impact the security of your system; the docker group is root equivalent.  See Docker Daemon
                   Attack Surface ⟨https://docs.docker.com/engine/security/security/#/docker-daemon-attack-surface⟩ for details.



       You can log into any public or private repository for which you have credentials.  When you log in, the command stores encoded credentials in
       $HOME/.docker/config.json on Linux or %USERPROFILE%/.docker/config.json on Windows.



EXAMPLES
Login to a registry on your localhost
              # docker login localhost:8080




See also
       docker-logout(1) to log out from a Docker registry.



OPTIONS
       -h, --help[=false]
           help for login


       -p, --password=""
           Password


       --password-stdin[=false]
           Take the password from stdin


       -u, --username=""
           Username



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker login [OPTIONS] [SERVER]

Log in to a Docker registry.
If no server is specified, the default is defined by the daemon.

Options:
  -p, --password string   Password
      --password-stdin    Take the password from stdin
  -u, --username string   Username
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-logout - Log out from a Docker registry



SYNOPSIS
       docker logout [SERVER]



DESCRIPTION
       Log out of a Docker Registry located on the specified SERVER. You can specify a URL or a hostname for the SERVER value. If you do not specify a SERVER,
       the command attempts to log you out of Docker's public registry located at https://registry-1.docker.io/ by default.



EXAMPLES
Log out from a registry on your localhost
              # docker logout localhost:8080




See also
       docker-login(1) to log in to a Docker registry server.



OPTIONS
       -h, --help[=false]
           help for logout



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker logout [SERVER]

Log out from a Docker registry.
If no server is specified, the default is defined by the daemon.
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-logs - Fetch the logs of a container



SYNOPSIS
       docker logs [OPTIONS] CONTAINER



DESCRIPTION
       Alias for docker container logs.



OPTIONS
       --details[=false]
           Show extra details provided to logs


       -f, --follow[=false]
           Follow log output


       -h, --help[=false]
           help for logs


       --since=""
           Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)


       --tail="all"
           Number of lines to show from the end of the logs


       -t, --timestamps[=false]
           Show timestamps


       --until=""
           Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker logs [OPTIONS] CONTAINER

Fetch the logs of a container

Options:
      --details        Show extra details provided to logs
  -f, --follow         Follow log output
      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)
      --tail string    Number of lines to show from the end of the logs (default "all")
  -t, --timestamps     Show timestamps
      --until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-pause - Pause all processes within one or more containers



SYNOPSIS
       docker pause CONTAINER [CONTAINER...]



DESCRIPTION
       Alias for docker container pause.



OPTIONS
       -h, --help[=false]
           help for pause



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker pause CONTAINER [CONTAINER...]

Pause all processes within one or more containers
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-port - List port mappings or a specific mapping for the container



SYNOPSIS
       docker port CONTAINER [PRIVATE_PORT[/PROTO]]



DESCRIPTION
       Alias for docker container port.



OPTIONS
       -h, --help[=false]
           help for port



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker port CONTAINER [PRIVATE_PORT[/PROTO]]

List port mappings or a specific mapping for the container
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-ps - List containers



SYNOPSIS
       docker ps [OPTIONS]



DESCRIPTION
       Alias for docker container ls.



OPTIONS
       -a, --all[=false]
           Show all containers (default shows just running)


       -f, --filter=
           Filter output based on conditions provided


       --format=""
           Pretty-print containers using a Go template


       -h, --help[=false]
           help for ps


       -n, --last=-1
           Show n last created containers (includes all states)


       -l, --latest[=false]
           Show the latest created container (includes all states)


       --no-trunc[=false]
           Don't truncate output


       -q, --quiet[=false]
           Only display numeric IDs


       -s, --size[=false]
           Display total file sizes



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker ps [OPTIONS]

List containers

Options:
  -a, --all             Show all containers (default shows just running)
  -f, --filter filter   Filter output based on conditions provided
      --format string   Pretty-print containers using a Go template
  -n, --last int        Show n last created containers (includes all states) (default -1)
  -l, --latest          Show the latest created container (includes all states)
      --no-trunc        Don't truncate output
  -q, --quiet           Only display numeric IDs
  -s, --size            Display total file sizes
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-pull - Pull an image or a repository from a registry



SYNOPSIS
       docker pull [OPTIONS] NAME[:TAG|@DIGEST]



DESCRIPTION
       Alias for docker image pull.



OPTIONS
       -a, --all-tags[=false]
           Download all tagged images in the repository


       --disable-content-trust[=true]
           Skip image verification


       -h, --help[=false]
           help for pull


       --platform=""
           Set platform if server is multi-platform capable


       -q, --quiet[=false]
           Suppress verbose output



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker pull [OPTIONS] NAME[:TAG|@DIGEST]

Pull an image or a repository from a registry

Options:
  -a, --all-tags                Download all tagged images in the repository
      --disable-content-trust   Skip image verification (default true)
      --platform string         Set platform if server is multi-platform capable
  -q, --quiet                   Suppress verbose output
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-push - Push an image or a repository to a registry



SYNOPSIS
       docker push [OPTIONS] NAME[:TAG]



DESCRIPTION
       Alias for docker image push.



OPTIONS
       --disable-content-trust[=true]
           Skip image signing


       -h, --help[=false]
           help for push



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker push [OPTIONS] NAME[:TAG]

Push an image or a repository to a registry

Options:
      --disable-content-trust   Skip image signing (default true)
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-rename - Rename a container



SYNOPSIS
       docker rename CONTAINER NEW_NAME



DESCRIPTION
       Alias for docker container rename.



OPTIONS
       -h, --help[=false]
           help for rename



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker rename CONTAINER NEW_NAME

Rename a container
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-restart - Restart one or more containers



SYNOPSIS
       docker restart [OPTIONS] CONTAINER [CONTAINER...]



DESCRIPTION
       Alias for docker container restart.



OPTIONS
       -h, --help[=false]
           help for restart


       -t, --time=10
           Seconds to wait for stop before killing the container



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker restart [OPTIONS] CONTAINER [CONTAINER...]

Restart one or more containers

Options:
  -t, --time int   Seconds to wait for stop before killing the container (default 10)
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-rm - Remove one or more containers



SYNOPSIS
       docker rm [OPTIONS] CONTAINER [CONTAINER...]



DESCRIPTION
       Alias for docker container rm.



OPTIONS
       -f, --force[=false]
           Force the removal of a running container (uses SIGKILL)


       -h, --help[=false]
           help for rm


       -l, --link[=false]
           Remove the specified link


       -v, --volumes[=false]
           Remove the volumes associated with the container



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker rm [OPTIONS] CONTAINER [CONTAINER...]

Remove one or more containers

Options:
  -f, --force     Force the removal of a running container (uses SIGKILL)
  -l, --link      Remove the specified link
  -v, --volumes   Remove the volumes associated with the container
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-rmi - Remove one or more images



SYNOPSIS
       docker rmi [OPTIONS] IMAGE [IMAGE...]



DESCRIPTION
       Alias for docker image rm.



OPTIONS
       -f, --force[=false]
           Force removal of the image


       -h, --help[=false]
           help for rmi


       --no-prune[=false]
           Do not delete untagged parents



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker rmi [OPTIONS] IMAGE [IMAGE...]

Remove one or more images

Options:
  -f, --force      Force removal of the image
      --no-prune   Do not delete untagged parents
------------------------------------------------------------
DOCKER(1)                                                                   JUNE 2014                                                                  DOCKER(1)



NAME
       docker-run - Run a command in a new container



SYNOPSIS
       docker run [-a|--attach[=[]]] [--add-host[=[]]] [--blkio-weight[=[BLKIO-WEIGHT]]] [--blkio-weight-device[=[]]] [--cpu-shares[=0]] [--cap-add[=[]]]
       [--cap-drop[=[]]] [--cgroup-parent[=CGROUP-PATH]] [--cidfile[=CIDFILE]] [--cpu-count[=0]] [--cpu-percent[=0]] [--cpu-period[=0]] [--cpu-quota[=0]]
       [--cpu-rt-period[=0]] [--cpu-rt-runtime[=0]] [--cpus[=0.0]] [--cpuset-cpus[=CPUSET-CPUS]] [--cpuset-mems[=CPUSET-MEMS]] [-d|--detach]
       [--detach-keys[=[]]] [--device[=[]]] [--device-cgroup-rule[=[]]] [--device-read-bps[=[]]] [--device-read-iops[=[]]] [--device-write-bps[=[]]]
       [--device-write-iops[=[]]] [--dns[=[]]] [--dns-option[=[]]] [--dns-search[=[]]] [--domainname[=DOMAINNAME]] [-e|--env[=[]]] [--entrypoint[=ENTRYPOINT]]
       [--env-file[=[]]] [--expose[=[]]] [--group-add[=[]]] [-h|--hostname[=HOSTNAME]] [--help] [--init] [-i|--interactive] [--ip[=IPv4-ADDRESS]]
       [--ip6[=IPv6-ADDRESS]] [--ipc[=IPC]] [--isolation[=default]] [--kernel-memory[=KERNEL-MEMORY]] [-l|--label[=[]]] [--label-file[=[]]] [--link[=[]]]
       [--link-local-ip[=[]]] [--log-driver[=[]]] [--log-opt[=[]]] [-m|--memory[=MEMORY]] [--mac-address[=MAC-ADDRESS]]
       [--memory-reservation[=MEMORY-RESERVATION]] [--memory-swap[=LIMIT]] [--memory-swappiness[=MEMORY-SWAPPINESS]] [--mount[=[MOUNT]]] [--name[=NAME]]
       [--network-alias[=[]]] [--network[="bridge"]] [--oom-kill-disable] [--oom-score-adj[=0]] [-P|--publish-all] [-p|--publish[=[]]] [--pid[=[PID]]]
       [--userns[=[]]] [--pids-limit[=PIDS_LIMIT]] [--privileged] [--read-only] [--restart[=RESTART]] [--rm] [--security-opt[=[]]] [--storage-opt[=[]]]
       [--stop-signal[=SIGNAL]] [--stop-timeout[=TIMEOUT]] [--shm-size[=[]]] [--sig-proxy[=true]] [--sysctl[=[]]] [-t|--tty]
       [--tmpfs[=[CONTAINER-DIR[:OPTIONS]]] [-u|--user[=USER]] [--ulimit[=[]]] [--uts[=[]]] [-v|--volume[=[[HOST-DIR:]CONTAINER-DIR[:OPTIONS]]]]
       [--volume-driver[=DRIVER]] [--volumes-from[=[]]] [-w|--workdir[=WORKDIR]] IMAGE [COMMAND] [ARG...]



DESCRIPTION
       Run a process in a new container. docker run starts a process with its own file system, its own networking, and its own isolated process tree. The IMAGE
       which starts the process may define defaults related to the process that will be run in the container, the networking to expose, and more, but docker run
       gives final control to the operator or administrator who starts the container from the image. For that reason docker run has more options than any other
       Docker command.


       If the IMAGE is not already loaded then docker run will pull the IMAGE, and all image dependencies, from the repository in the same way running docker
       pull IMAGE, before it starts the container from that image.



OPTIONS
       -a, --attach=[]
          Attach to STDIN, STDOUT or STDERR.


       In foreground mode (the default when -d is not specified), docker run can start the process in the container and attach the console to the process's
       standard input, output, and standard error. It can even pretend to be a TTY (this is what most commandline executables expect) and pass along signals.
       The -a option can be set for each of stdin, stdout, and stderr.


       --add-host=[]
          Add a custom host-to-IP mapping (host:ip)


       Add a line to /etc/hosts. The format is hostname:ip.  The --add-host option can be set multiple times.


       --blkio-weight=0
          Block IO weight (relative weight) accepts a weight value between 10 and 1000.


       --blkio-weight-device=[]
          Block IO weight (relative device weight, format: DEVICE_NAME:WEIGHT).


       --cpu-shares=0
          CPU shares (relative weight)


       By default, all containers get the same proportion of CPU cycles. This proportion can be modified by changing the container's CPU share weighting
       relative to the weighting of all other running containers.


       To modify the proportion from the default of 1024, use the --cpu-shares flag to set the weighting to 2 or higher.


       The proportion will only apply when CPU-intensive processes are running.  When tasks in one container are idle, other containers can use the left-over
       CPU time. The actual amount of CPU time will vary depending on the number of containers running on the system.


       For example, consider three containers, one has a cpu-share of 1024 and two others have a cpu-share setting of 512. When processes in all three
       containers attempt to use 100% of CPU, the first container would receive 50% of the total CPU time. If you add a fourth container with a cpu-share of
       1024, the first container only gets 33% of the CPU. The remaining containers receive 16.5%, 16.5% and 33% of the CPU.


       On a multi-core system, the shares of CPU time are distributed over all CPU cores. Even if a container is limited to less than 100% of CPU time, it can
       use 100% of each individual CPU core.


       For example, consider a system with more than three cores. If you start one container {C0} with -c=512 running one process, and another container {C1}
       with -c=1024 running two processes, this can result in the following division of CPU shares:


              PID    container    CPU CPU share
              100    {C0}     0   100% of CPU0
              101    {C1}     1   100% of CPU1
              102    {C1}     2   100% of CPU2



       --cap-add=[]
          Add Linux capabilities


       --cap-drop=[]
          Drop Linux capabilities


       --cgroup-parent=""
          Path to cgroups under which the cgroup for the container will be created. If the path is not absolute, the path is considered to be relative to the
       cgroups path of the init process. Cgroups will be created if they do not already exist.


       --cidfile=""
          Write the container ID to the file


       --cpu-count=0
           Limit the number of CPUs available for execution by the container.


              On Windows Server containers, this is approximated as a percentage of total CPU usage.

              On Windows Server containers, the processor resource controls are mutually exclusive, the order of precedence is CPUCount first, then CPUShares, and CPUPercent last.



       --cpu-percent=0
           Limit the percentage of CPU available for execution by a container running on a Windows daemon.


              On Windows Server containers, the processor resource controls are mutually exclusive, the order of precedence is CPUCount first, then CPUShares, and CPUPercent last.



       --cpu-period=0
          Limit the CPU CFS (Completely Fair Scheduler) period


       Limit the container's CPU usage. This flag tell the kernel to restrict the container's CPU usage to the period you specify.


       --cpuset-cpus=""
          CPUs in which to allow execution (0-3, 0,1)


       --cpuset-mems=""
          Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.


       If you have four memory nodes on your system (0-3), use --cpuset-mems=0,1 then processes in your Docker container will only use memory from the first two
       memory nodes.


       --cpu-quota=0
          Limit the CPU CFS (Completely Fair Scheduler) quota


       Limit the container's CPU usage. By default, containers run with the full CPU resource. This flag tell the kernel to restrict the container's CPU usage
       to the quota you specify.


       --cpu-rt-period=0
          Limit the CPU real-time period in microseconds


       Limit the container's Real Time CPU usage. This flag tell the kernel to restrict the container's Real Time CPU usage to the period you specify.


       --cpu-rt-runtime=0
          Limit the CPU real-time runtime in microseconds


       Limit the containers Real Time CPU usage. This flag tells the kernel to limit the amount of time in a given CPU period Real Time tasks may consume. Ex:
          Period of 1,000,000us and Runtime of 950,000us means that this container could consume 95% of available CPU and leave the remaining 5% to normal
       priority tasks.


       The sum of all runtimes across containers cannot exceed the amount allotted to the parent cgroup.


       --cpus=0.0
          Number of CPUs. The default is 0.0 which means no limit.


       -d, --detach=true|false
          Detached mode: run the container in the background and print the new container ID. The default is false.


       At any time you can run docker ps in the other shell to view a list of the running containers. You can reattach to a detached container with docker
       attach.


       When attached in the tty mode, you can detach from the container (and leave it running) using a configurable key sequence. The default sequence is CTRL-p
       CTRL-q.  You configure the key sequence using the --detach-keys option or a configuration file.  See config-json(5) for documentation on using a
       configuration file.


       --detach-keys=key
          Override the key sequence for detaching a container; key is a single character from the [a-Z] range, or ctrl-value, where value is one of: a-z, @, ^,
       [, ,, or _.


       --device=onhost:incontainer[:mode]
          Add a host device onhost to the container under the incontainer name.  Optional mode parameter can be used to specify device permissions, it is a
       combination of r (for read), w (for write), and m (for mknod(2)).


       For example, --device=/dev/sdc:/dev/xvdc:rwm will give a container all permissions for the host device /dev/sdc, seen as /dev/xvdc inside the container.


       --device-cgroup-rule="type major:minor mode"
          Add a rule to the cgroup allowed devices list. The rule is expected to be in the format specified in the Linux kernel documentation
       (Documentation/cgroup-v1/devices.txt):
            - type: a (all), c (char), or b (block);
            - major and minor: either a number, or * for all;
            - mode: a composition of r (read), w (write), and m (mknod(2)).


       Example: --device-cgroup-rule "c 1:3 mr": allow for a character device idendified by 1:3  to be created and read.


       --device-read-bps=[]
          Limit read rate from a device (e.g. --device-read-bps=/dev/sda:1mb)


       --device-read-iops=[]
          Limit read rate from a device (e.g. --device-read-iops=/dev/sda:1000)


       --device-write-bps=[]
          Limit write rate to a device (e.g. --device-write-bps=/dev/sda:1mb)


       --device-write-iops=[]
          Limit write rate to a device (e.g. --device-write-iops=/dev/sda:1000)


       --dns-search=[]
          Set custom DNS search domains (Use --dns-search=. if you don't wish to set the search domain)


       --dns-option=[]
          Set custom DNS options


       --dns=[]
          Set custom DNS servers


       This option can be used to override the DNS configuration passed to the container. Typically this is necessary when the host DNS configuration is invalid
       for the container (e.g., 127.0.0.1). When this is the case the --dns flags is necessary for every run.


       --domainname=""
          Container NIS domain name


       Sets the container's NIS domain name (see also setdomainname(2)) that is
          available inside the container.


       -e, --env=[]
          Set environment variables


       This option allows you to specify arbitrary environment variables that are available for the process that will be launched inside of the container.


       --entrypoint=""
          Overwrite the default ENTRYPOINT of the image


       This option allows you to overwrite the default entrypoint of the image that is set in the Dockerfile. The ENTRYPOINT of an image is similar to a COMMAND
       because it specifies what executable to run when the container starts, but it is (purposely) more difficult to override. The ENTRYPOINT gives a container
       its default nature or behavior, so that when you set an ENTRYPOINT you can run the container as if it were that binary, complete with default options,
       and you can pass in more options via the COMMAND. But, sometimes an operator may want to run something else inside the container, so you can override the
       default ENTRYPOINT at runtime by using a --entrypoint and a string to specify the new ENTRYPOINT.


       --env-file=[]
          Read in a line delimited file of environment variables


       --expose=[]
          Expose a port, or a range of ports (e.g. --expose=3300-3310) informs Docker that the container listens on the specified network ports at runtime.
       Docker uses this information to interconnect containers using links and to set up port redirection on the host system.


       --group-add=[]
          Add additional groups to run as


       -h, --hostname=""
          Container host name


       Sets the container host name that is available inside the container.


       --help
          Print usage statement


       --init
          Run an init inside the container that forwards signals and reaps processes


       -i, --interactive=true|false
          Keep STDIN open even if not attached. The default is false.


       When set to true, keep stdin open even if not attached.


       --ip=""
          Sets the container's interface IPv4 address (e.g., 172.23.0.9)


       It can only be used in conjunction with --network for user-defined networks


       --ip6=""
          Sets the container's interface IPv6 address (e.g., 2001:db8::1b99)


       It can only be used in conjunction with --network for user-defined networks


       --ipc=""
          Sets the IPC mode for the container. The following values are accepted:


       ┌─────────────────────┬───────────────────────────────────────────────────────┐
       │Value                │ Description                                           │
       ├─────────────────────┼───────────────────────────────────────────────────────┤
       │(empty)              │ Use daemon's default.                                 │
       ├─────────────────────┼───────────────────────────────────────────────────────┤
       │none                 │ Own private IPC namespace, with /dev/shm not mounted. │
       ├─────────────────────┼───────────────────────────────────────────────────────┤
       │private              │ Own private IPC namespace.                            │
       ├─────────────────────┼───────────────────────────────────────────────────────┤
       │shareable            │ Own private IPC namespace, with a possibility to      │
       │                     │ share it with other containers.                       │
       ├─────────────────────┼───────────────────────────────────────────────────────┤
       │container:name-or-ID │ Join another ("shareable") container's IPC namespace. │
       ├─────────────────────┼───────────────────────────────────────────────────────┤
       │host                 │ Use the host system's IPC namespace.                  │
       └─────────────────────┴───────────────────────────────────────────────────────┘

       If not specified, daemon default is used, which can either be private or shareable, depending on the daemon version and configuration.


       --isolation="default"
          Isolation specifies the type of isolation technology used by containers. Note that the default on Windows server is process, and the default on
       Windows client is hyperv. Linux only supports default.


       -l, --label key=value
          Set metadata on the container (for example, --label com.example.key=value).


       --kernel-memory=number[S]
          Kernel memory limit; S is an optional suffix which can be one of b, k, m, or g.


       Constrains the kernel memory available to a container. If a limit of 0 is specified (not using --kernel-memory), the container's kernel memory is not
       limited. If you specify a limit, it may be rounded up to a multiple of the operating system's page size and the value can be very large, millions of
       trillions.


       --label-file=[]
          Read in a line delimited file of labels


       --link=name-or-id[:alias]
          Add link to another container.


       If the operator uses --link when starting the new client container, then the client container can access the exposed port via a private networking
       interface. Docker will set some environment variables in the client container to help indicate which interface and port to use.


       --link-local-ip=[]
          Add one or more link-local IPv4/IPv6 addresses to the container's interface


       --log-driver="json-file|syslog|journald|gelf|fluentd|awslogs|splunk|etwlogs|gcplogs|none"
         Logging driver for the container. Default is defined by daemon --log-driver flag.
         Warning: the docker logs command works only for the json-file and
         journald logging drivers.


       --log-opt=[]
         Logging driver specific options.


       -m, --memory=number[*S]
          Memory limit; S is an optional suffix which can be one of b, k, m, or g.


       Allows you to constrain the memory available to a container. If the host supports swap memory, then the -m memory setting can be larger than physical
       RAM. If a limit of 0 is specified (not using -m), the container's memory is not limited. The actual limit may be rounded up to a multiple of the
       operating system's page size (the value would be very large, that's millions of trillions).


       --memory-reservation=number[*S]
          Memory soft limit; S is an optional suffix which can be one of b, k, m, or g.


       After setting memory reservation, when the system detects memory contention or low memory, containers are forced to restrict their consumption to their
       reservation. So you should always set the value below --memory, otherwise the hard limit will take precedence. By default, memory reservation will be the
       same as memory limit.


       --memory-swap=number[S]
          Combined memory plus swap limit; S is an optional suffix which can be one of b, k, m, or g.


       This option can only be used together with --memory. The argument should always be larger than that of --memory. Default is double the value of --memory.
       Set to -1 to enable unlimited swap.


       --mac-address=""
          Container MAC address (e.g., 92:d0:c6:0a:29:33)


       Remember that the MAC address in an Ethernet network must be unique.  The IPv6 link-local address will be based on the device's MAC address according to
       RFC4862.


       --mount type=TYPE,TYPE-SPECIFIC-OPTION[,...]
          Attach a filesystem mount to the container


       Current supported mount TYPES are bind, volume, and tmpfs.


       e.g.


       type=bind,source=/path/on/host,destination=/path/in/container


       type=volume,source=my-volume,destination=/path/in/container,volume-label="color=red",volume-label="shape=round"


       type=tmpfs,tmpfs-size=512M,destination=/path/in/container


       Common Options:


              · src, source: mount source spec for bind and volume. Mandatory for bind.

              · dst, destination, target: mount destination spec.

              · ro, readonly: true or false (default).



       Note: setting readonly for a bind mount does not make its submounts
          read-only on the current Linux implementation. See also bind-nonrecursive.


       Options specific to bind:


              · bind-propagation: shared, slave, private, rshared, rslave, or rprivate(default). See also mount(2).

              · consistency: consistent(default), cached, or delegated. Currently, only effective for Docker for Mac.

              · bind-nonrecursive: true or false (default). If set to true, submounts are not recursively bind-mounted. This option is useful for readonly bind
                mount.



       Options specific to volume:


              · volume-driver: Name of the volume-driver plugin.

              · volume-label: Custom metadata.

              · volume-nocopy: true(default) or false. If set to false, the Engine copies existing files and directories under the mount-path into the volume,
                allowing the host to access them.

              · volume-opt: specific to a given volume driver.



       Options specific to tmpfs:


              · tmpfs-size: Size of the tmpfs mount in bytes. Unlimited by default in Linux.

              · tmpfs-mode: File mode of the tmpfs in octal. (e.g. 700 or 0700.) Defaults to 1777 in Linux.



       --name=""
          Assign a name to the container


       The operator can identify a container in three ways:


       ┌──────────────────────┬────────────────────────────────────────────────────────────────────┐
       │Identifier type       │ Example value                                                      │
       ├──────────────────────┼────────────────────────────────────────────────────────────────────┤
       │UUID long identifier  │ "f78375b1c487e03c9438c729345e54db9d20cfa2ac1fc3494b6eb60872e74778" │
       ├──────────────────────┼────────────────────────────────────────────────────────────────────┤
       │UUID short identifier │ "f78375b1c487"                                                     │
       ├──────────────────────┼────────────────────────────────────────────────────────────────────┤
       │Name                  │ "evil_ptolemy"                                                     │
       └──────────────────────┴────────────────────────────────────────────────────────────────────┘

       The UUID identifiers come from the Docker daemon, and if a name is not assigned to the container with --name then the daemon will also generate a random
       string name. The name is useful when defining links (see --link) (or any other place you need to identify a container). This works for both background
       and foreground Docker containers.


       --network=type
          Set the Network mode for the container. Supported values are:


       ┌───────────────┬────────────────────────────────────────────────────┐
       │Value          │ Description                                        │
       ├───────────────┼────────────────────────────────────────────────────┤
       │none           │ No networking in the container.                    │
       ├───────────────┼────────────────────────────────────────────────────┤
       │bridge         │ Connect the container to the default Docker bridge │
       │               │ via veth interfaces.                               │
       ├───────────────┼────────────────────────────────────────────────────┤
       │host           │ Use the host's network stack inside the container. │
       ├───────────────┼────────────────────────────────────────────────────┤
       │container:name │ id                                                 │
       ├───────────────┼────────────────────────────────────────────────────┤
       │network-name   │ network-id                                         │
       └───────────────┴────────────────────────────────────────────────────┘

       Default is bridge.


       --network-alias=[]
          Add network-scoped alias for the container


       --oom-kill-disable=true|false
          Whether to disable OOM Killer for the container or not.


       --oom-score-adj=""
          Tune the host's OOM preferences for containers (accepts -1000 to 1000)


       -P, --publish-all=true|false
          Publish all exposed ports to random ports on the host interfaces. The default is false.


       When set to true publish all exposed ports to the host interfaces. The default is false. If the operator uses -P (or -p) then Docker will make the
       exposed port accessible on the host and the ports will be available to any client that can reach the host. When using -P, Docker will bind any exposed
       port to a random port on the host within an ephemeral port range defined by /proc/sys/net/ipv4/ip_local_port_range. To find the mapping between the host
       ports and the exposed ports, use docker port(1).


       -p, --publish ip:[hostPort]:containerPort | [hostPort:]containerPort
          Publish a container's port, or range of ports, to the host.


       Both hostPort and containerPort can be specified as a range.  When specifying ranges for both, the number of ports in ranges should be equal.


       Examples: -p 1234-1236:1222-1224, -p 127.0.0.1:$HOSTPORT:$CONTAINERPORT.


       Use docker port(1) to see the actual mapping, e.g. docker port CONTAINER $CONTAINERPORT.


       --pid=""
          Set the PID mode for the container
          Default is to create a private PID namespace for the container
                                      'container:<name|id>': join another container's PID namespace
                                      'host': use the host's PID namespace for the container. Note: the host mode gives the container full access to local PID
       and is therefore considered insecure.


       --userns=""
          Set the usernamespace mode for the container when userns-remap option is enabled.
            host: use the host usernamespace and enable all privileged options (e.g., pid=host or --privileged).


       --pids-limit=""
          Tune the container's pids (process IDs) limit. Set to -1 to have unlimited pids for the container.


       --uts=type
          Set the UTS mode for the container. The only possible type is host, meaning to use the host's UTS namespace inside the container.
            Note: the host mode gives the container access to changing the host's hostname and is therefore considered insecure.


       --privileged [true|false]
          Give extended privileges to this container. A "privileged" container is given access to all devices.


       When the operator executes docker run --privileged, Docker will enable access to all devices on the host as well as set some configuration in AppArmor to
       allow the container nearly all the same access to the host as processes running outside of a container on the host.


       --read-only=true|false
          Mount the container's root filesystem as read only.


       By default a container will have its root filesystem writable allowing processes to write files anywhere.  By specifying the --read-only flag the
       container will have its root filesystem mounted as read only prohibiting any writes.


       --restart policy
          Restart policy to apply when a container exits. Supported values are:


       ┌─────────────────────────┬──────────────────────────────────────────────────────┐
       │Policy                   │ Result                                               │
       ├─────────────────────────┼──────────────────────────────────────────────────────┤
       │no                       │ Do not automatically restart the container when it   │
       │                         │ exits.                                               │
       ├─────────────────────────┼──────────────────────────────────────────────────────┤
       │on-failure[:max-retries] │ Restart only if the container exits with a non-zero  │
       │                         │ exit status. Optionally, limit the number of restart │
       │                         │ retries the Docker daemon attempts.                  │
       ├─────────────────────────┼──────────────────────────────────────────────────────┤
       │always                   │ Always restart the container regardless of the exit  │
       │                         │ status. When you specify always, the Docker daemon   │
       │                         │ will try to restart the container indefinitely. The  │
       │                         │ container will also always start on daemon startup,  │
       │                         │ regardless of the current state of the container.    │
       ├─────────────────────────┼──────────────────────────────────────────────────────┤
       │unless-stopped           │ Always restart the container regardless of the exit  │
       │                         │ status, but do not start it on daemon startup if the │
       │                         │ container has been put to a stopped state before.    │
       └─────────────────────────┴──────────────────────────────────────────────────────┘

       Default is no.


       --rm true|false
          Automatically remove the container when it exits. The default is false.
          --rm flag can work together with -d, and auto-removal will be done on daemon side. Note that it's incompatible with any restart policy other than
       none.


       --security-opt value[,...]
          Security Options for the container. The following options can be given:


              "label=user:USER"   : Set the label user for the container
              "label=role:ROLE"   : Set the label role for the container
              "label=type:TYPE"   : Set the label type for the container
              "label=level:LEVEL" : Set the label level for the container
              "label=disable"     : Turn off label confinement for the container
              "no-new-privileges" : Disable container processes from gaining additional privileges

              "seccomp=unconfined" : Turn off seccomp confinement for the container
              "seccomp=profile.json :  White listed syscalls seccomp Json file to be used as a seccomp filter

              "apparmor=unconfined" : Turn off apparmor confinement for the container
              "apparmor=your-profile" : Set the apparmor confinement profile for the container



       --storage-opt
          Storage driver options per container


       $ docker run -it --storage-opt size=120G fedora /bin/bash


       This (size) will allow to set the container rootfs size to 120G at creation time.
          This option is only available for the devicemapper, btrfs, overlay2  and zfs graph drivers.
          For the devicemapper, btrfs and zfs storage drivers, user cannot pass a size less than the Default BaseFS Size.
          For the overlay2 storage driver, the size option is only available if the backing fs is xfs and mounted with the pquota mount option.
          Under these conditions, user can pass any size less than the backing fs size.


       --stop-signal=SIGTERM
         Signal to stop a container. Default is SIGTERM.


       --stop-timeout=10
         Timeout (in seconds) to stop a container. Default is 10.


       --shm-size=""
          Size of /dev/shm. The format is <number><unit>.
          number must be greater than 0.  Unit is optional and can be b (bytes), k (kilobytes), m(megabytes), or g (gigabytes).
          If you omit the unit, the system uses bytes. If you omit the size entirely, the system uses 64m.


       --sysctl=SYSCTL
         Configure namespaced kernel parameters at runtime


       IPC Namespace - current sysctls allowed:


       kernel.msgmax, kernel.msgmnb, kernel.msgmni, kernel.sem, kernel.shmall, kernel.shmmax, kernel.shmmni, kernel.shm_rmid_forced
         Sysctls beginning with fs.mqueue.*


       If you use the --ipc=host option these sysctls will not be allowed.


       Network Namespace - current sysctls allowed:
             Sysctls beginning with net.*


       If you use the --network=host option these sysctls will not be allowed.


       --sig-proxy=true|false
          Proxy received signals to the process (non-TTY mode only). SIGCHLD, SIGSTOP, and SIGKILL are not proxied. The default is true.


       --memory-swappiness=""
          Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.


       -t, --tty=true|false
          Allocate a pseudo-TTY. The default is false.


       When set to true Docker can allocate a pseudo-tty and attach to the standard input of any container. This can be used, for example, to run a throwaway
       interactive shell. The default is false.


       The -t option is incompatible with a redirection of the docker client standard input.


       --tmpfs=[] Create a tmpfs mount


       Mount a temporary filesystem (tmpfs) mount into a container, for example:


       $ docker run -d --tmpfs /tmp:rw,size=787448k,mode=1777 my_image


       This command mounts a tmpfs at /tmp within the container.  The supported mount options are the same as the Linux default mount flags. If you do not
       specify any options, the systems uses the following options: rw,noexec,nosuid,nodev,size=65536k.


       See also --mount, which is the successor of --tmpfs and --volume.
          Even though there is no plan to deprecate --tmpfs, usage of --mount is recommended.


       -u, --user=""
          Sets the username or UID used and optionally the groupname or GID for the specified command.


       The followings examples are all valid:
          --user [user | user:group | uid | uid:gid | user:gid | uid:group ]


       Without this argument the command will be run as root in the container.


       --ulimit=[]
           Ulimit options


       -v|--volume[=[[HOST-DIR:]CONTAINER-DIR[:OPTIONS]]]
          Create a bind mount. If you specify, -v /HOST-DIR:/CONTAINER-DIR, Docker
          bind mounts /HOST-DIR in the host to /CONTAINER-DIR in the Docker
          container. If 'HOST-DIR' is omitted,  Docker automatically creates the new
          volume on the host.  The OPTIONS are a comma delimited list and can be:


              · [rw|ro]

              · [z|Z]

              · [[r]shared|[r]slave|[r]private]

              · [delegated|cached|consistent]

              · [nocopy]



       The CONTAINER-DIR must be an absolute path such as /src/docs. The HOST-DIR can be an absolute path or a name value. A name value must start with an
       alphanumeric character, followed by a-z0-9, _ (underscore), . (period) or - (hyphen). An absolute path starts with a / (forward slash).


       If you supply a HOST-DIR that is an absolute path,  Docker bind-mounts to the path you specify. If you supply a name, Docker creates a named volume by
       that name. For example, you can specify either /foo or foo for a HOST-DIR value. If you supply the /foo value, Docker creates a bind mount. If you supply
       the foo specification, Docker creates a named volume.


       You can specify multiple  -v options to mount one or more mounts to a container. To use these same mounts in other containers, specify the --volumes-from
       option also.


       You can supply additional options for each bind mount following an additional colon.  A :ro or :rw suffix mounts a volume in read-only or read-write
       mode, respectively. By default, volumes are mounted in read-write mode.  You can also specify the consistency requirement for the mount, either
       :consistent (the default), :cached, or :delegated.  Multiple options are separated by commas, e.g. :ro,cached.


       Labeling systems like SELinux require that proper labels are placed on volume content mounted into a container. Without a label, the security system
       might prevent the processes running inside the container from using the content. By default, Docker does not change the labels set by the OS.


       To change a label in the container context, you can add either of two suffixes :z or :Z to the volume mount. These suffixes tell Docker to relabel file
       objects on the shared volumes. The z option tells Docker that two containers share the volume content. As a result, Docker labels the content with a
       shared content label. Shared volume labels allow all containers to read/write content.  The Z option tells Docker to label the content with a private
       unshared label.  Only the current container can use a private volume.


       By default bind mounted volumes are private. That means any mounts done inside container will not be visible on host and vice-a-versa. One can change
       this behavior by specifying a volume mount propagation property. Making a volume shared mounts done under that volume inside container will be visible on
       host and vice-a-versa. Making a volume slave enables only one way mount propagation and that is mounts done on host under that volume will be visible
       inside container but not the other way around.


       To control mount propagation property of volume one can use :[r]shared, :[r]slave or :[r]private propagation flag. Propagation property can be specified
       only for bind mounted volumes and not for internal volumes or named volumes. For mount propagation to work source mount point (mount point where source
       dir is mounted on) has to have right propagation properties. For shared volumes, source mount point has to be shared. And for slave volumes, source mount
       has to be either shared or slave.


       Use df <source-dir> to figure out the source mount and then use findmnt -o TARGET,PROPAGATION <source-mount-dir> to figure out propagation properties of
       source mount. If findmnt utility is not available, then one can look at mount entry for source mount point in /proc/self/mountinfo. Look at optional
       fields and see if any propagation properties are specified.  shared:X means mount is shared, master:X means mount is slave and if nothing is there that
       means mount is private.


       To change propagation properties of a mount point use mount command. For example, if one wants to bind mount source directory /foo one can do mount
       --bind /foo /foo and mount --make-private --make-shared /foo. This will convert /foo into a shared mount point. Alternatively one can directly change
       propagation properties of source mount. Say / is source mount for /foo, then use mount --make-shared / to convert / into a shared mount.


              Note: When using systemd to manage the Docker daemon's start and stop, in the systemd unit file there is an option to control mount propagation
              for the Docker daemon itself, called MountFlags. The value of this setting may cause Docker to not see mount propagation changes made on the mount
              point. For example, if this value is slave, you may not be able to use the shared or rshared propagation on a volume.


       To disable automatic copying of data from the container path to the volume, use the nocopy flag. The nocopy flag can be set on bind mounts and named
       volumes.


       See also --mount, which is the successor of --tmpfs and --volume.  Even though there is no plan to deprecate --volume, usage of --mount is recommended.


       --volume-driver=""
          Container's volume driver. This driver creates volumes specified either from
          a Dockerfile's VOLUME instruction or from the docker run -v flag.
          See docker-volume-create(1) for full details.


       --volumes-from=[]
          Mount volumes from the specified container(s)


       Mounts already mounted volumes from a source container onto another
          container. You must supply the source's container-id. To share
          a volume, use the --volumes-from option when running
          the target container. You can share volumes even if the source container
          is not running.


       By default, Docker mounts the volumes in the same mode (read-write or
          read-only) as it is mounted in the source container. Optionally, you
          can change this by suffixing the container-id with either the :ro or
          :rw keyword.


       If the location of the volume from the source container overlaps with
          data residing on a target container, then the volume hides
          that data on the target.


       -w, --workdir=""
          Working directory inside the container


       The default working directory for running binaries within a container is the root directory (/). The developer can set a different default with the
       Dockerfile WORKDIR instruction. The operator can override the working directory by using the -w option.



Exit Status
       The exit code from docker run gives information about why the container failed to run or why it exited.  When docker run exits with a non-zero code, the
       exit codes follow the chroot standard, see below:


       125 if the error is with Docker daemon itself


              $ docker run --foo busybox; echo $?
              # flag provided but not defined: --foo
                See 'docker run --help'.
                125



       126 if the contained command cannot be invoked


              $ docker run busybox /etc; echo $?
              # exec: "/etc": permission denied
                docker: Error response from daemon: Contained command could not be invoked
                126



       127 if the contained command cannot be found


              $ docker run busybox foo; echo $?
              # exec: "foo": executable file not found in $PATH
                docker: Error response from daemon: Contained command not found or does not exist
                127



       Exit code of contained command otherwise


              $ docker run busybox /bin/sh -c 'exit 3'
              # 3




EXAMPLES
Running container in read-only mode
       During container image development, containers often need to write to the image content.  Installing packages into /usr, for example.  In production,
       applications seldom need to write to the image.  Container applications write to volumes if they need to write to file systems at all.  Applications can
       be made more secure by running them in read-only mode using the --read-only switch.  This protects the containers image from modification. Read only
       containers may still need to write temporary data.  The best way to handle this is to mount tmpfs directories on /run and /tmp.


              # docker run --read-only --tmpfs /run --tmpfs /tmp -i -t fedora /bin/bash



Exposing log messages from the container to the host's log
       If you want messages that are logged in your container to show up in the host's syslog/journal then you should bind mount the /dev/log directory as
       follows.


              # docker run -v /dev/log:/dev/log -i -t fedora /bin/bash



       From inside the container you can test this by sending a message to the log.


              (bash)# logger "Hello from my container"



       Then exit and check the journal.


              # exit

              # journalctl -b | grep Hello



       This should list the message sent to logger.


Attaching to one or more from STDIN, STDOUT, STDERR
       If you do not specify -a then Docker will attach everything (stdin,stdout,stderr) you'd like to connect instead, as in:


              # docker run -a stdin -a stdout -i -t fedora /bin/bash



Sharing IPC between containers
       Using shm_server.c available here: ⟨https://www.cs.cf.ac.uk/Dave/C/node27.html⟩


       Testing --ipc=host mode:


       Host shows a shared memory segment with 7 pids attached, happens to be from httpd:


               $ sudo ipcs -m

               ------ Shared Memory Segments --------
               key        shmid      owner      perms      bytes      nattch     status
               0x01128e25 0          root       600        1000       7



       Now run a regular container, and it correctly does NOT see the shared memory segment from the host:


               $ docker run -it shm ipcs -m

               ------ Shared Memory Segments --------
               key        shmid      owner      perms      bytes      nattch     status



       Run a container with the new --ipc=host option, and it now sees the shared memory segment from the host httpd:


               $ docker run -it --ipc=host shm ipcs -m

               ------ Shared Memory Segments --------
               key        shmid      owner      perms      bytes      nattch     status
               0x01128e25 0          root       600        1000       7



       Testing --ipc=container:CONTAINERID mode:


       Start a container with a program to create a shared memory segment:


               $ docker run -it shm bash
               $ sudo shm/shm_server
               $ sudo ipcs -m

               ------ Shared Memory Segments --------
               key        shmid      owner      perms      bytes      nattch     status
               0x0000162e 0          root       666        27         1



       Create a 2nd container correctly shows no shared memory segment from 1st container:


               $ docker run shm ipcs -m

               ------ Shared Memory Segments --------
               key        shmid      owner      perms      bytes      nattch     status



       Create a 3rd container using the new --ipc=container:CONTAINERID option, now it shows the shared memory segment from the first:


               $ docker run -it --ipc=container:ed735b2264ac shm ipcs -m
               $ sudo ipcs -m

               ------ Shared Memory Segments --------
               key        shmid      owner      perms      bytes      nattch     status
               0x0000162e 0          root       666        27         1



Linking Containers
              Note: This section describes linking between containers on the default (bridge) network, also known as "legacy links". Using --link on
              user-defined networks uses the DNS-based discovery, which does not add entries to /etc/hosts, and does not set environment variables for
              discovery.


       The link feature allows multiple containers to communicate with each other. For example, a container whose Dockerfile has exposed port 80 can be run and
       named as follows:


              # docker run --name=link-test -d -i -t fedora/httpd



       A second container, in this case called linker, can communicate with the httpd container, named link-test, by running with the --link=<name>:<alias>


              # docker run -t -i --link=link-test:lt --name=linker fedora /bin/bash



       Now the container linker is linked to container link-test with the alias lt.  Running the env command in the linker container shows environment variables
        with the LT (alias) context (LT_)


              # env
              HOSTNAME=668231cb0978
              TERM=xterm
              LT_PORT_80_TCP=tcp://172.17.0.3:80
              LT_PORT_80_TCP_PORT=80
              LT_PORT_80_TCP_PROTO=tcp
              LT_PORT=tcp://172.17.0.3:80
              PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
              PWD=/
              LT_NAME=/linker/lt
              SHLVL=1
              HOME=/
              LT_PORT_80_TCP_ADDR=172.17.0.3
              _=/usr/bin/env



       When linking two containers Docker will use the exposed ports of the container to create a secure tunnel for the parent to access.


       If a container is connected to the default bridge network and linked with other containers, then the container's /etc/hosts file is updated with the
       linked container's name.


              Note Since Docker may live update the container's /etc/hosts file, there may be situations when processes inside the container can end up reading
              an empty or incomplete /etc/hosts file. In most cases, retrying the read again should fix the problem.


Mapping Ports for External Usage
       The exposed port of an application can be mapped to a host port using the -p flag. For example, an httpd port 80 can be mapped to the host port 8080
       using the following:


              # docker run -p 8080:80 -d -i -t fedora/httpd



Creating and Mounting a Data Volume Container
       Many applications require the sharing of persistent data across several containers. Docker allows you to create a Data Volume Container that other
       containers can mount from. For example, create a named container that contains directories /var/volume1 and /tmp/volume2. The image will need to contain
       these directories so a couple of RUN mkdir instructions might be required for you fedora-data image:


              # docker run --name=data -v /var/volume1 -v /tmp/volume2 -i -t fedora-data true
              # docker run --volumes-from=data --name=fedora-container1 -i -t fedora bash



       Multiple --volumes-from parameters will bring together multiple data volumes from multiple containers. And it's possible to mount the volumes that came
       from the DATA container in yet another container via the fedora-container1 intermediary container, allowing to abstract the actual data source from users
       of that data:


              # docker run --volumes-from=fedora-container1 --name=fedora-container2 -i -t fedora bash



Mounting External Volumes
       To mount a host directory as a container volume, specify the absolute path to the directory and the absolute path for the container directory separated
       by a colon:


              # docker run -v /var/db:/data1 -i -t fedora bash



       When using SELinux, be aware that the host has no knowledge of container SELinux policy. Therefore, in the above example, if SELinux policy is enforced,
       the /var/db directory is not writable to the container. A "Permission Denied" message will occur and an avc: message in the host's syslog.


       To work around this, at time of writing this man page, the following command needs to be run in order for the proper SELinux policy type label to be
       attached to the host directory:


              # chcon -Rt svirt_sandbox_file_t /var/db



       Now, writing to the /data1 volume in the container will be allowed and the changes will also be reflected on the host in /var/db.


Using alternative security labeling
       You can override the default labeling scheme for each container by specifying the --security-opt flag. For example, you can specify the MCS/MLS level, a
       requirement for MLS systems. Specifying the level in the following command allows you to share the same content between containers.


              # docker run --security-opt label=level:s0:c100,c200 -i -t fedora bash



       An MLS example might be:


              # docker run --security-opt label=level:TopSecret -i -t rhel7 bash



       To disable the security labeling for this container versus running with the --permissive flag, use the following command:


              # docker run --security-opt label=disable -i -t fedora bash



       If you want a tighter security policy on the processes within a container, you can specify an alternate type for the container. You could run a container
       that is only allowed to listen on Apache ports by executing the following command:


              # docker run --security-opt label=type:svirt_apache_t -i -t centos bash



       Note:


       You would have to write policy defining a svirt_apache_t type.


Setting device weight
       If you want to set /dev/sda device weight to 200, you can specify the device weight by --blkio-weight-device flag. Use the following command:


              # docker run -it --blkio-weight-device "/dev/sda:200" ubuntu



Specify isolation technology for container (--isolation)
       This option is useful in situations where you are running Docker containers on Microsoft Windows. The --isolation <value> option sets a container's
       isolation technology. On Linux, the only supported is the default option which uses Linux namespaces. These two commands are equivalent on Linux:


              $ docker run -d busybox top
              $ docker run -d --isolation default busybox top



       On Microsoft Windows, can take any of these values:


              · default: Use the value specified by the Docker daemon's --exec-opt . If the daemon does not specify an isolation technology, Microsoft Windows
                uses process as its default value.

              · process: Namespace isolation only.

              · hyperv: Hyper-V hypervisor partition-based isolation.



       In practice, when running on Microsoft Windows without a daemon option set,  these two commands are equivalent:


              $ docker run -d --isolation default busybox top
              $ docker run -d --isolation process busybox top



       If you have set the --exec-opt isolation=hyperv option on the Docker daemon, any of these commands also result in hyperv isolation:


              $ docker run -d --isolation default busybox top
              $ docker run -d --isolation hyperv busybox top



Setting Namespaced Kernel Parameters (Sysctls)
       The --sysctl sets namespaced kernel parameters (sysctls) in the container. For example, to turn on IP forwarding in the containers network namespace, run
       this command:


              $ docker run --sysctl net.ipv4.ip_forward=1 someimage



       Note:


       Not all sysctls are namespaced. Docker does not support changing sysctls inside of a container that also modify the host system. As the kernel evolves we
       expect to see more sysctls become namespaced.


       See the definition of the --sysctl option above for the current list of supported sysctls.



HISTORY
       April 2014, Originally compiled by William Henry (whenry at redhat dot com) based on docker.com source material and internal work.  June 2014, updated by
       Sven Dowideit ⟨SvenDowideit@home.org.au⟩ July 2014, updated by Sven Dowideit ⟨SvenDowideit@home.org.au⟩ November 2015, updated by Sally O'Malley
       ⟨somalley@redhat.com⟩



Docker Community                                                       Docker User Manuals                                                             DOCKER(1)
------------------------------------------------------------

Usage:	docker run [OPTIONS] IMAGE [COMMAND] [ARG...]

Run a command in a new container

Options:
      --add-host list                  Add a custom host-to-IP mapping (host:ip)
  -a, --attach list                    Attach to STDIN, STDOUT or STDERR
      --blkio-weight uint16            Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)
      --blkio-weight-device list       Block IO weight (relative device weight) (default [])
      --cap-add list                   Add Linux capabilities
      --cap-drop list                  Drop Linux capabilities
      --cgroup-parent string           Optional parent cgroup for the container
      --cidfile string                 Write the container ID to the file
      --cpu-count int                  CPU count (Windows only)
      --cpu-percent int                CPU percent (Windows only)
      --cpu-period int                 Limit CPU CFS (Completely Fair Scheduler) period
      --cpu-quota int                  Limit CPU CFS (Completely Fair Scheduler) quota
      --cpu-rt-period int              Limit CPU real-time period in microseconds
      --cpu-rt-runtime int             Limit CPU real-time runtime in microseconds
  -c, --cpu-shares int                 CPU shares (relative weight)
      --cpus decimal                   Number of CPUs
      --cpuset-cpus string             CPUs in which to allow execution (0-3, 0,1)
      --cpuset-mems string             MEMs in which to allow execution (0-3, 0,1)
  -d, --detach                         Run container in background and print container ID
      --detach-keys string             Override the key sequence for detaching a container
      --device list                    Add a host device to the container
      --device-cgroup-rule list        Add a rule to the cgroup allowed devices list
      --device-read-bps list           Limit read rate (bytes per second) from a device (default [])
      --device-read-iops list          Limit read rate (IO per second) from a device (default [])
      --device-write-bps list          Limit write rate (bytes per second) to a device (default [])
      --device-write-iops list         Limit write rate (IO per second) to a device (default [])
      --disable-content-trust          Skip image verification (default true)
      --dns list                       Set custom DNS servers
      --dns-option list                Set DNS options
      --dns-search list                Set custom DNS search domains
      --domainname string              Container NIS domain name
      --entrypoint string              Overwrite the default ENTRYPOINT of the image
  -e, --env list                       Set environment variables
      --env-file list                  Read in a file of environment variables
      --expose list                    Expose a port or a range of ports
      --gpus gpu-request               GPU devices to add to the container ('all' to pass all GPUs)
      --group-add list                 Add additional groups to join
      --health-cmd string              Command to run to check health
      --health-interval duration       Time between running the check (ms|s|m|h) (default 0s)
      --health-retries int             Consecutive failures needed to report unhealthy
      --health-start-period duration   Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)
      --health-timeout duration        Maximum time to allow one check to run (ms|s|m|h) (default 0s)
      --help                           Print usage
  -h, --hostname string                Container host name
      --init                           Run an init inside the container that forwards signals and reaps processes
  -i, --interactive                    Keep STDIN open even if not attached
      --io-maxbandwidth bytes          Maximum IO bandwidth limit for the system drive (Windows only)
      --io-maxiops uint                Maximum IOps limit for the system drive (Windows only)
      --ip string                      IPv4 address (e.g., 172.30.100.104)
      --ip6 string                     IPv6 address (e.g., 2001:db8::33)
      --ipc string                     IPC mode to use
      --isolation string               Container isolation technology
      --kernel-memory bytes            Kernel memory limit
  -l, --label list                     Set meta data on a container
      --label-file list                Read in a line delimited file of labels
      --link list                      Add link to another container
      --link-local-ip list             Container IPv4/IPv6 link-local addresses
      --log-driver string              Logging driver for the container
      --log-opt list                   Log driver options
      --mac-address string             Container MAC address (e.g., 92:d0:c6:0a:29:33)
  -m, --memory bytes                   Memory limit
      --memory-reservation bytes       Memory soft limit
      --memory-swap bytes              Swap limit equal to memory plus swap: '-1' to enable unlimited swap
      --memory-swappiness int          Tune container memory swappiness (0 to 100) (default -1)
      --mount mount                    Attach a filesystem mount to the container
      --name string                    Assign a name to the container
      --network network                Connect a container to a network
      --network-alias list             Add network-scoped alias for the container
      --no-healthcheck                 Disable any container-specified HEALTHCHECK
      --oom-kill-disable               Disable OOM Killer
      --oom-score-adj int              Tune host's OOM preferences (-1000 to 1000)
      --pid string                     PID namespace to use
      --pids-limit int                 Tune container pids limit (set -1 for unlimited)
      --platform string                Set platform if server is multi-platform capable
      --privileged                     Give extended privileges to this container
  -p, --publish list                   Publish a container's port(s) to the host
  -P, --publish-all                    Publish all exposed ports to random ports
      --read-only                      Mount the container's root filesystem as read only
      --restart string                 Restart policy to apply when a container exits (default "no")
      --rm                             Automatically remove the container when it exits
      --runtime string                 Runtime to use for this container
      --security-opt list              Security Options
      --shm-size bytes                 Size of /dev/shm
      --sig-proxy                      Proxy received signals to the process (default true)
      --stop-signal string             Signal to stop a container (default "SIGTERM")
      --stop-timeout int               Timeout (in seconds) to stop a container
      --storage-opt list               Storage driver options for the container
      --sysctl map                     Sysctl options (default map[])
      --tmpfs list                     Mount a tmpfs directory
  -t, --tty                            Allocate a pseudo-TTY
      --ulimit ulimit                  Ulimit options (default [])
  -u, --user string                    Username or UID (format: <name|uid>[:<group|gid>])
      --userns string                  User namespace to use
      --uts string                     UTS namespace to use
  -v, --volume list                    Bind mount a volume
      --volume-driver string           Optional volume driver for the container
      --volumes-from list              Mount volumes from the specified container(s)
  -w, --workdir string                 Working directory inside the container
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-save - Save one or more images to a tar archive (streamed to STDOUT by default)



SYNOPSIS
       docker save [OPTIONS] IMAGE [IMAGE...]



DESCRIPTION
       Alias for docker image save.



OPTIONS
       -h, --help[=false]
           help for save


       -o, --output=""
           Write to a file, instead of STDOUT



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker save [OPTIONS] IMAGE [IMAGE...]

Save one or more images to a tar archive (streamed to STDOUT by default)

Options:
  -o, --output string   Write to a file, instead of STDOUT
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-search - Search the Docker Hub for images



SYNOPSIS
       docker search [OPTIONS] TERM



DESCRIPTION
       Search Docker Hub for images that match the specified TERM. The table of images returned displays the name, description (truncated by default), number of
       stars awarded, whether the image is official, and whether it is automated.


       Note - Search queries will only return up to 25 results


Filter
       Filter output based on these conditions:
          - stars=<numberOfStar>
          - is-automated=(true|false)
          - is-official=(true|false)



EXAMPLES
Search Docker Hub for ranked images
       Search a registry for the term 'fedora' and only display those images ranked 3 or higher:


              $ docker search --filter=stars=3 fedora
              NAME                  DESCRIPTION                                    STARS OFFICIAL  AUTOMATED
              mattdm/fedora         A basic Fedora image corresponding roughly...  50
              fedora                (Semi) Official Fedora base image.             38
              mattdm/fedora-small   A small Fedora image on which to build. Co...  8
              goldmann/wildfly      A WildFly application server running on a ...  3               [OK]



Search Docker Hub for automated images
       Search Docker Hub for the term 'fedora' and only display automated images ranked 1 or higher:


              $ docker search --filter=is-automated=true --filter=stars=1 fedora
              NAME               DESCRIPTION                                     STARS OFFICIAL  AUTOMATED
              goldmann/wildfly   A WildFly application server running on a ...   3               [OK]
              tutum/fedora-20    Fedora 20 image with SSH access. For the r...   1               [OK]




OPTIONS
       -f, --filter=
           Filter output based on conditions provided


       --format=""
           Pretty-print search using a Go template


       -h, --help[=false]
           help for search


       --limit=25
           Max number of search results


       --no-trunc[=false]
           Don't truncate output



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker search [OPTIONS] TERM

Search the Docker Hub for images

Options:
  -f, --filter filter   Filter output based on conditions provided
      --format string   Pretty-print search using a Go template
      --limit int       Max number of search results (default 25)
      --no-trunc        Don't truncate output
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-start - Start one or more stopped containers



SYNOPSIS
       docker start [OPTIONS] CONTAINER [CONTAINER...]



DESCRIPTION
       Alias for docker container start.



OPTIONS
       -a, --attach[=false]
           Attach STDOUT/STDERR and forward signals


       --checkpoint=""
           Restore from this checkpoint


       --checkpoint-dir=""
           Use a custom checkpoint storage directory


       --detach-keys=""
           Override the key sequence for detaching a container


       -h, --help[=false]
           help for start


       -i, --interactive[=false]
           Attach container's STDIN



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker start [OPTIONS] CONTAINER [CONTAINER...]

Start one or more stopped containers

Options:
  -a, --attach                  Attach STDOUT/STDERR and forward signals
      --checkpoint string       Restore from this checkpoint
      --checkpoint-dir string   Use a custom checkpoint storage directory
      --detach-keys string      Override the key sequence for detaching a container
  -i, --interactive             Attach container's STDIN
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-stats - Display a live stream of container(s) resource usage statistics



SYNOPSIS
       docker stats [OPTIONS] [CONTAINER...]



DESCRIPTION
       Alias for docker container stats.



OPTIONS
       -a, --all[=false]
           Show all containers (default shows just running)


       --format=""
           Pretty-print images using a Go template


       -h, --help[=false]
           help for stats


       --no-stream[=false]
           Disable streaming stats and only pull the first result


       --no-trunc[=false]
           Do not truncate output



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker stats [OPTIONS] [CONTAINER...]

Display a live stream of container(s) resource usage statistics

Options:
  -a, --all             Show all containers (default shows just running)
      --format string   Pretty-print images using a Go template
      --no-stream       Disable streaming stats and only pull the first result
      --no-trunc        Do not truncate output
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-stop - Stop one or more running containers



SYNOPSIS
       docker stop [OPTIONS] CONTAINER [CONTAINER...]



DESCRIPTION
       Alias for docker container stop.



OPTIONS
       -h, --help[=false]
           help for stop


       -t, --time=10
           Seconds to wait for stop before killing it



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker stop [OPTIONS] CONTAINER [CONTAINER...]

Stop one or more running containers

Options:
  -t, --time int   Seconds to wait for stop before killing it (default 10)
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-tag - Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE



SYNOPSIS
       docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]



DESCRIPTION
       Alias for docker image tag.



OPTIONS
       -h, --help[=false]
           help for tag



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]

Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-top - Display the running processes of a container



SYNOPSIS
       docker top CONTAINER [ps OPTIONS]



DESCRIPTION
       Alias for docker container top.



OPTIONS
       -h, --help[=false]
           help for top



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker top CONTAINER [ps OPTIONS]

Display the running processes of a container
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-unpause - Unpause all processes within one or more containers



SYNOPSIS
       docker unpause CONTAINER [CONTAINER...]



DESCRIPTION
       Alias for docker container unpause.



OPTIONS
       -h, --help[=false]
           help for unpause



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker unpause CONTAINER [CONTAINER...]

Unpause all processes within one or more containers
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-update - Update configuration of one or more containers



SYNOPSIS
       docker update [OPTIONS] CONTAINER [CONTAINER...]



DESCRIPTION
       Alias for docker container update.



OPTIONS
       --blkio-weight=0
           Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)


       --cpu-period=0
           Limit CPU CFS (Completely Fair Scheduler) period


       --cpu-quota=0
           Limit CPU CFS (Completely Fair Scheduler) quota


       --cpu-rt-period=0
           Limit the CPU real-time period in microseconds


       --cpu-rt-runtime=0
           Limit the CPU real-time runtime in microseconds


       -c, --cpu-shares=0
           CPU shares (relative weight)


       --cpus=
           Number of CPUs


       --cpuset-cpus=""
           CPUs in which to allow execution (0-3, 0,1)


       --cpuset-mems=""
           MEMs in which to allow execution (0-3, 0,1)


       -h, --help[=false]
           help for update


       --kernel-memory=0
           Kernel memory limit


       -m, --memory=0
           Memory limit


       --memory-reservation=0
           Memory soft limit


       --memory-swap=0
           Swap limit equal to memory plus swap: '-1' to enable unlimited swap


       --pids-limit=0
           Tune container pids limit (set -1 for unlimited)


       --restart=""
           Restart policy to apply when a container exits



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker update [OPTIONS] CONTAINER [CONTAINER...]

Update configuration of one or more containers

Options:
      --blkio-weight uint16        Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)
      --cpu-period int             Limit CPU CFS (Completely Fair Scheduler) period
      --cpu-quota int              Limit CPU CFS (Completely Fair Scheduler) quota
      --cpu-rt-period int          Limit the CPU real-time period in microseconds
      --cpu-rt-runtime int         Limit the CPU real-time runtime in microseconds
  -c, --cpu-shares int             CPU shares (relative weight)
      --cpus decimal               Number of CPUs
      --cpuset-cpus string         CPUs in which to allow execution (0-3, 0,1)
      --cpuset-mems string         MEMs in which to allow execution (0-3, 0,1)
      --kernel-memory bytes        Kernel memory limit
  -m, --memory bytes               Memory limit
      --memory-reservation bytes   Memory soft limit
      --memory-swap bytes          Swap limit equal to memory plus swap: '-1' to enable unlimited swap
      --pids-limit int             Tune container pids limit (set -1 for unlimited)
      --restart string             Restart policy to apply when a container exits
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-version - Show the Docker version information



SYNOPSIS
       docker version [OPTIONS]



DESCRIPTION
       This command displays version information for both the Docker client and daemon.



EXAMPLES
Display Docker version information
       The default output:


              $ docker version
              Client:
               Version:      1.8.0
               API version:  1.20
               Go version:   go1.4.2
               Git commit:   f5bae0a
               Built:        Tue Jun 23 17:56:00 UTC 2015
               OS/Arch:      linux/amd64

              Server:
               Version:      1.8.0
               API version:  1.20
               Go version:   go1.4.2
               Git commit:   f5bae0a
               Built:        Tue Jun 23 17:56:00 UTC 2015
               OS/Arch:      linux/amd64



       Get server version:


              $ docker version --format '{{.Server.Version}}'
              1.8.0



       Dump raw data:


       To view all available fields, you can use the format {{json .}}.


              $ docker version --format '{{json .}}'
              {"Client":{"Version":"1.8.0","ApiVersion":"1.20","GitCommit":"f5bae0a","GoVersion":"go1.4.2","Os":"linux","Arch":"amd64","BuildTime":"Tue Jun 23 17:56:00 UTC 2015"},"ServerOK":true,"Server":{"Version":"1.8.0","ApiVersion":"1.20","GitCommit":"f5bae0a","GoVersion":"go1.4.2","Os":"linux","Arch":"amd64","KernelVersion":"3.13.2-gentoo","BuildTime":"Tue Jun 23 17:56:00 UTC 2015"}}




OPTIONS
       -f, --format=""
           Format the output using the given Go template


       -h, --help[=false]
           help for version


       --kubeconfig=""
           Kubernetes config file



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker version [OPTIONS]

Show the Docker version information

Options:
  -f, --format string       Format the output using the given Go template
      --kubeconfig string   Kubernetes config file
------------------------------------------------------------
DOCKER(1)                                                                                                                                              DOCKER(1)



NAME
       docker-wait - Block until one or more containers stop, then print their exit codes



SYNOPSIS
       docker wait CONTAINER [CONTAINER...]



DESCRIPTION
       Alias for docker container wait.



OPTIONS
       -h, --help[=false]
           help for wait



SEE ALSO
       docker(1)



Docker Community                                                            Nov 2019                                                                   DOCKER(1)
------------------------------------------------------------

Usage:	docker wait CONTAINER [CONTAINER...]

Block until one or more containers stop, then print their exit codes
------------------------------------------------------------
