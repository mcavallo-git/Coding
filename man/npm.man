------------------------------------------------------------
[ npm --help 2>&1 ]
npm <command>

Usage:

npm install        install all the dependencies in your project
npm install <foo>  add the <foo> dependency to your project
npm test           run this project's tests
npm run <foo>      run the script named <foo>
npm <command> -h   quick help on <command>
npm -l             display usage info for all commands
npm help <term>    search for help on <term>
npm help npm       more involved overview

All commands:

    access, adduser, audit, bin, bugs, cache, ci, completion,
    config, dedupe, deprecate, diff, dist-tag, docs, doctor,
    edit, exec, explain, explore, find-dupes, fund, get, help,
    hook, init, install, install-ci-test, install-test, link,
    ll, login, logout, ls, org, outdated, owner, pack, ping,
    pkg, prefix, profile, prune, publish, rebuild, repo,
    restart, root, run-script, search, set, set-script,
    shrinkwrap, star, stars, start, stop, team, test, token,
    uninstall, unpublish, unstar, update, version, view, whoami

Specify configs in the ini-formatted file:
    /root/.npmrc
or on the command line via: npm <command> --key=value

More configuration info: npm help config
Configuration fields: npm help 7 config

npm@8.15.0 /usr/local/lib/node_modules/npm

------------------------------
[ man npm 2>&1 ]
NPM(1)                                                                                                                                      NPM(1)

NAME
       npm - javascript package manager

   Synopsis
   Version
       8.15.0

   Description
       npm is the package manager for the Node JavaScript platform.  It puts modules in place so that node can find them, and manages dependency
       conflicts intelligently.

       It is extremely configurable to support a variety of use cases.  Most commonly, you use it to publish, discover, install, and develop node
       programs.

       Run npm help to get a list of available commands.

   Important
       npm comes preconfigured to use npm's public registry at https://registry.npmjs.org by default. Use of the npm public registry is subject to
       terms of use available at https://docs.npmjs.com/policies/terms.

       You can configure npm to use any compatible registry you like, and even run your own registry. Use of someone else's registry is governed
       by their terms of use.

   Introduction
       You probably got npm because you want to install stuff.

       The very first thing you will most likely want to run in any node program is npm install to install its dependencies.

       You can also run npm install blerg to install the latest version of "blerg".  Check out npm help install for more info.  It can do a lot of
       stuff.

       Use the npm search command to show everything that's available in the public registry.  Use npm ls to show everything you've installed.

   Dependencies
       If a package lists a dependency using a git URL, npm will install that dependency using the git https://github.com/git-guides/install-git
       command and will generate an error if it is not installed.

       If one of the packages npm tries to install is a native node module and requires compiling of C++ Code, npm will use node-gyp
       https://github.com/nodejs/node-gyp for that task.  For a Unix system, node-gyp https://github.com/nodejs/node-gyp needs Python, make and a
       buildchain like GCC. On Windows, Python and Microsoft Visual Studio C++ are needed. For more information visit the node-gyp repository
       https://github.com/nodejs/node-gyp and the node-gyp Wiki https://github.com/nodejs/node-gyp/wiki.

   Directories
       See npm help folders to learn about where npm puts stuff.

       In particular, npm has two modes of operation:

       • local mode: npm installs packages into the current project directory, which defaults to the current working directory.  Packages install
         to ./node_modules, and bins to ./node_modules/.bin.

       • global mode: npm installs packages into the install prefix at $npm_config_prefix/lib/node_modules and bins to $npm_config_prefix/bin.

       Local mode is the default.  Use -g or --global on any command to run in global mode instead.

   Developer Usage
       If you're using npm to develop and publish your code, check out the following help topics:

       • json: Make a package.json file.  See npm help package.json.

       • link: Links your current working code into Node's path, so that you don't have to reinstall every time you make a change.  Use npm help
         npm link to do this.

       • install: It's a good idea to install things if you don't need the symbolic link.  Especially, installing other peoples code from the
         registry is done via npm help install

       • adduser: Create an account or log in.  When you do this, npm will store credentials in the user config file.

       • publish: Use the npm help publish command to upload your code to the registry.

   Configuration
       npm is extremely configurable.  It reads its configuration options from 5 places.

       • Command line switches: Set a config with --key val.  All keys take a value, even if they are booleans (the config parser doesn't know
         what the options are at the time of parsing).  If you do not provide a value (--key) then the option is set to boolean true.

       • Environment Variables: Set any config by prefixing the name in an environment variable with npm_config_.  For example, export
         npm_config_key=val.

       • User Configs: The file at $HOME/.npmrc is an ini-formatted list of configs.  If present, it is parsed.  If the userconfig option is set
         in the cli or env, that file will be used instead.

       • Global Configs: The file found at ./etc/npmrc (relative to the global prefix will be parsed if it is found.  See npm help prefix for more
         info on the global prefix.  If the globalconfig option is set in the cli, env, or user config, then that file is parsed instead.

       • Defaults: npm's default configuration options are defined in lib/utils/config-defs.js.  These must not be changed.

       See npm help config for much much more information.

   Contributions
       Patches welcome!

       If you would like to help, but don't know what to work on, read the contributing guidelines
       https://github.com/npm/cli/blob/latest/CONTRIBUTING.md and check the issues list.

   Bugs
       When you find issues, please report them: https://github.com/npm/cli/issues

       Please be sure to follow the template and bug reporting guidelines.

   Feature Requests
       Discuss new feature ideas on our discussion forum:

       • https://github.com/npm/feedback

       Or suggest formal RFC proposals:

       • https://github.com/npm/rfcs

   See Also
       • npm help help

       • npm help package.json

       • npm help npmrc

       • npm help config

       • npm help install

       • npm help prefix

       • npm help publish

                                                                     July 2022                                                              NPM(1)

------------------------------------------------------------
[ npm access --help 2>&1 ]
Set access level on published packages

Usage:
npm access public [<package>]
npm access restricted [<package>]
npm access grant <read-only|read-write> <scope:team> [<package>]
npm access revoke <scope:team> [<package>]
npm access 2fa-required [<package>]
npm access 2fa-not-required [<package>]
npm access ls-packages [<user>|<scope>|<scope:team>]
npm access ls-collaborators [<package> [<user>]]
npm access edit [<package>]

Options:
[--registry <registry>] [--otp <otp>]

Run "npm help access" for more info

------------------------------
[ man npm access 2>&1 ]
NPM-ACCESS(1)                                                                                                                        NPM-ACCESS(1)

NAME
       npm-access - Set access level on published packages

   Synopsis
         npm access public [<package>]
         npm access restricted [<package>]
         npm access grant <read-only|read-write> <scope:team> [<package>]
         npm access revoke <scope:team> [<package>]
         npm access 2fa-required [<package>]
         npm access 2fa-not-required [<package>]
         npm access ls-packages [<user>|<scope>|<scope:team>]
         npm access ls-collaborators [<package> [<user>]]
         npm access edit [<package>]

   Description
       Used to set access controls on private packages.

       For all of the subcommands, npm access will perform actions on the packages in the current working directory if no package name is passed
       to the subcommand.

       • public / restricted: Set a package to be either publicly accessible or restricted.

       • grant / revoke: Add or remove the ability of users and teams to have read-only or read-write access to a package.

       • 2fa-required / 2fa-not-required: Configure whether a package requires that anyone publishing it have two-factor authentication enabled on
         their account.

       • ls-packages: Show all of the packages a user or a team is able to access, along with the access level, except for read-only public
         packages (it won't print the whole registry listing)

       • ls-collaborators: Show all of the access privileges for a package. Will only show permissions for packages to which you have at least
         read access. If <user> is passed in, the list is filtered only to teams that user happens to belong to.

       • edit: Set the access privileges for a package at once using $EDITOR.

   Details
       npm access always operates directly on the current registry, configurable from the command line using --registry=<registry url>.

       Unscoped packages are always public.

       Scoped packages default to restricted, but you can either publish them as public using npm publish --access=public, or set their access as
       public using npm access public after the initial publish.

       You must have privileges to set the access of a package:

       • You are an owner of an unscoped or scoped package.

       • You are a member of the team that owns a scope.

       • You have been given read-write privileges for a package, either as a member of a team or directly as an owner.

       If you have two-factor authentication enabled then you'll be prompted to provide an otp token, or may use the --otp=... option to specify
       it on the command line.

       If your account is not paid, then attempts to publish scoped packages will fail with an HTTP 402 status code (logically enough), unless you
       use --access=public.

       Management of teams and team memberships is done with the npm team command.

   Configuration
   registry
       • Default: "https://registry.npmjs.org/"

       • Type: URL

       The base URL of the npm registry.

   otp
       • Default: null

       • Type: null or String

       This is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with npm access.

       If not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.

   See Also
       • libnpmaccess https://npm.im/libnpmaccess

       • npm help team

       • npm help publish

       • npm help config

       • npm help registry

                                                                     July 2022                                                       NPM-ACCESS(1)

------------------------------------------------------------
[ npm adduser --help 2>&1 ]
Add a registry user account

Usage:
npm adduser

Options:
[--registry <registry>] [--scope <@scope>]
[--auth-type <legacy|web|sso|saml|oauth|webauthn>]

aliases: login, add-user

Run "npm help adduser" for more info

------------------------------
[ man npm adduser 2>&1 ]
NPM-ADDUSER(1)                                                                                                                      NPM-ADDUSER(1)

NAME
       npm-adduser - Add a registry user account

   Synopsis
         npm adduser

         aliases: login, add-user

       Note: This command is unaware of workspaces.

   Description
       Create or verify a user named <username> in the specified registry, and save the credentials to the .npmrc file. If no registry is
       specified, the default registry will be used (see npm help config).

       The username, password, and email are read in from prompts.

       To reset your password, go to https://www.npmjs.com/forgot

       To change your email address, go to https://www.npmjs.com/email-edit

       You may use this command multiple times with the same user account to authorize on a new machine.  When authenticating on a new machine,
       the username, password and email address must all match with your existing record.

       npm login is an alias to adduser and behaves exactly the same way.

   Configuration
   registry
       • Default: "https://registry.npmjs.org/"

       • Type: URL

       The base URL of the npm registry.

   scope
       • Default: the scope of the current project, if any, or ""

       • Type: String

       Associate an operation with a scope for a scoped registry.

       Useful when logging in to or out of a private registry:

         # log in, linking the scope to the custom registry
         npm login --scope=@mycorp --registry=https://registry.mycorp.com

         # log out, removing the link and the auth token
         npm logout --scope=@mycorp

       This will cause @mycorp to be mapped to the registry for future installation of packages specified according to the pattern
       @mycorp/package.

       This will also cause npm init to create a scoped package.

         # accept all defaults, and create a package named "@foo/whatever",
         # instead of just named "whatever"
         npm init --scope=@foo --yes

   auth-type
       • Default: "legacy"

       • Type: "legacy", "web", "sso", "saml", "oauth", or "webauthn"

       NOTE: auth-type values "sso", "saml", "oauth", and "webauthn" will be removed in a future version.

       What authentication strategy to use with login.

   See Also
       • npm help registry

       • npm help config

       • npm help npmrc

       • npm help owner

       • npm help whoami

       • npm help token

       • npm help profile

                                                                     July 2022                                                      NPM-ADDUSER(1)

------------------------------------------------------------
[ npm audit --help 2>&1 ]
Run a security audit

Usage:
npm audit [fix|signatures]

Options:
[--audit-level <info|low|moderate|high|critical|none>] [--dry-run] [-f|--force]
[--json] [--package-lock-only]
[--omit <dev|optional|peer> [--omit <dev|optional|peer> ...]]
[--foreground-scripts] [--ignore-scripts]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces] [--include-workspace-root] [--install-links]

Run "npm help audit" for more info

------------------------------
[ man npm audit 2>&1 ]
NPM-AUDIT(1)                                                                                                                          NPM-AUDIT(1)

NAME
       npm-audit - Run a security audit

   Synopsis
         npm audit [fix|signatures]

   Description
       The audit command submits a description of the dependencies configured in your project to your default registry and asks for a report of
       known vulnerabilities.  If any vulnerabilities are found, then the impact and appropriate remediation will be calculated.  If the fix
       argument is provided, then remediations will be applied to the package tree.

       The command will exit with a 0 exit code if no vulnerabilities were found.

       Note that some vulnerabilities cannot be fixed automatically and will require manual intervention or review.  Also note that since npm
       audit fix runs a full-fledged npm install under the hood, all configs that apply to the installer will also apply to npm install -- so
       things like npm audit fix --package-lock-only will work as expected.

       By default, the audit command will exit with a non-zero code if any vulnerability is found. It may be useful in CI environments to include
       the --audit-level parameter to specify the minimum vulnerability level that will cause the command to fail. This option does not filter the
       report output, it simply changes the command's failure threshold.

   Audit Signatures
       To ensure the integrity of packages you download from the public npm registry, or any registry that supports signatures, you can verify the
       registry signatures of downloaded packages using the npm CLI.

       Registry signatures can be verified using the following audit command:

         $ npm audit signatures

       The npm CLI supports registry signatures and signing keys provided by any registry if the following conventions are followed:

       1. Signatures are provided in the package's packument in each published version within the dist object:

         "dist":{
           "..omitted..": "..omitted..",
           "signatures": [{
             "keyid": "SHA256:{{SHA256_PUBLIC_KEY}}",
             "sig": "a312b9c3cb4a1b693e8ebac5ee1ca9cc01f2661c14391917dcb111517f72370809..."
           }]
         }

       See this example https://registry.npmjs.org/light-cycle/1.4.3 of a signed package from the public npm registry.

       The sig is generated using the following template: ${package.name}@${package.version}:${package.dist.integrity} and the keyid has to match
       one of the public signing keys below.

       1. Public signing keys are provided at registry-host.tld/-/npm/v1/keys in the following format:

         {
           "keys": [{
             "expires": null,
             "keyid": "SHA256:{{SHA256_PUBLIC_KEY}}",
             "keytype": "ecdsa-sha2-nistp256",
             "scheme": "ecdsa-sha2-nistp256",
             "key": "{{B64_PUBLIC_KEY}}"
           }]
         }

       Keys response:

       • expires: null or a simplified extended <a href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 format</a>:
         YYYY-MM-DDTHH:mm:ss.sssZ

       • keydid: sha256 fingerprint of the public key

       • keytype: only ecdsa-sha2-nistp256 is currently supported by the npm CLI

       • scheme: only ecdsa-sha2-nistp256 is currently supported by the npm CLI

       • key: base64 encoded public key

       See this <a href="https://registry.npmjs.org/-/npm/v1/keys" target="_blank">example key's response from the public npm registry</a>.

   Audit Endpoints
       There are two audit endpoints that npm may use to fetch vulnerability information: the Bulk Advisory endpoint and the Quick Audit endpoint.

   Bulk Advisory Endpoint
       As of version 7, npm uses the much faster Bulk Advisory endpoint to optimize the speed of calculating audit results.

       npm will generate a JSON payload with the name and list of versions of each package in the tree, and POST it to the default configured
       registry at the path /-/npm/v1/security/advisories/bulk.

       Any packages in the tree that do not have a version field in their package.json file will be ignored.  If any --omit options are specified
       (either via the --omit config, or one of the shorthands such as --production, --only=dev, and so on), then packages will be omitted from
       the submitted payload as appropriate.

       If the registry responds with an error, or with an invalid response, then npm will attempt to load advisory data from the Quick Audit
       endpoint.

       The expected result will contain a set of advisory objects for each dependency that matches the advisory range.  Each advisory object
       contains a name, url, id, severity, vulnerable_versions, and title.

       npm then uses these advisory objects to calculate vulnerabilities and meta-vulnerabilities of the dependencies within the tree.

   Quick Audit Endpoint
       If the Bulk Advisory endpoint returns an error, or invalid data, npm will attempt to load advisory data from the Quick Audit endpoint,
       which is considerably slower in most cases.

       The full package tree as found in package-lock.json is submitted, along with the following pieces of additional metadata:

       • npm_version

       • node_version

       • platform

       • arch

       • node_env

       All packages in the tree are submitted to the Quick Audit endpoint.  Omitted dependency types are skipped when generating the report.

   Scrubbing
       Out of an abundance of caution, npm versions 5 and 6 would "scrub" any packages from the submitted report if their name contained a /
       character, so as to avoid leaking the names of potentially private packages or git URLs.

       However, in practice, this resulted in audits often failing to properly detect meta-vulnerabilities, because the tree would appear to be
       invalid due to missing dependencies, and prevented the detection of vulnerabilities in package trees that used git dependencies or private
       modules.

       This scrubbing has been removed from npm as of version 7.

   Calculating Meta-Vulnerabilities and Remediations
       npm uses the @npmcli/metavuln-calculator http://npm.im/@npmcli/metavuln-calculator module to turn a set of security advisories into a set
       of "vulnerability" objects.  A "meta-vulnerability" is a dependency that is vulnerable by virtue of dependence on vulnerable versions of a
       vulnerable package.

       For example, if the package foo is vulnerable in the range >=1.0.2 <2.0.0, and the package bar depends on foo@^1.1.0, then that version of
       bar can only be installed by installing a vulnerable version of foo.  In this case, bar is a "metavulnerability".

       Once metavulnerabilities for a given package are calculated, they are cached in the ~/.npm folder and only re-evaluated if the advisory
       range changes, or a new version of the package is published (in which case, the new version is checked for metavulnerable status as well).

       If the chain of metavulnerabilities extends all the way to the root project, and it cannot be updated without changing its dependency
       ranges, then npm audit fix will require the --force option to apply the remediation.  If remediations do not require changes to the
       dependency ranges, then all vulnerable packages will be updated to a version that does not have an advisory or metavulnerability posted
       against it.

   Exit Code
       The npm audit command will exit with a 0 exit code if no vulnerabilities were found.  The npm audit fix command will exit with 0 exit code
       if no vulnerabilities are found or if the remediation is able to successfully fix all vulnerabilities.

       If vulnerabilities were found the exit code will depend on the audit-level configuration setting.

   Examples
       Scan your project for vulnerabilities and automatically install any compatible updates to vulnerable dependencies:

         $ npm audit fix

       Run audit fix without modifying node_modules, but still updating the pkglock:

         $ npm audit fix --package-lock-only

       Skip updating devDependencies:

         $ npm audit fix --only=prod

       Have audit fix install SemVer-major updates to toplevel dependencies, not just SemVer-compatible ones:

         $ npm audit fix --force

       Do a dry run to get an idea of what audit fix will do, and also output install information in JSON format:

         $ npm audit fix --dry-run --json

       Scan your project for vulnerabilities and just show the details, without fixing anything:

         $ npm audit

       Get the detailed audit report in JSON format:

         $ npm audit --json

       Fail an audit only if the results include a vulnerability with a level of moderate or higher:

         $ npm audit --audit-level=moderate

   Configuration
   audit-level
       • Default: null

       • Type: null, "info", "low", "moderate", "high", "critical", or "none"

       The minimum level of vulnerability for npm audit to exit with a non-zero exit code.

   dry-run
       • Default: false

       • Type: Boolean

       Indicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any
       of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack and publish.

       Note: This is NOT honored by other network related commands, eg dist-tags, owner, etc.

   force
       • Default: false

       • Type: Boolean

       Removes various protections against unfortunate side effects, common mistakes, unnecessary performance degradation, and malicious input.

       • Allow clobbering non-npm files in global installs.

       • Allow the npm version command to work on an unclean git repository.

       • Allow deleting the cache folder with npm cache clean.

       • Allow installing packages that have an engines declaration requiring a different version of npm.

       • Allow installing packages that have an engines declaration requiring a different version of node, even if --engine-strict is enabled.

       • Allow npm audit fix to install modules outside your stated dependency range (including SemVer-major changes).

       • Allow unpublishing all versions of a published package.

       • Allow conflicting peerDependencies to be installed in the root project.

       • Implicitly set --yes during npm init.

       • Allow clobbering existing values in npm pkg

       • Allow unpublishing of entire packages (not just a single version).

       If you don't have a clear idea of what you want to do, it is strongly recommended that you do not use this option!

   json
       • Default: false

       • Type: Boolean

       Whether or not to output JSON data, rather than the normal output.

       • In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

       Not supported by all npm commands.

   package-lock-only
       • Default: false

       • Type: Boolean

       If set to true, the current operation will only use the package-lock.json, ignoring node_modules.

       For update this means only the package-lock.json will be updated, instead of checking node_modules and downloading dependencies.

       For list this means the output will be based on the tree described by the package-lock.json, rather than the contents of node_modules.

   omit
       • Default: 'dev' if the NODE_ENV environment variable is set to 'production', otherwise empty.

       • Type: "dev", "optional", or "peer" (can be set multiple times)

       Dependency types to omit from the installation tree on disk.

       Note that these dependencies are still resolved and added to the package-lock.json or npm-shrinkwrap.json file. They are just not
       physically installed on disk.

       If a package type appears in both the --include and --omit lists, then it will be included.

       If the resulting omit list includes 'dev', then the NODE_ENV environment variable will be set to 'production' for all lifecycle scripts.

   foreground-scripts
       • Default: false

       • Type: Boolean

       Run all build scripts (ie, preinstall, install, and postinstall) scripts for installed packages in the foreground process, sharing standard
       input, output, and error with the main npm process.

       Note that this will generally make installs run slower, and be much noisier, but can be useful for debugging.

   ignore-scripts
       • Default: false

       • Type: Boolean

       If true, npm does not run scripts specified in package.json files.

       Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script
       will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

   include-workspace-root
       • Default: false

       • Type: Boolean

       Include the workspace root when workspaces are enabled for a command.

       When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate
       only on the specified workspaces, and not on the root project.

       This value is not exported to the environment for child processes.

   install-links
       • Default: false

       • Type: Boolean

       When set file: protocol dependencies that exist outside of the project root will be packed and installed as regular dependencies instead of
       creating a symlink. This option has no effect on workspaces.

   See Also
       • npm help install

       • npm help config

                                                                     July 2022                                                        NPM-AUDIT(1)

------------------------------------------------------------
[ npm bin --help 2>&1 ]
Display npm bin folder

Usage:
npm bin

Options:
[-g|--global]

Run "npm help bin" for more info

------------------------------
[ man npm bin 2>&1 ]
NPM-BIN(1)                                                                                                                              NPM-BIN(1)

NAME
       npm-bin - Display npm bin folder

   Synopsis
         npm bin

       Note: This command is unaware of workspaces.

   Description
       Print the folder where npm will install executables.

   Configuration
   global
       • Default: false

       • Type: Boolean

       Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See npm help
       folders for more on the differences in behavior.

       • packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.

       • bin files are linked to {prefix}/bin

       • man pages are linked to {prefix}/share/man

   See Also
       • npm help prefix

       • npm help root

       • npm help folders

       • npm help config

       • npm help npmrc

                                                                     July 2022                                                          NPM-BIN(1)

------------------------------------------------------------
[ npm bugs --help 2>&1 ]
Report bugs for a package in a web browser

Usage:
npm bugs [<pkgname> [<pkgname> ...]]

Options:
[--no-browser|--browser <browser>] [--registry <registry>]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces] [--include-workspace-root]

alias: issues

Run "npm help bugs" for more info

------------------------------
[ man npm bugs 2>&1 ]
NPM-BUGS(1)                                                                                                                            NPM-BUGS(1)

NAME
       npm-bugs - Report bugs for a package in a web browser

   Synopsis
         npm bugs [<pkgname> [<pkgname> ...]]

         alias: issues

   Description
       This command tries to guess at the likely location of a package's bug tracker URL or the mailto URL of the support email, and then tries to
       open it using the --browser config param. If no package name is provided, it will search for a package.json in the current folder and use
       the name property.

   Configuration
   browser
       • Default: OS X: "open", Windows: "start", Others: "xdg-open"

       • Type: null, Boolean, or String

       The browser that is called by npm commands to open websites.

       Set to false to suppress browser behavior and instead print urls to terminal.

       Set to true to use default system URL opener.

   registry
       • Default: "https://registry.npmjs.org/"

       • Type: URL

       The base URL of the npm registry.

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

   include-workspace-root
       • Default: false

       • Type: Boolean

       Include the workspace root when workspaces are enabled for a command.

       When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate
       only on the specified workspaces, and not on the root project.

       This value is not exported to the environment for child processes.

   See Also
       • npm help docs

       • npm help view

       • npm help publish

       • npm help registry

       • npm help config

       • npm help npmrc

       • npm help package.json

                                                                     July 2022                                                         NPM-BUGS(1)

------------------------------------------------------------
[ npm cache --help 2>&1 ]
Manipulates packages cache

Usage:
npm cache add <package-spec>
npm cache clean [<key>]
npm cache ls [<name>@<version>]
npm cache verify

Options:
[--cache <cache>]

Run "npm help cache" for more info

------------------------------
[ man npm cache 2>&1 ]
NPM-CACHE(1)                                                                                                                          NPM-CACHE(1)

NAME
       npm-cache - Manipulates packages cache

   Synopsis
         npm cache add <package-spec>
         npm cache clean [<key>]
         npm cache ls [<name>@<version>]
         npm cache verify

       Note: This command is unaware of workspaces.

   Description
       Used to add, list, or clean the npm cache folder.

       • add: Add the specified packages to the local cache.  This command is primarily intended to be used internally by npm, but it can provide
         a way to add data to the local installation cache explicitly.

       • clean: Delete all data out of the cache folder.  Note that this is typically unnecessary, as npm's cache is self-healing and resistant to
         data corruption issues.

       • verify: Verify the contents of the cache folder, garbage collecting any unneeded data, and verifying the integrity of the cache index and
         all cached data.

   Details
       npm stores cache data in an opaque directory within the configured cache, named _cacache. This directory is a cacache
       http://npm.im/cacache-based content-addressable cache that stores all http request data as well as other package-related data. This
       directory is primarily accessed through pacote, the library responsible for all package fetching as of npm@5.

       All data that passes through the cache is fully verified for integrity on both insertion and extraction. Cache corruption will either
       trigger an error, or signal to pacote that the data must be refetched, which it will do automatically. For this reason, it should never be
       necessary to clear the cache for any reason other than reclaiming disk space, thus why clean now requires --force to run.

       There is currently no method exposed through npm to inspect or directly manage the contents of this cache. In order to access it, cacache
       must be used directly.

       npm will not remove data by itself: the cache will grow as new packages are installed.

   A note about the cache's design
       The npm cache is strictly a cache: it should not be relied upon as a persistent and reliable data store for package data. npm makes no
       guarantee that a previously-cached piece of data will be available later, and will automatically delete corrupted contents. The primary
       guarantee that the cache makes is that, if it does return data, that data will be exactly the data that was inserted.

       To run an offline verification of existing cache contents, use npm cache verify.

   Configuration
   cache
       • Default: Windows: %LocalAppData%\npm-cache, Posix: ~/.npm

       • Type: Path

       The location of npm's cache directory. See npm help npm cache

   See Also
       • npm help package spec

       • npm help folders

       • npm help config

       • npm help npmrc

       • npm help install

       • npm help publish

       • npm help pack

       • https://npm.im/cacache

       • https://npm.im/pacote

       • https://npm.im/@npmcli/arborist

       • https://npm.im/make-fetch-happen

                                                                     July 2022                                                        NPM-CACHE(1)

------------------------------------------------------------
[ npm ci --help 2>&1 ]
Clean install a project

Usage:
npm ci

Options:
[--no-audit] [--foreground-scripts] [--ignore-scripts]
[--script-shell <script-shell>]

aliases: clean-install, ic, install-clean, isntall-clean

Run "npm help ci" for more info

------------------------------
[ man npm ci 2>&1 ]
NPM-CI(1)                                                                                                                                NPM-CI(1)

NAME
       npm-ci - Clean install a project

   Synopsis
         npm ci

         aliases: clean-install, ic, install-clean, isntall-clean

   Description
       This command is similar to npm help install, except it's meant to be used in automated environments such as test platforms, continuous
       integration, and deployment -- or any situation where you want to make sure you're doing a clean install of your dependencies.

       The main differences between using npm install and npm ci are:

       • The project must have an existing package-lock.json or npm-shrinkwrap.json.

       • If dependencies in the package lock do not match those in package.json, npm ci will exit with an error, instead of updating the package
         lock.

       • npm ci can only install entire projects at a time: individual dependencies cannot be added with this command.

       • If a node_modules is already present, it will be automatically removed before npm ci begins its install.

       • It will never write to package.json or any of the package-locks: installs are essentially frozen.

       NOTE: If you create your package-lock.json file by running npm install with flags that can affect the shape of your dependency tree, such
       as --legacy-peer-deps or --install-links, you must provide the same flags to npm ci or you are likely to encounter errors. An easy way to
       do this is to run, for example, npm config set legacy-peer-deps=true --location=project and commit the .npmrc file to your repo.

   Example
       Make sure you have a package-lock and an up-to-date install:

         $ cd ./my/npm/project
         $ npm install
         added 154 packages in 10s
         $ ls | grep package-lock

       Run npm ci in that project

         $ npm ci
         added 154 packages in 5s

       Configure Travis to build using npm ci instead of npm install:

         # .travis.yml
         install:
         - npm ci
         # keep the npm cache around to speed up installs
         cache:
           directories:
           - "$HOME/.npm"

   Configuration
   audit
       • Default: true

       • Type: Boolean

       When "true" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See
       the documentation for npm help audit for details on what is submitted.

   foreground-scripts
       • Default: false

       • Type: Boolean

       Run all build scripts (ie, preinstall, install, and postinstall) scripts for installed packages in the foreground process, sharing standard
       input, output, and error with the main npm process.

       Note that this will generally make installs run slower, and be much noisier, but can be useful for debugging.

   ignore-scripts
       • Default: false

       • Type: Boolean

       If true, npm does not run scripts specified in package.json files.

       Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script
       will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.

   script-shell
       • Default: '/bin/sh' on POSIX systems, 'cmd.exe' on Windows

       • Type: null or String

       The shell to use for scripts run with the npm exec, npm run and npm init <package-spec> commands.

   See Also
       • npm help install

       • npm help package-lock.json

                                                                     July 2022                                                           NPM-CI(1)

------------------------------------------------------------
[ npm completion --help 2>&1 ]
Tab Completion for npm

Usage:
npm completion

Run "npm help completion" for more info

------------------------------
[ man npm completion 2>&1 ]
NPM-COMPLETION(1)                                                                                                                NPM-COMPLETION(1)

NAME
       npm-completion - Tab Completion for npm

   Synopsis
         npm completion

       Note: This command is unaware of workspaces.

   Description
       Enables tab-completion in all npm commands.

       The synopsis above loads the completions into your current shell.  Adding it to your ~/.bashrc or ~/.zshrc will make the completions
       available everywhere:

         npm completion >> ~/.bashrc
         npm completion >> ~/.zshrc

       You may of course also pipe the output of npm completion to a file such as /usr/local/etc/bash_completion.d/npm or
       /etc/bash_completion.d/npm if you have a system that will read that file for you.

       When COMP_CWORD, COMP_LINE, and COMP_POINT are defined in the environment, npm completion acts in "plumbing mode", and outputs completions
       based on the arguments.

   See Also
       • npm help developers

       • npm help npm

                                                                     July 2022                                                   NPM-COMPLETION(1)

------------------------------------------------------------
[ npm config --help 2>&1 ]
Manage the npm configuration files

Usage:
npm config set <key>=<value> [<key>=<value> ...]
npm config get [<key> [<key> ...]]
npm config delete <key> [<key> ...]
npm config list [--json]
npm config edit

Options:
[--json] [-g|--global] [--editor <editor>] [-L|--location <global|user|project>]
[-l|--long]

alias: c

Run "npm help config" for more info

------------------------------
[ man npm config 2>&1 ]
NPM-CONFIG(1)                                                                                                                        NPM-CONFIG(1)

NAME
       npm-config - Manage the npm configuration files

   Synopsis
         npm config set <key>=<value> [<key>=<value> ...]
         npm config get [<key> [<key> ...]]
         npm config delete <key> [<key> ...]
         npm config list [--json]
         npm config edit

         alias: c

       Note: This command is unaware of workspaces.

   Description
       npm gets its config settings from the command line, environment variables, npmrc files, and in some cases, the package.json file.

       See npm help npmrc for more information about the npmrc files.

       See npm help config(7) for a more thorough explanation of the mechanisms involved, and a full list of config options available.

       The npm config command can be used to update and edit the contents of the user and global npmrc files.

   Sub-commands
       Config supports the following sub-commands:

   set
         npm config set key=value [key=value...]
         npm set key=value [key=value...]

       Sets each of the config keys to the value provided.

       If value is omitted, then it sets it to an empty string.

       Note: for backwards compatibility, npm config set key value is supported as an alias for npm config set key=value.

   get
         npm config get [key ...]
         npm get [key ...]

       Echo the config value(s) to stdout.

       If multiple keys are provided, then the values will be prefixed with the key names.

       If no keys are provided, then this command behaves the same as npm config list.

   list
         npm config list

       Show all the config settings. Use -l to also show defaults. Use --json to show the settings in json format.

   delete
         npm config delete key [key ...]

       Deletes the specified keys from all configuration files.

   edit
         npm config edit

       Opens the config file in an editor.  Use the --global flag to edit the global config.

   Configuration
   json
       • Default: false

       • Type: Boolean

       Whether or not to output JSON data, rather than the normal output.

       • In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

       Not supported by all npm commands.

   global
       • Default: false

       • Type: Boolean

       Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See npm help
       folders for more on the differences in behavior.

       • packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.

       • bin files are linked to {prefix}/bin

       • man pages are linked to {prefix}/share/man

   editor
       • Default: The EDITOR or VISUAL environment variables, or 'notepad.exe' on Windows, or 'vim' on Unix systems

       • Type: String

       The command to run for npm edit and npm config edit.

   location
       • Default: "user" unless --global is passed, which will also set this value to "global"

       • Type: "global", "user", or "project"

       When passed to npm config this refers to which config file to use.

       When set to "global" mode, packages are installed into the prefix folder instead of the current working directory. See npm help folders for
       more on the differences in behavior.

       • packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.

       • bin files are linked to {prefix}/bin

       • man pages are linked to {prefix}/share/man

   long
       • Default: false

       • Type: Boolean

       Show extended information in ls, search, and help-search.

   See Also
       • npm help folders

       • npm help config

       • npm help package.json

       • npm help npmrc

       • npm help npm

                                                                     July 2022                                                       NPM-CONFIG(1)

------------------------------------------------------------
[ npm dedupe --help 2>&1 ]
Reduce duplication in the package tree

Usage:
npm dedupe

Options:
[--global-style] [--legacy-bundling] [--strict-peer-deps] [--no-package-lock]
[--omit <dev|optional|peer> [--omit <dev|optional|peer> ...]] [--ignore-scripts]
[--no-audit] [--no-bin-links] [--no-fund] [--dry-run]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces] [--include-workspace-root] [--install-links]

alias: ddp

Run "npm help dedupe" for more info

------------------------------
[ man npm dedupe 2>&1 ]
NPM-DEDUPE(1)                                                                                                                        NPM-DEDUPE(1)

NAME
       npm-dedupe - Reduce duplication in the package tree

   Synopsis
         npm dedupe

         alias: ddp

   Description
       Searches the local package tree and attempts to simplify the overall structure by moving dependencies further up the tree, where they can
       be more effectively shared by multiple dependent packages.

       For example, consider this dependency graph:

         a
         +-- b <-- depends on c@1.0.x
         |   `-- c@1.0.3
         `-- d <-- depends on c@~1.0.9
             `-- c@1.0.10

       In this case, npm dedupe will transform the tree to:

         a
         +-- b
         +-- d
         `-- c@1.0.10

       Because of the hierarchical nature of node's module lookup, b and d will both get their dependency met by the single c package at the root
       level of the tree.

       In some cases, you may have a dependency graph like this:

         a
         +-- b <-- depends on c@1.0.x
         +-- c@1.0.3
         `-- d <-- depends on c@1.x
             `-- c@1.9.9

       During the installation process, the c@1.0.3 dependency for b was placed in the root of the tree.  Though d's dependency on c@1.x could
       have been satisfied by c@1.0.3, the newer c@1.9.0 dependency was used, because npm favors updates by default, even when doing so causes
       duplication.

       Running npm dedupe will cause npm to note the duplication and re-evaluate, deleting the nested c module, because the one in the root is
       sufficient.

       To prefer deduplication over novelty during the installation process, run npm install --prefer-dedupe or npm config set prefer-dedupe true.

       Arguments are ignored. Dedupe always acts on the entire tree.

       Note that this operation transforms the dependency tree, but will never result in new modules being installed.

       Using npm find-dupes will run the command in --dry-run mode.

       Note: npm dedupe will never update the semver values of direct dependencies in your project package.json, if you want to update values in
       package.json you can run: npm update --save instead.

   Configuration
   global-style
       • Default: false

       • Type: Boolean

       Causes npm to install the package into your local node_modules folder with the same layout it uses with the global node_modules folder.
       Only your direct dependencies will show in node_modules and everything they depend on will be flattened in their node_modules folders. This
       obviously will eliminate some deduping. If used with legacy-bundling, legacy-bundling will be preferred.

   legacy-bundling
       • Default: false

       • Type: Boolean

       Causes npm to install the package such that versions of npm prior to 1.4, such as the one included with node 0.8, can install the package.
       This eliminates all automatic deduping. If used with global-style this option will be preferred.

   strict-peer-deps
       • Default: false

       • Type: Boolean

       If set to true, and --legacy-peer-deps is not set, then any conflicting peerDependencies will be treated as an install failure, even if npm
       could reasonably guess the appropriate resolution based on non-peer dependency relationships.

       By default, conflicting peerDependencies deep in the dependency graph will be resolved using the nearest non-peer dependency specification,
       even if doing so will result in some packages receiving a peer dependency outside the range set in their package's peerDependencies object.

       When such and override is performed, a warning is printed, explaining the conflict and the packages involved. If --strict-peer-deps is set,
       then this warning is treated as a failure.

   package-lock
       • Default: true

       • Type: Boolean

       If set to false, then ignore package-lock.json files when installing. This will also prevent writing package-lock.json if save is true.

       This configuration does not affect npm ci.

   omit
       • Default: 'dev' if the NODE_ENV environment variable is set to 'production', otherwise empty.

       • Type: "dev", "optional", or "peer" (can be set multiple times)

       Dependency types to omit from the installation tree on disk.

       Note that these dependencies are still resolved and added to the package-lock.json or npm-shrinkwrap.json file. They are just not
       physically installed on disk.

       If a package type appears in both the --include and --omit lists, then it will be included.

       If the resulting omit list includes 'dev', then the NODE_ENV environment variable will be set to 'production' for all lifecycle scripts.

   ignore-scripts
       • Default: false

       • Type: Boolean

       If true, npm does not run scripts specified in package.json files.

       Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script
       will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.

   audit
       • Default: true

       • Type: Boolean

       When "true" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See
       the documentation for npm help audit for details on what is submitted.

   bin-links
       • Default: true

       • Type: Boolean

       Tells npm to create symlinks (or .cmd shims on Windows) for package executables.

       Set to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on
       ostensibly Unix systems.

   fund
       • Default: true

       • Type: Boolean

       When "true" displays the message at the end of each npm install acknowledging the number of dependencies looking for funding. See npm help
       npm fund for details.

   dry-run
       • Default: false

       • Type: Boolean

       Indicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any
       of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack and publish.

       Note: This is NOT honored by other network related commands, eg dist-tags, owner, etc.

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

   include-workspace-root
       • Default: false

       • Type: Boolean

       Include the workspace root when workspaces are enabled for a command.

       When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate
       only on the specified workspaces, and not on the root project.

       This value is not exported to the environment for child processes.

   install-links
       • Default: false

       • Type: Boolean

       When set file: protocol dependencies that exist outside of the project root will be packed and installed as regular dependencies instead of
       creating a symlink. This option has no effect on workspaces.

   See Also
       • npm help find-dupes

       • npm help ls

       • npm help update

       • npm help install

                                                                     July 2022                                                       NPM-DEDUPE(1)

------------------------------------------------------------
[ npm deprecate --help 2>&1 ]
Deprecate a version of a package

Usage:
npm deprecate <package-spec> <message>

Options:
[--registry <registry>] [--otp <otp>]

Run "npm help deprecate" for more info

------------------------------
[ man npm deprecate 2>&1 ]
NPM-DEPRECATE(1)                                                                                                                  NPM-DEPRECATE(1)

NAME
       npm-deprecate - Deprecate a version of a package

   Synopsis
         npm deprecate <package-spec> <message>

       Note: This command is unaware of workspaces.

   Description
       This command will update the npm registry entry for a package, providing a deprecation warning to all who attempt to install it.

       It works on version ranges https://semver.npmjs.com/ as well as specific versions, so you can do something like this:

         npm deprecate my-thing@"< 0.2.3" "critical bug fixed in v0.2.3"

       SemVer ranges passed to this command are interpreted such that they do include prerelease versions.  For example:

         npm deprecate my-thing@1.x "1.x is no longer supported"

       In this case, a version my-thing@1.0.0-beta.0 will also be deprecated.

       You must be the package owner to deprecate something.  See the owner and adduser help topics.

       To un-deprecate a package, specify an empty string ("") for the message argument. Note that you must use double quotes with no space
       between them to format an empty string.

   Configuration
   registry
       • Default: "https://registry.npmjs.org/"

       • Type: URL

       The base URL of the npm registry.

   otp
       • Default: null

       • Type: null or String

       This is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with npm access.

       If not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.

   See Also
       • npm help package spec

       • npm help publish

       • npm help registry

       • npm help owner

       • npm help adduser

                                                                     July 2022                                                    NPM-DEPRECATE(1)

------------------------------------------------------------
[ npm diff --help 2>&1 ]
The registry diff command

Usage:
npm diff [...<paths>]

Options:
[--diff <package-spec> [--diff <package-spec> ...]] [--diff-name-only]
[--diff-unified <number>] [--diff-ignore-all-space] [--diff-no-prefix]
[--diff-src-prefix <path>] [--diff-dst-prefix <path>] [--diff-text] [-g|--global]
[--tag <tag>]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces] [--include-workspace-root]

Run "npm help diff" for more info

------------------------------
[ man npm diff 2>&1 ]
NPM-DIFF(1)                                                                                                                            NPM-DIFF(1)

NAME
       npm-diff - The registry diff command

   Synopsis
         npm diff [...<paths>]

   Description
       Similar to its git diff counterpart, this command will print diff patches of files for packages published to the npm registry.

       • npm diff --diff=<spec-a> --diff=<spec-b>
           Compares two package versions using their registry specifiers, e.g:
           npm diff --diff=pkg@1.0.0 --diff=pkg@^2.0.0. It's also possible to
           compare across forks of any package,
           e.g: npm diff --diff=pkg@1.0.0 --diff=pkg-fork@1.0.0.
           Any valid spec can be used, so that it's also possible to compare
           directories or git repositories,
           e.g: npm diff --diff=pkg@latest --diff=./packages/pkg
           Here's an example comparing two different versions of a package named
           abbrev from the registry:

           npm diff --diff=abbrev@1.1.0 --diff=abbrev@1.1.1
         On success, output looks like:

           diff --git a/package.json b/package.json
           index v1.1.0..v1.1.1 100644
           --- a/package.json
           +++ b/package.json
           @@ -1,6 +1,6 @@
            {
              "name": "abbrev",
           -  "version": "1.1.0",
           +  "version": "1.1.1",
              "description": "Like ruby's abbrev module, but in js",
              "author": "Isaac Z. Schlueter <i@izs.me>",
              "main": "abbrev.js",
         Given the flexible nature of npm specs, you can also target local
         directories or git repos just like when using npm install:

           npm diff --diff=https://github.com/npm/libnpmdiff --diff=./local-path
         In the example above we can compare the contents from the package installed
         from the git repo at github.com/npm/libnpmdiff with the contents of the
         ./local-path that contains a valid package, such as a modified copy of
         the original.

       • npm diff (in a package directory, no arguments):
           If the package is published to the registry, npm diff will fetch the
           tarball version tagged as latest (this value can be configured using the
           tag option) and proceed to compare the contents of files present in that
           tarball, with the current files in your local file system.
           This workflow provides a handy way for package authors to see what
           package-tracked files have been changed in comparison with the latest
           published version of that package.

       • npm diff --diff=<pkg-name> (in a package directory):
           When using a single package name (with no version or tag specifier) as an
           argument, npm diff will work in a similar way to
           npm-outdated npm-outdated and reach for the registry to figure out
           what current published version of the package named <pkg-name>
           will satisfy its dependent declared semver-range. Once that specific
           version is known npm diff will print diff patches comparing the
           current version of <pkg-name> found in the local file system with
           that specific version returned by the registry.
           Given a package named abbrev that is currently installed:

           npm diff --diff=abbrev
         That will request from the registry its most up to date version and
         will print a diff output comparing the currently installed version to this
         newer one if the version numbers are not the same.

       • npm diff --diff=<spec-a> (in a package directory):
           Similar to using only a single package name, it's also possible to declare
           a full registry specifier version if you wish to compare the local version
           of an installed package with the specific version/tag/semver-range provided
           in <spec-a>.
           An example: assuming pkg@1.0.0 is installed in the current node_modules
           folder, running:

           npm diff --diff=pkg@2.0.0
         It will effectively be an alias to
         npm diff --diff=pkg@1.0.0 --diff=pkg@2.0.0.

       • npm diff --diff=<semver-a> [--diff=<semver-b>] (in a package directory):
           Using npm diff along with semver-valid version numbers is a shorthand
           to compare different versions of the current package.
           It needs to be run from a package directory, such that for a package named
           pkg running npm diff --diff=1.0.0 --diff=1.0.1 is the same as running
           npm diff --diff=pkg@1.0.0 --diff=pkg@1.0.1.
           If only a single argument <version-a> is provided, then the current local
           file system is going to be compared against that version.
           Here's an example comparing two specific versions (published to the
           configured registry) of the current project directory:

           npm diff --diff=1.0.0 --diff=1.1.0

       Note that tag names are not valid --diff argument values, if you wish to compare to a published tag, you must use the pkg@tagname syntax.

   Filtering files
       It's possible to also specify positional arguments using file names or globs pattern matching in order to limit the result of diff patches
       to only a subset of files for a given package, e.g:

           npm diff --diff=pkg@2 ./lib/ CHANGELOG.md

       In the example above the diff output is only going to print contents of files located within the folder ./lib/ and changed lines of code
       within the CHANGELOG.md file.

   Configuration
   diff
       • Default:

       • Type: String (can be set multiple times)

       Define arguments to compare in npm diff.

   diff-name-only
       • Default: false

       • Type: Boolean

       Prints only filenames when using npm diff.

   diff-unified
       • Default: 3

       • Type: Number

       The number of lines of context to print in npm diff.

   diff-ignore-all-space
       • Default: false

       • Type: Boolean

       Ignore whitespace when comparing lines in npm diff.

   diff-no-prefix
       • Default: false

       • Type: Boolean

       Do not show any source or destination prefix in npm diff output.

       Note: this causes npm diff to ignore the --diff-src-prefix and --diff-dst-prefix configs.

   diff-src-prefix
       • Default: "a/"

       • Type: String

       Source prefix to be used in npm diff output.

   diff-dst-prefix
       • Default: "b/"

       • Type: String

       Destination prefix to be used in npm diff output.

   diff-text
       • Default: false

       • Type: Boolean

       Treat all files as text in npm diff.

   global
       • Default: false

       • Type: Boolean

       Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See npm help
       folders for more on the differences in behavior.

       • packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.

       • bin files are linked to {prefix}/bin

       • man pages are linked to {prefix}/share/man

   tag
       • Default: "latest"

       • Type: String

       If you ask npm to install a package and don't tell it a specific version, then it will install the specified tag.

       Also the tag that is added to the package@version specified by the npm tag command, if no explicit tag is given.

       When used by the npm diff command, this is the tag used to fetch the tarball that will be compared with the local files by default.

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

   include-workspace-root
       • Default: false

       • Type: Boolean

       Include the workspace root when workspaces are enabled for a command.

       When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate
       only on the specified workspaces, and not on the root project.

       This value is not exported to the environment for child processes.

See Also
       • npm help outdated

       • npm help install

       • npm help config

       • npm help registry

                                                                     July 2022                                                         NPM-DIFF(1)

------------------------------------------------------------
[ npm dist-tag --help 2>&1 ]
Modify package distribution tags

Usage:
npm dist-tag add <package-spec (with version)> [<tag>]
npm dist-tag rm <package-spec> <tag>
npm dist-tag ls [<package-spec>]

Options:
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces] [--include-workspace-root]

alias: dist-tags

Run "npm help dist-tag" for more info

------------------------------
[ man npm dist-tag 2>&1 ]
NPM-DIST-TAG(1)                                                                                                                    NPM-DIST-TAG(1)

NAME
       npm-dist-tag - Modify package distribution tags

   Synopsis
         npm dist-tag add <package-spec (with version)> [<tag>]
         npm dist-tag rm <package-spec> <tag>
         npm dist-tag ls [<package-spec>]

         alias: dist-tags

   Description
       Add, remove, and enumerate distribution tags on a package:

       • add: Tags the specified version of the package with the specified tag, or the --tag config if not specified. If you have two-factor
         authentication on auth-and-writes then you’ll need to include a one-time password on the command line with --otp <one-time password>, or
         at the OTP prompt.

       • rm: Clear a tag that is no longer in use from the package. If you have two-factor authentication on auth-and-writes then you’ll need to
         include a one-time password on the command line with --otp <one-time password>, or at the OTP prompt.

       • ls: Show all of the dist-tags for a package, defaulting to the package in the current prefix. This is the default action if none is
         specified.

       A tag can be used when installing packages as a reference to a version instead of using a specific version number:

         npm install <name>@<tag>

       When installing dependencies, a preferred tagged version may be specified:

         npm install --tag <tag>

       (This also applies to any other commands that resolve and install dependencies, such as npm dedupe, npm update, and npm audit fix.)

       Publishing a package sets the latest tag to the published version unless the --tag option is used. For example, npm publish --tag=beta.

       By default, npm install <pkg> (without any @<version> or @<tag> specifier) installs the latest tag.

   Purpose
       Tags can be used to provide an alias instead of version numbers.

       For example, a project might choose to have multiple streams of development and use a different tag for each stream, e.g., stable, beta,
       dev, canary.

       By default, the latest tag is used by npm to identify the current version of a package, and npm install <pkg> (without any @<version> or
       @<tag> specifier) installs the latest tag. Typically, projects only use the latest tag for stable release versions, and use other tags for
       unstable versions such as prereleases.

       The next tag is used by some projects to identify the upcoming version.

       Other than latest, no tag has any special significance to npm itself.

   Caveats
       This command used to be known as npm tag, which only created new tags, and so had a different syntax.

       Tags must share a namespace with version numbers, because they are specified in the same slot: npm install <pkg>@<version> vs npm install
       <pkg>@<tag>.

       Tags that can be interpreted as valid semver ranges will be rejected. For example, v1.4 cannot be used as a tag, because it is interpreted
       by semver as >=1.4.0 <1.5.0.  See https://github.com/npm/npm/issues/6082.

       The simplest way to avoid semver problems with tags is to use tags that do not begin with a number or the letter v.

   Configuration
   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

   include-workspace-root
       • Default: false

       • Type: Boolean

       Include the workspace root when workspaces are enabled for a command.

       When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate
       only on the specified workspaces, and not on the root project.

       This value is not exported to the environment for child processes.

   See Also
       • npm help package spec

       • npm help publish

       • npm help install

       • npm help dedupe

       • npm help registry

       • npm help config

       • npm help npmrc

                                                                     July 2022                                                     NPM-DIST-TAG(1)

------------------------------------------------------------
[ npm docs --help 2>&1 ]
Open documentation for a package in a web browser

Usage:
npm docs [<pkgname> [<pkgname> ...]]

Options:
[--no-browser|--browser <browser>] [--registry <registry>]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces] [--include-workspace-root]

alias: home

Run "npm help docs" for more info

------------------------------
[ man npm docs 2>&1 ]
NPM-DOCS(1)                                                                                                                            NPM-DOCS(1)

NAME
       npm-docs - Open documentation for a package in a web browser

   Synopsis
         npm docs [<pkgname> [<pkgname> ...]]

         alias: home

   Description
       This command tries to guess at the likely location of a package's documentation URL, and then tries to open it using the --browser config
       param. You can pass multiple package names at once. If no package name is provided, it will search for a package.json in the current folder
       and use the name property.

   Configuration
   browser
       • Default: OS X: "open", Windows: "start", Others: "xdg-open"

       • Type: null, Boolean, or String

       The browser that is called by npm commands to open websites.

       Set to false to suppress browser behavior and instead print urls to terminal.

       Set to true to use default system URL opener.

   registry
       • Default: "https://registry.npmjs.org/"

       • Type: URL

       The base URL of the npm registry.

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

   include-workspace-root
       • Default: false

       • Type: Boolean

       Include the workspace root when workspaces are enabled for a command.

       When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate
       only on the specified workspaces, and not on the root project.

       This value is not exported to the environment for child processes.

   See Also
       • npm help view

       • npm help publish

       • npm help registry

       • npm help config

       • npm help npmrc

       • npm help package.json

                                                                     July 2022                                                         NPM-DOCS(1)

------------------------------------------------------------
[ npm doctor --help 2>&1 ]
Check your npm environment

Usage:
npm doctor

Options:
[--registry <registry>]

Run "npm help doctor" for more info

------------------------------
[ man npm doctor 2>&1 ]
NPM-DOCTOR(1)                                                                                                                        NPM-DOCTOR(1)

NAME
       npm-doctor - Check your npm environment

   Synopsis
         npm doctor

       Note: This command is unaware of workspaces.

   Description
       npm doctor runs a set of checks to ensure that your npm installation has what it needs to manage your JavaScript packages. npm is mostly a
       standalone tool, but it does have some basic requirements that must be met:

       • Node.js and git must be executable by npm.

       • The primary npm registry, registry.npmjs.com, or another service that uses the registry API, is available.

       • The directories that npm uses, node_modules (both locally and globally), exist and can be written by the current user.

       • The npm cache exists, and the package tarballs within it aren't corrupt.

       Without all of these working properly, npm may not work properly.  Many issues are often attributable to things that are outside npm's code
       base, so npm doctor confirms that the npm installation is in a good state.

       Also, in addition to this, there are also very many issue reports due to using old versions of npm. Since npm is constantly improving,
       running npm@latest is better than an old version.

       npm doctor verifies the following items in your environment, and if there are any recommended changes, it will display them.

   npm ping
       By default, npm installs from the primary npm registry, registry.npmjs.org.  npm doctor hits a special ping endpoint within the registry.
       This can also be checked with npm ping. If this check fails, you may be using a proxy that needs to be configured, or may need to talk to
       your IT staff to get access over HTTPS to registry.npmjs.org.

       This check is done against whichever registry you've configured (you can see what that is by running npm config get registry), and if
       you're using a private registry that doesn't support the /whoami endpoint supported by the primary registry, this check may fail.

   npm -v
       While Node.js may come bundled with a particular version of npm, it's the policy of the CLI team that we recommend all users run npm@latest
       if they can. As the CLI is maintained by a small team of contributors, there are only resources for a single line of development, so npm's
       own long-term support releases typically only receive critical security and regression fixes. The team believes that the latest tested
       version of npm is almost always likely to be the most functional and defect-free version of npm.

   node -v
       For most users, in most circumstances, the best version of Node will be the latest long-term support (LTS) release. Those of you who want
       access to new ECMAscript features or bleeding-edge changes to Node's standard library may be running a newer version, and some may be
       required to run an older version of Node because of enterprise change control policies. That's OK!  But in general, the npm team recommends
       that most users run Node.js LTS.

   npm config get registry
       You may be installing from private package registries for your project or company. That's great! Others may be following tutorials or
       StackOverflow questions in an effort to troubleshoot problems you may be having.  Sometimes, this may entail changing the registry you're
       pointing at.  This part of npm doctor just lets you, and maybe whoever's helping you with support, know that you're not using the default
       registry.

   which git
       While it's documented in the README, it may not be obvious that npm needs Git installed to do many of the things that it does. Also, in
       some cases – especially on Windows – you may have Git set up in such a way that it's not accessible via your PATH so that npm can find it.
       This check ensures that Git is available.

   Permissions checks
       • Your cache must be readable and writable by the user running npm.

       • Global package binaries must be writable by the user running npm.

       • Your local node_modules path, if you're running npm doctor with a project directory, must be readable and writable by the user running
         npm.

   Validate the checksums of cached packages
       When an npm package is published, the publishing process generates a checksum that npm uses at install time to verify that the package
       didn't get corrupted in transit. npm doctor uses these checksums to validate the package tarballs in your local cache (you can see where
       that cache is located with npm config get cache). In the event that there are corrupt packages in your cache, you should probably run npm
       cache clean -f and reset the cache.

   Configuration
   registry
       • Default: "https://registry.npmjs.org/"

       • Type: URL

       The base URL of the npm registry.

   See Also
       • npm help bugs

       • npm help help

       • npm help ping

                                                                     July 2022                                                       NPM-DOCTOR(1)

------------------------------------------------------------
[ npm edit --help 2>&1 ]
Edit an installed package

Usage:
npm edit <pkg>[/<subpkg>...]

Options:
[--editor <editor>]

Run "npm help edit" for more info

------------------------------
[ man npm edit 2>&1 ]
NPM-EDIT(1)                                                                                                                            NPM-EDIT(1)

NAME
       npm-edit - Edit an installed package

   Synopsis
         npm edit <pkg>[/<subpkg>...]

       Note: This command is unaware of workspaces.

   Description
       Selects a dependency in the current project and opens the package folder in the default editor (or whatever you've configured as the npm
       editor config -- see npm-config npm-config).

       After it has been edited, the package is rebuilt so as to pick up any changes in compiled packages.

       For instance, you can do npm install connect to install connect into your package, and then npm edit connect to make a few changes to your
       locally installed copy.

   Configuration
   editor
       • Default: The EDITOR or VISUAL environment variables, or 'notepad.exe' on Windows, or 'vim' on Unix systems

       • Type: String

       The command to run for npm edit and npm config edit.

   See Also
       • npm help folders

       • npm help explore

       • npm help install

       • npm help config

       • npm help npmrc

                                                                     July 2022                                                         NPM-EDIT(1)

------------------------------------------------------------
[ npm exec --help 2>&1 ]
Run a command from a local or remote npm package

Usage:
npm exec -- <pkg>[@<version>] [args...]
npm exec --package=<pkg>[@<version>] -- <cmd> [args...]
npm exec -c '<cmd> [args...]'
npm exec --package=foo -c '<cmd> [args...]'

Options:
[--package <package-spec> [--package <package-spec> ...]] [-c|--call <call>]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces] [--include-workspace-root]

alias: x

Run "npm help exec" for more info

------------------------------
[ man npm exec 2>&1 ]
NPM-EXEC(1)                                                                                                                            NPM-EXEC(1)

NAME
       npm-exec - Run a command from a local or remote npm package

   Synopsis
         npm exec -- <pkg>[@<version>] [args...]
         npm exec --package=<pkg>[@<version>] -- <cmd> [args...]
         npm exec -c '<cmd> [args...]'
         npm exec --package=foo -c '<cmd> [args...]'

         alias: x

   Description
       This command allows you to run an arbitrary command from an npm package (either one installed locally, or fetched remotely), in a similar
       context as running it via npm run.

       Run without positional arguments or --call, this allows you to interactively run commands in the same sort of shell environment that
       package.json scripts are run.  Interactive mode is not supported in CI environments when standard input is a TTY, to prevent hangs.

       Whatever packages are specified by the --package option will be provided in the PATH of the executed command, along with any locally
       installed package executables.  The --package option may be specified multiple times, to execute the supplied command in an environment
       where all specified packages are available.

       If any requested packages are not present in the local project dependencies, then they are installed to a folder in the npm cache, which is
       added to the PATH environment variable in the executed process.  A prompt is printed (which can be suppressed by providing either --yes or
       --no).

       Package names provided without a specifier will be matched with whatever version exists in the local project.  Package names with a
       specifier will only be considered a match if they have the exact same name and version as the local dependency.

       If no -c or --call option is provided, then the positional arguments are used to generate the command string.  If no --package options are
       provided, then npm will attempt to determine the executable name from the package specifier provided as the first positional argument
       according to the following heuristic:

       • If the package has a single entry in its bin field in package.json, or if all entries are aliases of the same command, then that command
         will be used.

       • If the package has multiple bin entries, and one of them matches the unscoped portion of the name field, then that command will be used.

       • If this does not result in exactly one option (either because there are no bin entries, or none of them match the name of the package),
         then npm exec exits with an error.

       To run a binary other than the named binary, specify one or more --package options, which will prevent npm from inferring the package from
       the first command argument.

   npx vs npm exec
       When run via the npx binary, all flags and options must be set prior to any positional arguments.  When run via npm exec, a double-hyphen
       -- flag can be used to suppress npm's parsing of switches and options that should be sent to the executed command.

       For example:

         $ npx foo@latest bar --package=@npmcli/foo

       In this case, npm will resolve the foo package name, and run the following command:

         $ foo bar --package=@npmcli/foo

       Since the --package option comes after the positional arguments, it is treated as an argument to the executed command.

       In contrast, due to npm's argument parsing logic, running this command is different:

         $ npm exec foo@latest bar --package=@npmcli/foo

       In this case, npm will parse the --package option first, resolving the @npmcli/foo package.  Then, it will execute the following command in
       that context:

         $ foo@latest bar

       The double-hyphen character is recommended to explicitly tell npm to stop parsing command line options and switches.  The following command
       would thus be equivalent to the npx command above:

         $ npm exec -- foo@latest bar --package=@npmcli/foo

   Configuration
   package
       • Default:

       • Type: String (can be set multiple times)

       The package to install for npm help exec

   call
       • Default: ""

       • Type: String

       Optional companion option for npm exec, npx that allows for specifying a custom command to be run along with the installed packages.

         npm exec --package yo --package generator-node --call "yo node"

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

   include-workspace-root
       • Default: false

       • Type: Boolean

       Include the workspace root when workspaces are enabled for a command.

       When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate
       only on the specified workspaces, and not on the root project.

       This value is not exported to the environment for child processes.

   Examples
       Run the version of tap in the local dependencies, with the provided arguments:

         $ npm exec -- tap --bail test/foo.js
         $ npx tap --bail test/foo.js

       Run a command other than the command whose name matches the package name by specifying a --package option:

         $ npm exec --package=foo -- bar --bar-argument
         # ~ or ~
         $ npx --package=foo bar --bar-argument

       Run an arbitrary shell script, in the context of the current project:

         $ npm x -c 'eslint && say "hooray, lint passed"'
         $ npx -c 'eslint && say "hooray, lint passed"'

   Workspaces support
       You may use the workspace or workspaces configs in order to run an arbitrary command from an npm package (either one installed locally, or
       fetched remotely) in the context of the specified workspaces.  If no positional argument or --call option is provided, it will open an
       interactive subshell in the context of each of these configured workspaces one at a time.

       Given a project with configured workspaces, e.g:

         .
         +-- package.json
         `-- packages
            +-- a
            |   `-- package.json
            +-- b
            |   `-- package.json
            `-- c
                `-- package.json

       Assuming the workspace configuration is properly set up at the root level package.json file. e.g:

         {
             "workspaces": [ "./packages/*" ]
         }

       You can execute an arbitrary command from a package in the context of each of the configured workspaces when using the workspaces
       configuration options, in this example we're using eslint to lint any js file found within each workspace folder:

         npm exec --ws -- eslint ./*.js

   Filtering workspaces
       It's also possible to execute a command in a single workspace using the workspace config along with a name or directory path:

         npm exec --workspace=a -- eslint ./*.js

       The workspace config can also be specified multiple times in order to run a specific script in the context of multiple workspaces. When
       defining values for the workspace config in the command line, it also possible to use -w as a shorthand, e.g:

         npm exec -w a -w b -- eslint ./*.js

       This last command will run the eslint command in both ./packages/a and ./packages/b folders.

   Compatibility with Older npx Versions
       The npx binary was rewritten in npm v7.0.0, and the standalone npx package deprecated at that time.  npx uses the npm exec command instead
       of a separate argument parser and install process, with some affordances to maintain backwards compatibility with the arguments it accepted
       in previous versions.

       This resulted in some shifts in its functionality:

       • Any npm config value may be provided.

       • To prevent security and user-experience problems from mistyping package names, npx prompts before installing anything.  Suppress this
         prompt with the -y or --yes option.

       • The --no-install option is deprecated, and will be converted to --no.

       • Shell fallback functionality is removed, as it is not advisable.

       • The -p argument is a shorthand for --parseable in npm, but shorthand for --package in npx.  This is maintained, but only for the npx
         executable.

       • The --ignore-existing option is removed.  Locally installed bins are always present in the executed process PATH.

       • The --npm option is removed.  npx will always use the npm it ships with.

       • The --node-arg and -n options are removed.

       • The --always-spawn option is redundant, and thus removed.

       • The --shell option is replaced with --script-shell, but maintained in the npx executable for backwards compatibility.

   A note on caching
       The npm cli utilizes its internal package cache when using the package name specified.  You can use the following to change how and when
       the cli uses this cache. See npm help cache for more on how the cache works.

   prefer-online
       Forces staleness checks for packages, making the cli look for updates immediately even if the package is already in the cache.

   prefer-offline
       Bypasses staleness checks for packages.  Missing data will still be requested from the server. To force full offline mode, use offline.

   offline
       Forces full offline mode. Any packages not locally cached will result in an error.

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result to selecting all of the nested workspaces)

       This value is not exported to the environment for child processes.

   workspaces
       • Alias: --ws

       • Type: Boolean

       • Default: false

       Run scripts in the context of all configured workspaces for the current project.

   See Also
       • npm help run-script

       • npm help scripts

       • npm help test

       • npm help start

       • npm help restart

       • npm help stop

       • npm help config

       • npm help workspaces

       • npm help npx

                                                                     July 2022                                                         NPM-EXEC(1)

------------------------------------------------------------
[ npm explain --help 2>&1 ]
Explain installed packages

Usage:
npm explain <package-spec>

Options:
[--json] [-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]

alias: why

Run "npm help explain" for more info

------------------------------
[ man npm explain 2>&1 ]
NPM-EXPLAIN(1)                                                                                                                      NPM-EXPLAIN(1)

NAME
       npm-explain - Explain installed packages

   Synopsis
         npm explain <package-spec>

         alias: why

   Description
       This command will print the chain of dependencies causing a given package to be installed in the current project.

       If one or more package specs are provided, then only packages matching one of the specifiers will have their relationships explained.

       The package spec can also refer to a folder within ./node_modules

       For example, running npm explain glob within npm's source tree will show:

         glob@7.1.6
         node_modules/glob
           glob@"^7.1.4" from the root project

         glob@7.1.1 dev
         node_modules/tacks/node_modules/glob
           glob@"^7.0.5" from rimraf@2.6.2
           node_modules/tacks/node_modules/rimraf
             rimraf@"^2.6.2" from tacks@1.3.0
             node_modules/tacks
               dev tacks@"^1.3.0" from the root project

       To explain just the package residing at a specific folder, pass that as the argument to the command.  This can be useful when trying to
       figure out exactly why a given dependency is being duplicated to satisfy conflicting version requirements within the project.

         $ npm explain node_modules/nyc/node_modules/find-up
         find-up@3.0.0 dev
         node_modules/nyc/node_modules/find-up
           find-up@"^3.0.0" from nyc@14.1.1
           node_modules/nyc
             nyc@"^14.1.1" from tap@14.10.8
             node_modules/tap
               dev tap@"^14.10.8" from the root project

   Configuration
   json
       • Default: false

       • Type: Boolean

       Whether or not to output JSON data, rather than the normal output.

       • In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

       Not supported by all npm commands.

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   See Also
       • npm help package spec

       • npm help config

       • npm help npmrc

       • npm help folders

       • npm help ls

       • npm help install

       • npm help link

       • npm help prune

       • npm help outdated

       • npm help update

                                                                     July 2022                                                      NPM-EXPLAIN(1)

------------------------------------------------------------
[ npm explore --help 2>&1 ]
Browse an installed package

Usage:
npm explore <pkg> [ -- <command>]

Options:
[--shell <shell>]

Run "npm help explore" for more info

------------------------------
[ man npm explore 2>&1 ]
NPM-EXPLORE(1)                                                                                                                      NPM-EXPLORE(1)

NAME
       npm-explore - Browse an installed package

   Synopsis
         npm explore <pkg> [ -- <command>]

       Note: This command is unaware of workspaces.

   Description
       Spawn a subshell in the directory of the installed package specified.

       If a command is specified, then it is run in the subshell, which then immediately terminates.

       This is particularly handy in the case of git submodules in the node_modules folder:

         npm explore some-dependency -- git pull origin master

       Note that the package is not automatically rebuilt afterwards, so be sure to use npm rebuild <pkg> if you make any changes.

   Configuration
   shell
       • Default: SHELL environment variable, or "bash" on Posix, or "cmd.exe" on Windows

       • Type: String

       The shell to run for the npm explore command.

   See Also
       • npm help folders

       • npm help edit

       • npm help rebuild

       • npm help install

                                                                     July 2022                                                      NPM-EXPLORE(1)

------------------------------------------------------------
[ npm find-dupes --help 2>&1 ]
Find duplication in the package tree

Usage:
npm find-dupes

Options:
[--global-style] [--legacy-bundling] [--strict-peer-deps] [--no-package-lock]
[--omit <dev|optional|peer> [--omit <dev|optional|peer> ...]] [--ignore-scripts]
[--no-audit] [--no-bin-links] [--no-fund]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces] [--include-workspace-root] [--install-links]

Run "npm help find-dupes" for more info

------------------------------
[ man npm find-dupes 2>&1 ]
NPM-FIND-DUPES(1)                                                                                                                NPM-FIND-DUPES(1)

NAME
       npm-find-dupes - Find duplication in the package tree

   Synopsis
         npm find-dupes

   Description
       Runs npm dedupe in --dry-run mode, making npm only output the duplications, without actually changing the package tree.

   Configuration
   global-style
       • Default: false

       • Type: Boolean

       Causes npm to install the package into your local node_modules folder with the same layout it uses with the global node_modules folder.
       Only your direct dependencies will show in node_modules and everything they depend on will be flattened in their node_modules folders. This
       obviously will eliminate some deduping. If used with legacy-bundling, legacy-bundling will be preferred.

   legacy-bundling
       • Default: false

       • Type: Boolean

       Causes npm to install the package such that versions of npm prior to 1.4, such as the one included with node 0.8, can install the package.
       This eliminates all automatic deduping. If used with global-style this option will be preferred.

   strict-peer-deps
       • Default: false

       • Type: Boolean

       If set to true, and --legacy-peer-deps is not set, then any conflicting peerDependencies will be treated as an install failure, even if npm
       could reasonably guess the appropriate resolution based on non-peer dependency relationships.

       By default, conflicting peerDependencies deep in the dependency graph will be resolved using the nearest non-peer dependency specification,
       even if doing so will result in some packages receiving a peer dependency outside the range set in their package's peerDependencies object.

       When such and override is performed, a warning is printed, explaining the conflict and the packages involved. If --strict-peer-deps is set,
       then this warning is treated as a failure.

   package-lock
       • Default: true

       • Type: Boolean

       If set to false, then ignore package-lock.json files when installing. This will also prevent writing package-lock.json if save is true.

       This configuration does not affect npm ci.

   omit
       • Default: 'dev' if the NODE_ENV environment variable is set to 'production', otherwise empty.

       • Type: "dev", "optional", or "peer" (can be set multiple times)

       Dependency types to omit from the installation tree on disk.

       Note that these dependencies are still resolved and added to the package-lock.json or npm-shrinkwrap.json file. They are just not
       physically installed on disk.

       If a package type appears in both the --include and --omit lists, then it will be included.

       If the resulting omit list includes 'dev', then the NODE_ENV environment variable will be set to 'production' for all lifecycle scripts.

   ignore-scripts
       • Default: false

       • Type: Boolean

       If true, npm does not run scripts specified in package.json files.

       Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script
       will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.

   audit
       • Default: true

       • Type: Boolean

       When "true" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See
       the documentation for npm help audit for details on what is submitted.

   bin-links
       • Default: true

       • Type: Boolean

       Tells npm to create symlinks (or .cmd shims on Windows) for package executables.

       Set to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on
       ostensibly Unix systems.

   fund
       • Default: true

       • Type: Boolean

       When "true" displays the message at the end of each npm install acknowledging the number of dependencies looking for funding. See npm help
       npm fund for details.

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

   include-workspace-root
       • Default: false

       • Type: Boolean

       Include the workspace root when workspaces are enabled for a command.

       When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate
       only on the specified workspaces, and not on the root project.

       This value is not exported to the environment for child processes.

   install-links
       • Default: false

       • Type: Boolean

       When set file: protocol dependencies that exist outside of the project root will be packed and installed as regular dependencies instead of
       creating a symlink. This option has no effect on workspaces.

   See Also
       • npm help dedupe

       • npm help ls

       • npm help update

       • npm help install

                                                                     July 2022                                                   NPM-FIND-DUPES(1)

------------------------------------------------------------
[ npm fund --help 2>&1 ]
Retrieve funding information

Usage:
npm fund [<package-spec>]

Options:
[--json] [--no-browser|--browser <browser>] [--no-unicode]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[--which <fundingSourceNumber>]

Run "npm help fund" for more info

------------------------------
[ man npm fund 2>&1 ]
NPM-FUND(1)                                                                                                                            NPM-FUND(1)

NAME
       npm-fund - Retrieve funding information

   Synopsis
         npm fund [<package-spec>]

   Description
       This command retrieves information on how to fund the dependencies of a given project. If no package name is provided, it will list all
       dependencies that are looking for funding in a tree structure, listing the type of funding and the url to visit. If a package name is
       provided then it tries to open its funding url using the --browser config param; if there are multiple funding sources for the package, the
       user will be instructed to pass the --which option to disambiguate.

       The list will avoid duplicated entries and will stack all packages that share the same url as a single entry. Thus, the list does not have
       the same shape of the output from npm ls.

   Example
   Workspaces support
       It's possible to filter the results to only include a single workspace and its dependencies using the workspace config option.

   Example:
       Here's an example running npm fund in a project with a configured workspace a:

         $ npm fund
         test-workspaces-fund@1.0.0
         +-- https://example.com/a
         | | `-- a@1.0.0
         | `-- https://example.com/maintainer
         |     `-- foo@1.0.0
         +-- https://example.com/npmcli-funding
         |   `-- @npmcli/test-funding
         `-- https://example.com/org
             `-- bar@2.0.0

       And here is an example of the expected result when filtering only by a specific workspace a in the same project:

         $ npm fund -w a
         test-workspaces-fund@1.0.0
         `-- https://example.com/a
           | `-- a@1.0.0
           `-- https://example.com/maintainer
               `-- foo@2.0.0

   Configuration
   json
       • Default: false

       • Type: Boolean

       Whether or not to output JSON data, rather than the normal output.

       • In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

       Not supported by all npm commands.

   browser
       • Default: OS X: "open", Windows: "start", Others: "xdg-open"

       • Type: null, Boolean, or String

       The browser that is called by npm commands to open websites.

       Set to false to suppress browser behavior and instead print urls to terminal.

       Set to true to use default system URL opener.

   unicode
       • Default: false on windows, true on mac/unix systems with a unicode locale, as defined by the LC_ALL, LC_CTYPE, or LANG environment
         variables.

       • Type: Boolean

       When set to true, npm uses unicode characters in the tree output. When false, it uses ascii characters instead of unicode glyphs.

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   which
       • Default: null

       • Type: null or Number

       If there are multiple funding sources, which 1-indexed source URL to open.

See Also
       • npm help package spec

       • npm help install

       • npm help docs

       • npm help ls

       • npm help config

       • npm help workspaces

                                                                     July 2022                                                         NPM-FUND(1)

------------------------------------------------------------
[ npm get --help 2>&1 ]
Get a value from the npm configuration

Usage:
npm get [<key> ...] (See `npm config`)

Run "npm help get" for more info

------------------------------
[ man npm get 2>&1 ]
NPM(1)                                                                                                                                      NPM(1)

NAME
       npm - javascript package manager

   Synopsis
   Version
       8.15.0

   Description
       npm is the package manager for the Node JavaScript platform.  It puts modules in place so that node can find them, and manages dependency
       conflicts intelligently.

       It is extremely configurable to support a variety of use cases.  Most commonly, you use it to publish, discover, install, and develop node
       programs.

       Run npm help to get a list of available commands.

   Important
       npm comes preconfigured to use npm's public registry at https://registry.npmjs.org by default. Use of the npm public registry is subject to
       terms of use available at https://docs.npmjs.com/policies/terms.

       You can configure npm to use any compatible registry you like, and even run your own registry. Use of someone else's registry is governed
       by their terms of use.

   Introduction
       You probably got npm because you want to install stuff.

       The very first thing you will most likely want to run in any node program is npm install to install its dependencies.

       You can also run npm install blerg to install the latest version of "blerg".  Check out npm help install for more info.  It can do a lot of
       stuff.

       Use the npm search command to show everything that's available in the public registry.  Use npm ls to show everything you've installed.

   Dependencies
       If a package lists a dependency using a git URL, npm will install that dependency using the git https://github.com/git-guides/install-git
       command and will generate an error if it is not installed.

       If one of the packages npm tries to install is a native node module and requires compiling of C++ Code, npm will use node-gyp
       https://github.com/nodejs/node-gyp for that task.  For a Unix system, node-gyp https://github.com/nodejs/node-gyp needs Python, make and a
       buildchain like GCC. On Windows, Python and Microsoft Visual Studio C++ are needed. For more information visit the node-gyp repository
       https://github.com/nodejs/node-gyp and the node-gyp Wiki https://github.com/nodejs/node-gyp/wiki.

   Directories
       See npm help folders to learn about where npm puts stuff.

       In particular, npm has two modes of operation:

       • local mode: npm installs packages into the current project directory, which defaults to the current working directory.  Packages install
         to ./node_modules, and bins to ./node_modules/.bin.

       • global mode: npm installs packages into the install prefix at $npm_config_prefix/lib/node_modules and bins to $npm_config_prefix/bin.

       Local mode is the default.  Use -g or --global on any command to run in global mode instead.

   Developer Usage
       If you're using npm to develop and publish your code, check out the following help topics:

       • json: Make a package.json file.  See npm help package.json.

       • link: Links your current working code into Node's path, so that you don't have to reinstall every time you make a change.  Use npm help
         npm link to do this.

       • install: It's a good idea to install things if you don't need the symbolic link.  Especially, installing other peoples code from the
         registry is done via npm help install

       • adduser: Create an account or log in.  When you do this, npm will store credentials in the user config file.

       • publish: Use the npm help publish command to upload your code to the registry.

   Configuration
       npm is extremely configurable.  It reads its configuration options from 5 places.

       • Command line switches: Set a config with --key val.  All keys take a value, even if they are booleans (the config parser doesn't know
         what the options are at the time of parsing).  If you do not provide a value (--key) then the option is set to boolean true.

       • Environment Variables: Set any config by prefixing the name in an environment variable with npm_config_.  For example, export
         npm_config_key=val.

       • User Configs: The file at $HOME/.npmrc is an ini-formatted list of configs.  If present, it is parsed.  If the userconfig option is set
         in the cli or env, that file will be used instead.

       • Global Configs: The file found at ./etc/npmrc (relative to the global prefix will be parsed if it is found.  See npm help prefix for more
         info on the global prefix.  If the globalconfig option is set in the cli, env, or user config, then that file is parsed instead.

       • Defaults: npm's default configuration options are defined in lib/utils/config-defs.js.  These must not be changed.

       See npm help config for much much more information.

   Contributions
       Patches welcome!

       If you would like to help, but don't know what to work on, read the contributing guidelines
       https://github.com/npm/cli/blob/latest/CONTRIBUTING.md and check the issues list.

   Bugs
       When you find issues, please report them: https://github.com/npm/cli/issues

       Please be sure to follow the template and bug reporting guidelines.

   Feature Requests
       Discuss new feature ideas on our discussion forum:

       • https://github.com/npm/feedback

       Or suggest formal RFC proposals:

       • https://github.com/npm/rfcs

   See Also
       • npm help help

       • npm help package.json

       • npm help npmrc

       • npm help config

       • npm help install

       • npm help prefix

       • npm help publish

                                                                     July 2022                                                              NPM(1)
No manual entry for get

------------------------------------------------------------
[ npm help --help 2>&1 ]
Get help on npm

Usage:
npm help <term> [<terms..>]

Options:
[--viewer <viewer>]

alias: hlep

Run "npm help help" for more info

------------------------------
[ man npm help 2>&1 ]
NPM-HELP(1)                                                                                                                            NPM-HELP(1)

NAME
       npm-help - Get help on npm

   Synopsis
         npm help <term> [<terms..>]

         alias: hlep

       Note: This command is unaware of workspaces.

   Description
       If supplied a topic, then show the appropriate documentation page.

       If the topic does not exist, or if multiple terms are provided, then npm will run the help-search command to find a match.  Note that, if
       help-search finds a single subject, then it will run help on that topic, so unique matches are equivalent to specifying a topic name.

   Configuration
   viewer
       • Default: "man" on Posix, "browser" on Windows

       • Type: String

       The program to use to view help content.

       Set to "browser" to view html help content in the default web browser.

   See Also
       • npm help npm

       • npm help folders

       • npm help config

       • npm help npmrc

       • npm help package.json

       • npm help help-search

                                                                     July 2022                                                         NPM-HELP(1)

------------------------------------------------------------
[ npm hook --help 2>&1 ]
Manage registry hooks

Usage:
npm hook add <pkg> <url> <secret> [--type=<type>]
npm hook ls [pkg]
npm hook rm <id>
npm hook update <id> <url> <secret>

Options:
[--registry <registry>] [--otp <otp>]

Run "npm help hook" for more info

------------------------------
[ man npm hook 2>&1 ]
NPM-HOOK(1)                                                                                                                            NPM-HOOK(1)

NAME
       npm-hook - Manage registry hooks

   Synopsis
         npm hook add <pkg> <url> <secret> [--type=<type>]
         npm hook ls [pkg]
         npm hook rm <id>
         npm hook update <id> <url> <secret>

       Note: This command is unaware of workspaces.

   Description
       Allows you to manage npm hooks https://blog.npmjs.org/post/145260155635/introducing-hooks-get-notifications-of-npm, including adding,
       removing, listing, and updating.

       Hooks allow you to configure URL endpoints that will be notified whenever a change happens to any of the supported entity types. Three
       different types of entities can be watched by hooks: packages, owners, and scopes.

       To create a package hook, simply reference the package name.

       To create an owner hook, prefix the owner name with ~ (as in, ~youruser).

       To create a scope hook, prefix the scope name with @ (as in, @yourscope).

       The hook id used by update and rm are the IDs listed in npm hook ls for that particular hook.

       The shared secret will be sent along to the URL endpoint so you can verify the request came from your own configured hook.

   Example
       Add a hook to watch a package for changes:

         $ npm hook add lodash https://example.com/ my-shared-secret

       Add a hook to watch packages belonging to the user substack:

         $ npm hook add ~substack https://example.com/ my-shared-secret

       Add a hook to watch packages in the scope @npm

         $ npm hook add @npm https://example.com/ my-shared-secret

       List all your active hooks:

         $ npm hook ls

       List your active hooks for the lodash package:

         $ npm hook ls lodash

       Update an existing hook's url:

         $ npm hook update id-deadbeef https://my-new-website.here/

       Remove a hook:

         $ npm hook rm id-deadbeef

   Configuration
   registry
       • Default: "https://registry.npmjs.org/"

       • Type: URL

       The base URL of the npm registry.

   otp
       • Default: null

       • Type: null or String

       This is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with npm access.

       If not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.

   See Also
       • "Introducing Hooks" blog post https://blog.npmjs.org/post/145260155635/introducing-hooks-get-notifications-of-npm

                                                                     July 2022                                                         NPM-HOOK(1)

------------------------------------------------------------
[ npm init --help 2>&1 ]
Create a package.json file

Usage:
npm init <package-spec> (same as `npx <package-spec>)
npm init <@scope> (same as `npx <@scope>/create`)

Options:
[-y|--yes] [-f|--force] [--scope <@scope>]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces] [--no-workspaces-update] [--include-workspace-root]

aliases: create, innit

Run "npm help init" for more info

------------------------------
[ man npm init 2>&1 ]
NPM-INIT(1)                                                                                                                            NPM-INIT(1)

NAME
       npm-init - Create a package.json file

   Synopsis
         npm init <package-spec> (same as `npx <package-spec>)
         npm init <@scope> (same as `npx <@scope>/create`)

         aliases: create, innit

   Description
       npm init <initializer> can be used to set up a new or existing npm package.

       initializer in this case is an npm package named create-<initializer>, which will be installed by npm help npm-exec, and then have its main
       bin executed -- presumably creating or updating package.json and running any other initialization-related operations.

       The init command is transformed to a corresponding npm exec operation as follows:

       • npm init foo -> npm exec create-foo

       • npm init @usr/foo -> npm exec @usr/create-foo

       • npm init @usr -> npm exec @usr/create

       If the initializer is omitted (by just calling npm init), init will fall back to legacy init behavior. It will ask you a bunch of
       questions, and then write a package.json for you. It will attempt to make reasonable guesses based on existing fields, dependencies, and
       options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip
       the questionnaire altogether. If you pass --scope, it will create a scoped package.

       Note: if a user already has the create-<initializer> package globally installed, that will be what npm init uses.  If you want npm to use
       the latest version, or another specific version you must specify it:

       • npm init foo@latest # fetches and runs the latest create-foo from
           the registry

       • npm init foo@1.2.3 #  runs create-foo@1.2.3 specifically

   Forwarding additional options
       Any additional options will be passed directly to the command, so npm init foo -- --hello will map to npm exec -- create-foo --hello.

       To better illustrate how options are forwarded, here's a more evolved example showing options passed to both the npm cli and a create
       package, both following commands are equivalent:

       • npm init foo -y --registry=<url> -- --hello -a

       • npm exec -y --registry=<url> -- create-foo --hello -a

   Examples
       Create a new React-based project using create-react-app https://npm.im/create-react-app:

         $ npm init react-app ./my-react-app

       Create a new esm-compatible package using create-esm https://npm.im/create-esm:

         $ mkdir my-esm-lib && cd my-esm-lib
         $ npm init esm --yes

       Generate a plain old package.json using legacy init:

         $ mkdir my-npm-pkg && cd my-npm-pkg
         $ git init
         $ npm init

       Generate it without having it ask any questions:

         $ npm init -y

   Workspaces support
       It's possible to create a new workspace within your project by using the workspace config option. When using npm init -w <dir> the cli will
       create the folders and boilerplate expected while also adding a reference to your project package.json "workspaces": [] property in order
       to make sure that new generated workspace is properly set up as such.

       Given a project with no workspaces, e.g:

         .
         +-- package.json

       You may generate a new workspace using the legacy init:

         $ npm init -w packages/a

       That will generate a new folder and package.json file, while also updating your top-level package.json to add the reference to this new
       workspace:

         .
         +-- package.json
         `-- packages
            `-- a
                `-- package.json

       The workspaces init also supports the npm init <initializer> -w <dir> syntax, following the same set of rules explained earlier in the
       initial Description section of this page. Similar to the previous example of creating a new React-based project using create-react-app
       https://npm.im/create-react-app, the following syntax will make sure to create the new react app as a nested workspace within your project
       and configure your package.json to recognize it as such:

         npm init -w packages/my-react-app react-app .

       This will make sure to generate your react app as expected, one important consideration to have in mind is that npm exec is going to be run
       in the context of the newly created folder for that workspace, and that's the reason why in this example the initializer uses the
       initializer name followed with a dot to represent the current directory in that context, e.g: react-app .:

         .
         +-- package.json
         `-- packages
            +-- a
            |   `-- package.json
            `-- my-react-app
                +-- README
                +-- package.json
                `-- ...

   Configuration
   yes
       • Default: null

       • Type: null or Boolean

       Automatically answer "yes" to any prompts that npm might print on the command line.

   force
       • Default: false

       • Type: Boolean

       Removes various protections against unfortunate side effects, common mistakes, unnecessary performance degradation, and malicious input.

       • Allow clobbering non-npm files in global installs.

       • Allow the npm version command to work on an unclean git repository.

       • Allow deleting the cache folder with npm cache clean.

       • Allow installing packages that have an engines declaration requiring a different version of npm.

       • Allow installing packages that have an engines declaration requiring a different version of node, even if --engine-strict is enabled.

       • Allow npm audit fix to install modules outside your stated dependency range (including SemVer-major changes).

       • Allow unpublishing all versions of a published package.

       • Allow conflicting peerDependencies to be installed in the root project.

       • Implicitly set --yes during npm init.

       • Allow clobbering existing values in npm pkg

       • Allow unpublishing of entire packages (not just a single version).

       If you don't have a clear idea of what you want to do, it is strongly recommended that you do not use this option!

   scope
       • Default: the scope of the current project, if any, or ""

       • Type: String

       Associate an operation with a scope for a scoped registry.

       Useful when logging in to or out of a private registry:

         # log in, linking the scope to the custom registry
         npm login --scope=@mycorp --registry=https://registry.mycorp.com

         # log out, removing the link and the auth token
         npm logout --scope=@mycorp

       This will cause @mycorp to be mapped to the registry for future installation of packages specified according to the pattern
       @mycorp/package.

       This will also cause npm init to create a scoped package.

         # accept all defaults, and create a package named "@foo/whatever",
         # instead of just named "whatever"
         npm init --scope=@foo --yes

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

   workspaces-update
       • Default: true

       • Type: Boolean

       If set to true, the npm cli will run an update after operations that may possibly change the workspaces installed to the node_modules
       folder.

   include-workspace-root
       • Default: false

       • Type: Boolean

       Include the workspace root when workspaces are enabled for a command.

       When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate
       only on the specified workspaces, and not on the root project.

       This value is not exported to the environment for child processes.

   See Also
       • npm help package spec

       • init-package-json module http://npm.im/init-package-json

       • npm help package.json

       • npm help version

       • npm help scope

       • npm help exec

       • npm help workspaces

                                                                     July 2022                                                         NPM-INIT(1)

------------------------------------------------------------
[ npm install --help 2>&1 ]
Install a package

Usage:
npm install [<package-spec> ...]

Options:
[-S|--save|--no-save|--save-prod|--save-dev|--save-optional|--save-peer|--save-bundle]
[-E|--save-exact] [-g|--global] [--global-style] [--legacy-bundling]
[--omit <dev|optional|peer> [--omit <dev|optional|peer> ...]]
[--strict-peer-deps] [--no-package-lock] [--foreground-scripts]
[--ignore-scripts] [--no-audit] [--no-bin-links] [--no-fund] [--dry-run]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces] [--include-workspace-root] [--install-links]

aliases: add, i, in, ins, inst, insta, instal, isnt, isnta, isntal, isntall

Run "npm help install" for more info

------------------------------
[ man npm install 2>&1 ]
NPM-INSTALL(1)                                                                                                                      NPM-INSTALL(1)

NAME
       npm-install - Install a package

   Synopsis
         npm install [<package-spec> ...]

         aliases: add, i, in, ins, inst, insta, instal, isnt, isnta, isntal, isntall

   Description
       This command installs a package and any packages that it depends on. If the package has a package-lock, or an npm shrinkwrap file, or a
       yarn lock file, the installation of dependencies will be driven by that, respecting the following order of precedence:

       • npm-shrinkwrap.json

       • package-lock.json

       • yarn.lock

       See npm help package-lock.json and npm help shrinkwrap.

       A package is:

       • a) a folder containing a program described by a npm help package.json file

       • b) a gzipped tarball containing (a)

       • c) a url that resolves to (b)

       • d) a <name>@<version> that is published on the registry (see npm help registry) with (c)

       • e) a <name>@<tag> (see npm help dist-tag) that points to (d)

       • f) a <name> that has a "latest" tag satisfying (e)

       • g) a <git remote url> that resolves to (a)

       Even if you never publish your package, you can still get a lot of benefits of using npm if you just want to write a node program (a), and
       perhaps if you also want to be able to easily install it elsewhere after packing it up into a tarball (b).

       • npm install (in a package directory, no arguments):
           Install the dependencies to the local node_modules folder.
           In global mode (ie, with -g or --global appended to the command),
           it installs the current package context (ie, the current working
           directory) as a global package.
           By default, npm install will install all modules listed as
           dependencies in npm help package.json.
           With the --production flag (or when the NODE_ENV environment
           variable is set to production), npm will not install modules listed
           in devDependencies. To install all modules listed in both
           dependencies and devDependencies when NODE_ENV environment
           variable is set to production, you can use --production=false.  NOTE: The --production flag has no particular meaning when adding a
           dependency to a project.

       • npm install <folder>:
           If <folder> sits inside the root of your project, its dependencies will be installed and may
           be hoisted to the top-level node_modules as they would for other
           types of dependencies. If <folder> sits outside the root of your project,
           npm will not install the package dependencies in the directory <folder>,
           but it will create a symlink to <folder>.  NOTE: If you want to install the content of a directory like a package from the registry
         instead of creating a link, you would need to use the --install-links option.

           Example:

           npm install ../../other-package --install-links
           npm install ./sub-package

       • npm install <tarball file>:
           Install a package that is sitting on the filesystem.  Note: if you just
           want to link a dev directory into your npm root, you can do this more
           easily by using npm help link.
           Tarball requirements:

         • The filename must use .tar, .tar.gz, or .tgz as the extension.

         • The package contents should reside in a subfolder inside the tarball (usually it is called package/). npm strips one directory layer
           when installing the package (an equivalent of tar x --strip-components=1 is run).

         • The package must contain a package.json file with name and version properties.  Example:

           npm install ./package.tgz

       • npm install <tarball url>:
           Fetch the tarball url, and then install it.  In order to distinguish between
           this and other options, the argument must start with "http://" or "https://"
           Example:

           npm install https://github.com/indexzero/forever/tarball/v0.5.6

       • npm install [<@scope>/]<name>:
           Do a <name>@<tag> install, where <tag> is the "tag" config. (See
           npm help config. The config's default value is latest.)
           In most cases, this will install the version of the modules tagged as
           latest on the npm registry.
           Example:

           npm install sax
         npm install saves any specified packages into dependencies by default.
         Additionally, you can control where and how they get saved with some
         additional flags:

              • -P, --save-prod: Package will appear in your dependencies. This is the default unless -D or -O are present.

              • -D, --save-dev: Package will appear in your devDependencies.

              • -O, --save-optional: Package will appear in your optionalDependencies.

              • --no-save: Prevents saving to dependencies.  When using any of the above options to save dependencies to your package.json, there
                are two additional, optional flags:

              • -E, --save-exact: Saved dependencies will be configured with an exact version rather than using npm's default semver range
                operator.

              • -B, --save-bundle: Saved dependencies will also be added to your bundleDependencies list.  Further, if you have an
                npm-shrinkwrap.json or package-lock.json then it will be updated as well.  <scope> is optional. The package will be downloaded
                from the registry associated with the specified scope. If no registry is associated with the given scope the default registry is
                assumed. See npm help scope.  Note: if you do not include the @-symbol on your scope name, npm will interpret this as a GitHub
                repository instead, see below. Scopes names must also be followed by a slash.  Examples:

                npm install sax
                npm install githubname/reponame
                npm install @myorg/privatepackage
                npm install node-tap --save-dev
                npm install dtrace-provider --save-optional
                npm install readable-stream --save-exact
                npm install ansi-regex --save-bundle

              • Note*: If there is a file or folder named <name> in the current working directory, then it will try to install that, and only try
                to fetch the package by name if it is not valid.

       • npm install <alias>@npm:<name>:
           Install a package under a custom alias. Allows multiple versions of
           a same-name package side-by-side, more convenient import names for
           packages with otherwise long ones, and using git forks replacements
           or forked npm packages as replacements. Aliasing works only on your
           project and does not rename packages in transitive dependencies.
           Aliases should follow the naming conventions stated in
           validate-npm-package-name https://www.npmjs.com/package/validate-npm-package-name#naming-rules.
           Examples:

           npm install my-react@npm:react
           npm install jquery2@npm:jquery@2
           npm install jquery3@npm:jquery@3
           npm install npa@npm:npm-package-arg

       • npm install [<@scope>/]<name>@<tag>:
           Install the version of the package that is referenced by the specified tag.
           If the tag does not exist in the registry data for that package, then this
           will fail.
           Example:

           npm install sax@latest
           npm install @myorg/mypackage@latest

       • npm install [<@scope>/]<name>@<version>:
           Install the specified version of the package.  This will fail if the
           version has not been published to the registry.
           Example:

           npm install sax@0.1.1
           npm install @myorg/privatepackage@1.5.0

       • npm install [<@scope>/]<name>@<version range>:
           Install a version of the package matching the specified version range.
           This will follow the same rules for resolving dependencies described in
           npm help package.json.
           Note that most version ranges must be put in quotes so that your shell
           will treat it as a single argument.
           Example:

           npm install sax@">=0.1.0 <0.2.0"
           npm install @myorg/privatepackage@"16 - 17"

       • npm install <git remote url>:
           Installs the package from the hosted git provider, cloning it with
           git.  For a full git remote url, only that URL will be attempted.

           <protocol>://[<user>[:<password>]@]<hostname>[:<port>][:][/]<path>[#<commit-ish> | #semver:<semver>]
         <protocol> is one of git, git+ssh, git+http, git+https, or
         git+file.
         If #<commit-ish> is provided, it will be used to clone exactly that
         commit. If the commit-ish has the format #semver:<semver>, <semver>
         can be any valid semver range or exact version, and npm will look for
         any tags or refs matching that range in the remote repository, much as
         it would for a registry dependency. If neither #<commit-ish> or
         #semver:<semver> is specified, then the default branch of the
         repository is used.
         If the repository makes use of submodules, those submodules will be
         cloned as well.
         If the package being installed contains a prepare script, its
         dependencies and devDependencies will be installed, and the prepare
         script will be run, before the package is packaged and installed.
         The following git environment variables are recognized by npm and will
         be added to the environment when running git:

              • GIT_ASKPASS

              • GIT_EXEC_PATH

              • GIT_PROXY_COMMAND

              • GIT_SSH

              • GIT_SSH_COMMAND

              • GIT_SSL_CAINFO

              • GIT_SSL_NO_VERIFY See the git man page for details.  Examples:

                npm install git+ssh://git@github.com:npm/cli.git#v1.0.27
                npm install git+ssh://git@github.com:npm/cli#pull/273
                npm install git+ssh://git@github.com:npm/cli#semver:^5.0
                npm install git+https://isaacs@github.com/npm/cli.git
                npm install git://github.com/npm/cli.git#v1.0.27
                GIT_SSH_COMMAND='ssh -i ~/.ssh/custom_ident' npm install git+ssh://git@github.com:npm/cli.git

       • npm install <githubname>/<githubrepo>[#<commit-ish>]:

       • npm install github:<githubname>/<githubrepo>[#<commit-ish>]:
           Install the package at https://github.com/githubname/githubrepo by
           attempting to clone it using git.
           If #<commit-ish> is provided, it will be used to clone exactly that
           commit. If the commit-ish has the format #semver:<semver>, <semver>
           can be any valid semver range or exact version, and npm will look for
           any tags or refs matching that range in the remote repository, much as
           it would for a registry dependency. If neither #<commit-ish> or
           #semver:<semver> is specified, then master is used.
           As with regular git dependencies, dependencies and devDependencies
           will be installed if the package has a prepare script before the
           package is done installing.
           Examples:

           npm install mygithubuser/myproject
           npm install github:mygithubuser/myproject

       • npm install gist:[<githubname>/]<gistID>[#<commit-ish>|#semver:<semver>]:
           Install the package at https://gist.github.com/gistID by attempting to
           clone it using git. The GitHub username associated with the gist is
           optional and will not be saved in package.json.
           As with regular git dependencies, dependencies and devDependencies will
           be installed if the package has a prepare script before the package is
           done installing.
           Example:

           npm install gist:101a11beef

       • npm install bitbucket:<bitbucketname>/<bitbucketrepo>[#<commit-ish>]:
           Install the package at https://bitbucket.org/bitbucketname/bitbucketrepo
           by attempting to clone it using git.
           If #<commit-ish> is provided, it will be used to clone exactly that
           commit. If the commit-ish has the format #semver:<semver>, <semver> can
           be any valid semver range or exact version, and npm will look for any tags
           or refs matching that range in the remote repository, much as it would for a
           registry dependency. If neither #<commit-ish> or #semver:<semver> is
           specified, then master is used.
           As with regular git dependencies, dependencies and devDependencies will
           be installed if the package has a prepare script before the package is
           done installing.
           Example:

           npm install bitbucket:mybitbucketuser/myproject

       • npm install gitlab:<gitlabname>/<gitlabrepo>[#<commit-ish>]:
           Install the package at https://gitlab.com/gitlabname/gitlabrepo
           by attempting to clone it using git.
           If #<commit-ish> is provided, it will be used to clone exactly that
           commit. If the commit-ish has the format #semver:<semver>, <semver> can
           be any valid semver range or exact version, and npm will look for any tags
           or refs matching that range in the remote repository, much as it would for a
           registry dependency. If neither #<commit-ish> or #semver:<semver> is
           specified, then master is used.
           As with regular git dependencies, dependencies and devDependencies will
           be installed if the package has a prepare script before the package is
           done installing.
           Example:

           npm install gitlab:mygitlabuser/myproject
           npm install gitlab:myusr/myproj#semver:^5.0

       You may combine multiple arguments and even multiple types of arguments.  For example:

         npm install sax@">=0.1.0 <0.2.0" bench supervisor

       The --tag argument will apply to all of the specified install targets. If a tag with the given name exists, the tagged version is preferred
       over newer versions.

       The --dry-run argument will report in the usual way what the install would have done without actually installing anything.

       The --package-lock-only argument will only update the package-lock.json, instead of checking node_modules and downloading dependencies.

       The -f or --force argument will force npm to fetch remote resources even if a local copy exists on disk.

         npm install sax --force

   Configuration
       See the npm help config help doc.  Many of the configuration params have some effect on installation, since that's most of what npm does.

       These are some of the most common options related to installation.

   save
       • Default: true unless when using npm update where it defaults to false

       • Type: Boolean

       Save installed packages to a package.json file as dependencies.

       When used with the npm rm command, removes the dependency from package.json.

       Will also prevent writing to package-lock.json if set to false.

   save-exact
       • Default: false

       • Type: Boolean

       Dependencies saved to package.json will be configured with an exact version rather than using npm's default semver range operator.

   global
       • Default: false

       • Type: Boolean

       Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See npm help
       folders for more on the differences in behavior.

       • packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.

       • bin files are linked to {prefix}/bin

       • man pages are linked to {prefix}/share/man

   global-style
       • Default: false

       • Type: Boolean

       Causes npm to install the package into your local node_modules folder with the same layout it uses with the global node_modules folder.
       Only your direct dependencies will show in node_modules and everything they depend on will be flattened in their node_modules folders. This
       obviously will eliminate some deduping. If used with legacy-bundling, legacy-bundling will be preferred.

   legacy-bundling
       • Default: false

       • Type: Boolean

       Causes npm to install the package such that versions of npm prior to 1.4, such as the one included with node 0.8, can install the package.
       This eliminates all automatic deduping. If used with global-style this option will be preferred.

   omit
       • Default: 'dev' if the NODE_ENV environment variable is set to 'production', otherwise empty.

       • Type: "dev", "optional", or "peer" (can be set multiple times)

       Dependency types to omit from the installation tree on disk.

       Note that these dependencies are still resolved and added to the package-lock.json or npm-shrinkwrap.json file. They are just not
       physically installed on disk.

       If a package type appears in both the --include and --omit lists, then it will be included.

       If the resulting omit list includes 'dev', then the NODE_ENV environment variable will be set to 'production' for all lifecycle scripts.

   strict-peer-deps
       • Default: false

       • Type: Boolean

       If set to true, and --legacy-peer-deps is not set, then any conflicting peerDependencies will be treated as an install failure, even if npm
       could reasonably guess the appropriate resolution based on non-peer dependency relationships.

       By default, conflicting peerDependencies deep in the dependency graph will be resolved using the nearest non-peer dependency specification,
       even if doing so will result in some packages receiving a peer dependency outside the range set in their package's peerDependencies object.

       When such and override is performed, a warning is printed, explaining the conflict and the packages involved. If --strict-peer-deps is set,
       then this warning is treated as a failure.

   package-lock
       • Default: true

       • Type: Boolean

       If set to false, then ignore package-lock.json files when installing. This will also prevent writing package-lock.json if save is true.

       This configuration does not affect npm ci.

   foreground-scripts
       • Default: false

       • Type: Boolean

       Run all build scripts (ie, preinstall, install, and postinstall) scripts for installed packages in the foreground process, sharing standard
       input, output, and error with the main npm process.

       Note that this will generally make installs run slower, and be much noisier, but can be useful for debugging.

   ignore-scripts
       • Default: false

       • Type: Boolean

       If true, npm does not run scripts specified in package.json files.

       Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script
       will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.

   audit
       • Default: true

       • Type: Boolean

       When "true" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See
       the documentation for npm help audit for details on what is submitted.

   bin-links
       • Default: true

       • Type: Boolean

       Tells npm to create symlinks (or .cmd shims on Windows) for package executables.

       Set to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on
       ostensibly Unix systems.

   fund
       • Default: true

       • Type: Boolean

       When "true" displays the message at the end of each npm install acknowledging the number of dependencies looking for funding. See npm help
       npm fund for details.

   dry-run
       • Default: false

       • Type: Boolean

       Indicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any
       of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack and publish.

       Note: This is NOT honored by other network related commands, eg dist-tags, owner, etc.

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

   include-workspace-root
       • Default: false

       • Type: Boolean

       Include the workspace root when workspaces are enabled for a command.

       When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate
       only on the specified workspaces, and not on the root project.

       This value is not exported to the environment for child processes.

   install-links
       • Default: false

       • Type: Boolean

       When set file: protocol dependencies that exist outside of the project root will be packed and installed as regular dependencies instead of
       creating a symlink. This option has no effect on workspaces.

   Algorithm
       Given a package{dep} structure: A{B,C}, B{C}, C{D}, the npm install algorithm produces:

         A
         +-- B
         +-- C
         +-- D

       That is, the dependency from B to C is satisfied by the fact that A already caused C to be installed at a higher level. D is still
       installed at the top level because nothing conflicts with it.

       For A{B,C}, B{C,D@1}, C{D@2}, this algorithm produces:

         A
         +-- B
         +-- C
            `-- D@2
         +-- D@1

       Because B's D@1 will be installed in the top-level, C now has to install D@2 privately for itself. This algorithm is deterministic, but
       different trees may be produced if two dependencies are requested for installation in a different order.

       See npm help folders for a more detailed description of the specific folder structures that npm creates.

   See Also
       • npm help folders

       • npm help update

       • npm help audit

       • npm help fund

       • npm help link

       • npm help rebuild

       • npm help scripts

       • npm help config

       • npm help npmrc

       • npm help registry

       • npm help dist-tag

       • npm help uninstall

       • npm help shrinkwrap

       • npm help package.json

       • npm help workspaces

                                                                     July 2022                                                      NPM-INSTALL(1)

------------------------------------------------------------
[ npm install-ci-test --help 2>&1 ]
Install a project with a clean slate and run tests

Usage:
npm install-ci-test

Options:
[--no-audit] [--foreground-scripts] [--ignore-scripts]
[--script-shell <script-shell>]

alias: cit

Run "npm help install-ci-test" for more info

------------------------------
[ man npm install-ci-test 2>&1 ]
NPM-INSTALL-CI-TEST(1)                                                                                                      NPM-INSTALL-CI-TEST(1)

NAME
       npm-install-ci-test - Install a project with a clean slate and run tests

   Synopsis
         npm install-ci-test

         alias: cit

   Description
       This command runs npm ci followed immediately by npm test.

   Configuration
   audit
       • Default: true

       • Type: Boolean

       When "true" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See
       the documentation for npm help audit for details on what is submitted.

   foreground-scripts
       • Default: false

       • Type: Boolean

       Run all build scripts (ie, preinstall, install, and postinstall) scripts for installed packages in the foreground process, sharing standard
       input, output, and error with the main npm process.

       Note that this will generally make installs run slower, and be much noisier, but can be useful for debugging.

   ignore-scripts
       • Default: false

       • Type: Boolean

       If true, npm does not run scripts specified in package.json files.

       Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script
       will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.

   script-shell
       • Default: '/bin/sh' on POSIX systems, 'cmd.exe' on Windows

       • Type: null or String

       The shell to use for scripts run with the npm exec, npm run and npm init <package-spec> commands.

   See Also
       • npm help install-test

       • npm help ci

       • npm help test

                                                                     July 2022                                              NPM-INSTALL-CI-TEST(1)

------------------------------------------------------------
[ npm install-test --help 2>&1 ]
Install package(s) and run tests

Usage:
npm install-test [<package-spec> ...]

Options:
[-S|--save|--no-save|--save-prod|--save-dev|--save-optional|--save-peer|--save-bundle]
[-E|--save-exact] [-g|--global] [--global-style] [--legacy-bundling]
[--omit <dev|optional|peer> [--omit <dev|optional|peer> ...]]
[--strict-peer-deps] [--no-package-lock] [--foreground-scripts]
[--ignore-scripts] [--no-audit] [--no-bin-links] [--no-fund] [--dry-run]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces] [--include-workspace-root] [--install-links]

alias: it

Run "npm help install-test" for more info

------------------------------
[ man npm install-test 2>&1 ]
NPM-INSTALL-TEST(1)                                                                                                            NPM-INSTALL-TEST(1)

NAME
       npm-install-test - Install package(s) and run tests

   Synopsis
         npm install-test [<package-spec> ...]

         alias: it

   Description
       This command runs an npm install followed immediately by an npm test. It takes exactly the same arguments as npm install.

   Configuration
   save
       • Default: true unless when using npm update where it defaults to false

       • Type: Boolean

       Save installed packages to a package.json file as dependencies.

       When used with the npm rm command, removes the dependency from package.json.

       Will also prevent writing to package-lock.json if set to false.

   save-exact
       • Default: false

       • Type: Boolean

       Dependencies saved to package.json will be configured with an exact version rather than using npm's default semver range operator.

   global
       • Default: false

       • Type: Boolean

       Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See npm help
       folders for more on the differences in behavior.

       • packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.

       • bin files are linked to {prefix}/bin

       • man pages are linked to {prefix}/share/man

   global-style
       • Default: false

       • Type: Boolean

       Causes npm to install the package into your local node_modules folder with the same layout it uses with the global node_modules folder.
       Only your direct dependencies will show in node_modules and everything they depend on will be flattened in their node_modules folders. This
       obviously will eliminate some deduping. If used with legacy-bundling, legacy-bundling will be preferred.

   legacy-bundling
       • Default: false

       • Type: Boolean

       Causes npm to install the package such that versions of npm prior to 1.4, such as the one included with node 0.8, can install the package.
       This eliminates all automatic deduping. If used with global-style this option will be preferred.

   omit
       • Default: 'dev' if the NODE_ENV environment variable is set to 'production', otherwise empty.

       • Type: "dev", "optional", or "peer" (can be set multiple times)

       Dependency types to omit from the installation tree on disk.

       Note that these dependencies are still resolved and added to the package-lock.json or npm-shrinkwrap.json file. They are just not
       physically installed on disk.

       If a package type appears in both the --include and --omit lists, then it will be included.

       If the resulting omit list includes 'dev', then the NODE_ENV environment variable will be set to 'production' for all lifecycle scripts.

   strict-peer-deps
       • Default: false

       • Type: Boolean

       If set to true, and --legacy-peer-deps is not set, then any conflicting peerDependencies will be treated as an install failure, even if npm
       could reasonably guess the appropriate resolution based on non-peer dependency relationships.

       By default, conflicting peerDependencies deep in the dependency graph will be resolved using the nearest non-peer dependency specification,
       even if doing so will result in some packages receiving a peer dependency outside the range set in their package's peerDependencies object.

       When such and override is performed, a warning is printed, explaining the conflict and the packages involved. If --strict-peer-deps is set,
       then this warning is treated as a failure.

   package-lock
       • Default: true

       • Type: Boolean

       If set to false, then ignore package-lock.json files when installing. This will also prevent writing package-lock.json if save is true.

       This configuration does not affect npm ci.

   foreground-scripts
       • Default: false

       • Type: Boolean

       Run all build scripts (ie, preinstall, install, and postinstall) scripts for installed packages in the foreground process, sharing standard
       input, output, and error with the main npm process.

       Note that this will generally make installs run slower, and be much noisier, but can be useful for debugging.

   ignore-scripts
       • Default: false

       • Type: Boolean

       If true, npm does not run scripts specified in package.json files.

       Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script
       will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.

   audit
       • Default: true

       • Type: Boolean

       When "true" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See
       the documentation for npm help audit for details on what is submitted.

   bin-links
       • Default: true

       • Type: Boolean

       Tells npm to create symlinks (or .cmd shims on Windows) for package executables.

       Set to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on
       ostensibly Unix systems.

   fund
       • Default: true

       • Type: Boolean

       When "true" displays the message at the end of each npm install acknowledging the number of dependencies looking for funding. See npm help
       npm fund for details.

   dry-run
       • Default: false

       • Type: Boolean

       Indicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any
       of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack and publish.

       Note: This is NOT honored by other network related commands, eg dist-tags, owner, etc.

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

   include-workspace-root
       • Default: false

       • Type: Boolean

       Include the workspace root when workspaces are enabled for a command.

       When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate
       only on the specified workspaces, and not on the root project.

       This value is not exported to the environment for child processes.

   install-links
       • Default: false

       • Type: Boolean

       When set file: protocol dependencies that exist outside of the project root will be packed and installed as regular dependencies instead of
       creating a symlink. This option has no effect on workspaces.

   See Also
       • npm help install

       • npm help install-ci-test

       • npm help test

                                                                     July 2022                                                 NPM-INSTALL-TEST(1)

------------------------------------------------------------
[ npm link --help 2>&1 ]
Symlink a package folder

Usage:
npm link [<package-spec>]

Options:
[-S|--save|--no-save|--save-prod|--save-dev|--save-optional|--save-peer|--save-bundle]
[-E|--save-exact] [-g|--global] [--global-style] [--legacy-bundling]
[--strict-peer-deps] [--no-package-lock]
[--omit <dev|optional|peer> [--omit <dev|optional|peer> ...]] [--ignore-scripts]
[--no-audit] [--no-bin-links] [--no-fund] [--dry-run]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces] [--include-workspace-root] [--install-links]

alias: ln

Run "npm help link" for more info

------------------------------
[ man npm link 2>&1 ]
NPM-LINK(1)                                                                                                                            NPM-LINK(1)

NAME
       npm-link - Symlink a package folder

   Synopsis
         npm link [<package-spec>]

         alias: ln

   Description
       This is handy for installing your own stuff, so that you can work on it and test iteratively without having to continually rebuild.

       Package linking is a two-step process.

       First, npm link in a package folder with no arguments will create a symlink in the global folder {prefix}/lib/node_modules/<package> that
       links to the package where the npm link command was executed. It will also link any bins in the package to {prefix}/bin/{name}.  Note that
       npm link uses the global prefix (see npm prefix -g for its value).

       Next, in some other location, npm link package-name will create a symbolic link from globally-installed package-name to node_modules/ of
       the current folder.

       Note that package-name is taken from package.json, not from the directory name.

       The package name can be optionally prefixed with a scope. See npm help scope.  The scope must be preceded by an @-symbol and followed by a
       slash.

       When creating tarballs for npm publish, the linked packages are "snapshotted" to their current state by resolving the symbolic links, if
       they are included in bundleDependencies.

       For example:

         cd ~/projects/node-redis    # go into the package directory
         npm link                    # creates global link
         cd ~/projects/node-bloggy   # go into some other package directory.
         npm link redis              # link-install the package

       Now, any changes to ~/projects/node-redis will be reflected in ~/projects/node-bloggy/node_modules/node-redis/. Note that the link should
       be to the package name, not the directory name for that package.

       You may also shortcut the two steps in one.  For example, to do the above use-case in a shorter way:

         cd ~/projects/node-bloggy  # go into the dir of your main project
         npm link ../node-redis     # link the dir of your dependency

       The second line is the equivalent of doing:

         (cd ../node-redis; npm link)
         npm link redis

       That is, it first creates a global link, and then links the global installation target into your project's node_modules folder.

       Note that in this case, you are referring to the directory name, node-redis, rather than the package name redis.

       If your linked package is scoped (see npm help scope) your link command must include that scope, e.g.

         npm link @myorg/privatepackage

   Caveat
       Note that package dependencies linked in this way are not saved to package.json by default, on the assumption that the intention is to have
       a link stand in for a regular non-link dependency.  Otherwise, for example, if you depend on redis@^3.0.1, and ran npm link redis, it would
       replace the ^3.0.1 dependency with file:../path/to/node-redis, which you probably don't want!  Additionally, other users or developers on
       your project would run into issues if they do not have their folders set up exactly the same as yours.

       If you are adding a new dependency as a link, you should add it to the relevant metadata by running npm install <dep> --package-lock-only.

       If you want to save the file: reference in your package.json and package-lock.json files, you can use npm link <dep> --save to do so.

   Workspace Usage
       npm link <pkg> --workspace <name> will link the relevant package as a dependency of the specified workspace(s).  Note that It may actually
       be linked into the parent project's node_modules folder, if there are no conflicting dependencies.

       npm link --workspace <name> will create a global link to the specified workspace(s).

   Configuration
   save
       • Default: true unless when using npm update where it defaults to false

       • Type: Boolean

       Save installed packages to a package.json file as dependencies.

       When used with the npm rm command, removes the dependency from package.json.

       Will also prevent writing to package-lock.json if set to false.

   save-exact
       • Default: false

       • Type: Boolean

       Dependencies saved to package.json will be configured with an exact version rather than using npm's default semver range operator.

   global
       • Default: false

       • Type: Boolean

       Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See npm help
       folders for more on the differences in behavior.

       • packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.

       • bin files are linked to {prefix}/bin

       • man pages are linked to {prefix}/share/man

   global-style
       • Default: false

       • Type: Boolean

       Causes npm to install the package into your local node_modules folder with the same layout it uses with the global node_modules folder.
       Only your direct dependencies will show in node_modules and everything they depend on will be flattened in their node_modules folders. This
       obviously will eliminate some deduping. If used with legacy-bundling, legacy-bundling will be preferred.

   legacy-bundling
       • Default: false

       • Type: Boolean

       Causes npm to install the package such that versions of npm prior to 1.4, such as the one included with node 0.8, can install the package.
       This eliminates all automatic deduping. If used with global-style this option will be preferred.

   strict-peer-deps
       • Default: false

       • Type: Boolean

       If set to true, and --legacy-peer-deps is not set, then any conflicting peerDependencies will be treated as an install failure, even if npm
       could reasonably guess the appropriate resolution based on non-peer dependency relationships.

       By default, conflicting peerDependencies deep in the dependency graph will be resolved using the nearest non-peer dependency specification,
       even if doing so will result in some packages receiving a peer dependency outside the range set in their package's peerDependencies object.

       When such and override is performed, a warning is printed, explaining the conflict and the packages involved. If --strict-peer-deps is set,
       then this warning is treated as a failure.

   package-lock
       • Default: true

       • Type: Boolean

       If set to false, then ignore package-lock.json files when installing. This will also prevent writing package-lock.json if save is true.

       This configuration does not affect npm ci.

   omit
       • Default: 'dev' if the NODE_ENV environment variable is set to 'production', otherwise empty.

       • Type: "dev", "optional", or "peer" (can be set multiple times)

       Dependency types to omit from the installation tree on disk.

       Note that these dependencies are still resolved and added to the package-lock.json or npm-shrinkwrap.json file. They are just not
       physically installed on disk.

       If a package type appears in both the --include and --omit lists, then it will be included.

       If the resulting omit list includes 'dev', then the NODE_ENV environment variable will be set to 'production' for all lifecycle scripts.

   ignore-scripts
       • Default: false

       • Type: Boolean

       If true, npm does not run scripts specified in package.json files.

       Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script
       will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.

   audit
       • Default: true

       • Type: Boolean

       When "true" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See
       the documentation for npm help audit for details on what is submitted.

   bin-links
       • Default: true

       • Type: Boolean

       Tells npm to create symlinks (or .cmd shims on Windows) for package executables.

       Set to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on
       ostensibly Unix systems.

   fund
       • Default: true

       • Type: Boolean

       When "true" displays the message at the end of each npm install acknowledging the number of dependencies looking for funding. See npm help
       npm fund for details.

   dry-run
       • Default: false

       • Type: Boolean

       Indicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any
       of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack and publish.

       Note: This is NOT honored by other network related commands, eg dist-tags, owner, etc.

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

   include-workspace-root
       • Default: false

       • Type: Boolean

       Include the workspace root when workspaces are enabled for a command.

       When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate
       only on the specified workspaces, and not on the root project.

       This value is not exported to the environment for child processes.

   install-links
       • Default: false

       • Type: Boolean

       When set file: protocol dependencies that exist outside of the project root will be packed and installed as regular dependencies instead of
       creating a symlink. This option has no effect on workspaces.

   See Also
       • npm help package spec

       • npm help developers

       • npm help package.json

       • npm help install

       • npm help folders

       • npm help config

       • npm help npmrc

                                                                     July 2022                                                         NPM-LINK(1)

------------------------------------------------------------
[ npm ll --help 2>&1 ]
List installed packages

Usage:
npm ll [[<@scope>/]<pkg> ...]

Options:
[-a|--all] [--json] [-l|--long] [-p|--parseable] [-g|--global] [--depth <depth>]
[--omit <dev|optional|peer> [--omit <dev|optional|peer> ...]] [--link]
[--package-lock-only] [--no-unicode]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces] [--include-workspace-root] [--install-links]

alias: la

Run "npm help ll" for more info

------------------------------
[ man npm ll 2>&1 ]
NPM(1)                                                                                                                                      NPM(1)

NAME
       npm - javascript package manager

   Synopsis
   Version
       8.15.0

   Description
       npm is the package manager for the Node JavaScript platform.  It puts modules in place so that node can find them, and manages dependency
       conflicts intelligently.

       It is extremely configurable to support a variety of use cases.  Most commonly, you use it to publish, discover, install, and develop node
       programs.

       Run npm help to get a list of available commands.

   Important
       npm comes preconfigured to use npm's public registry at https://registry.npmjs.org by default. Use of the npm public registry is subject to
       terms of use available at https://docs.npmjs.com/policies/terms.

       You can configure npm to use any compatible registry you like, and even run your own registry. Use of someone else's registry is governed
       by their terms of use.

   Introduction
       You probably got npm because you want to install stuff.

       The very first thing you will most likely want to run in any node program is npm install to install its dependencies.

       You can also run npm install blerg to install the latest version of "blerg".  Check out npm help install for more info.  It can do a lot of
       stuff.

       Use the npm search command to show everything that's available in the public registry.  Use npm ls to show everything you've installed.

   Dependencies
       If a package lists a dependency using a git URL, npm will install that dependency using the git https://github.com/git-guides/install-git
       command and will generate an error if it is not installed.

       If one of the packages npm tries to install is a native node module and requires compiling of C++ Code, npm will use node-gyp
       https://github.com/nodejs/node-gyp for that task.  For a Unix system, node-gyp https://github.com/nodejs/node-gyp needs Python, make and a
       buildchain like GCC. On Windows, Python and Microsoft Visual Studio C++ are needed. For more information visit the node-gyp repository
       https://github.com/nodejs/node-gyp and the node-gyp Wiki https://github.com/nodejs/node-gyp/wiki.

   Directories
       See npm help folders to learn about where npm puts stuff.

       In particular, npm has two modes of operation:

       • local mode: npm installs packages into the current project directory, which defaults to the current working directory.  Packages install
         to ./node_modules, and bins to ./node_modules/.bin.

       • global mode: npm installs packages into the install prefix at $npm_config_prefix/lib/node_modules and bins to $npm_config_prefix/bin.

       Local mode is the default.  Use -g or --global on any command to run in global mode instead.

   Developer Usage
       If you're using npm to develop and publish your code, check out the following help topics:

       • json: Make a package.json file.  See npm help package.json.

       • link: Links your current working code into Node's path, so that you don't have to reinstall every time you make a change.  Use npm help
         npm link to do this.

       • install: It's a good idea to install things if you don't need the symbolic link.  Especially, installing other peoples code from the
         registry is done via npm help install

       • adduser: Create an account or log in.  When you do this, npm will store credentials in the user config file.

       • publish: Use the npm help publish command to upload your code to the registry.

   Configuration
       npm is extremely configurable.  It reads its configuration options from 5 places.

       • Command line switches: Set a config with --key val.  All keys take a value, even if they are booleans (the config parser doesn't know
         what the options are at the time of parsing).  If you do not provide a value (--key) then the option is set to boolean true.

       • Environment Variables: Set any config by prefixing the name in an environment variable with npm_config_.  For example, export
         npm_config_key=val.

       • User Configs: The file at $HOME/.npmrc is an ini-formatted list of configs.  If present, it is parsed.  If the userconfig option is set
         in the cli or env, that file will be used instead.

       • Global Configs: The file found at ./etc/npmrc (relative to the global prefix will be parsed if it is found.  See npm help prefix for more
         info on the global prefix.  If the globalconfig option is set in the cli, env, or user config, then that file is parsed instead.

       • Defaults: npm's default configuration options are defined in lib/utils/config-defs.js.  These must not be changed.

       See npm help config for much much more information.

   Contributions
       Patches welcome!

       If you would like to help, but don't know what to work on, read the contributing guidelines
       https://github.com/npm/cli/blob/latest/CONTRIBUTING.md and check the issues list.

   Bugs
       When you find issues, please report them: https://github.com/npm/cli/issues

       Please be sure to follow the template and bug reporting guidelines.

   Feature Requests
       Discuss new feature ideas on our discussion forum:

       • https://github.com/npm/feedback

       Or suggest formal RFC proposals:

       • https://github.com/npm/rfcs

   See Also
       • npm help help

       • npm help package.json

       • npm help npmrc

       • npm help config

       • npm help install

       • npm help prefix

       • npm help publish

                                                                     July 2022                                                              NPM(1)
No manual entry for ll

------------------------------------------------------------
[ npm login --help 2>&1 ]
Add a registry user account

Usage:
npm adduser

Options:
[--registry <registry>] [--scope <@scope>]
[--auth-type <legacy|web|sso|saml|oauth|webauthn>]

aliases: login, add-user

Run "npm help adduser" for more info

------------------------------
[ man npm login 2>&1 ]
NPM(1)                                                                                                                                      NPM(1)

NAME
       npm - javascript package manager

   Synopsis
   Version
       8.15.0

   Description
       npm is the package manager for the Node JavaScript platform.  It puts modules in place so that node can find them, and manages dependency
       conflicts intelligently.

       It is extremely configurable to support a variety of use cases.  Most commonly, you use it to publish, discover, install, and develop node
       programs.

       Run npm help to get a list of available commands.

   Important
       npm comes preconfigured to use npm's public registry at https://registry.npmjs.org by default. Use of the npm public registry is subject to
       terms of use available at https://docs.npmjs.com/policies/terms.

       You can configure npm to use any compatible registry you like, and even run your own registry. Use of someone else's registry is governed
       by their terms of use.

   Introduction
       You probably got npm because you want to install stuff.

       The very first thing you will most likely want to run in any node program is npm install to install its dependencies.

       You can also run npm install blerg to install the latest version of "blerg".  Check out npm help install for more info.  It can do a lot of
       stuff.

       Use the npm search command to show everything that's available in the public registry.  Use npm ls to show everything you've installed.

   Dependencies
       If a package lists a dependency using a git URL, npm will install that dependency using the git https://github.com/git-guides/install-git
       command and will generate an error if it is not installed.

       If one of the packages npm tries to install is a native node module and requires compiling of C++ Code, npm will use node-gyp
       https://github.com/nodejs/node-gyp for that task.  For a Unix system, node-gyp https://github.com/nodejs/node-gyp needs Python, make and a
       buildchain like GCC. On Windows, Python and Microsoft Visual Studio C++ are needed. For more information visit the node-gyp repository
       https://github.com/nodejs/node-gyp and the node-gyp Wiki https://github.com/nodejs/node-gyp/wiki.

   Directories
       See npm help folders to learn about where npm puts stuff.

       In particular, npm has two modes of operation:

       • local mode: npm installs packages into the current project directory, which defaults to the current working directory.  Packages install
         to ./node_modules, and bins to ./node_modules/.bin.

       • global mode: npm installs packages into the install prefix at $npm_config_prefix/lib/node_modules and bins to $npm_config_prefix/bin.

       Local mode is the default.  Use -g or --global on any command to run in global mode instead.

   Developer Usage
       If you're using npm to develop and publish your code, check out the following help topics:

       • json: Make a package.json file.  See npm help package.json.

       • link: Links your current working code into Node's path, so that you don't have to reinstall every time you make a change.  Use npm help
         npm link to do this.

       • install: It's a good idea to install things if you don't need the symbolic link.  Especially, installing other peoples code from the
         registry is done via npm help install

       • adduser: Create an account or log in.  When you do this, npm will store credentials in the user config file.

       • publish: Use the npm help publish command to upload your code to the registry.

   Configuration
       npm is extremely configurable.  It reads its configuration options from 5 places.

       • Command line switches: Set a config with --key val.  All keys take a value, even if they are booleans (the config parser doesn't know
         what the options are at the time of parsing).  If you do not provide a value (--key) then the option is set to boolean true.

       • Environment Variables: Set any config by prefixing the name in an environment variable with npm_config_.  For example, export
         npm_config_key=val.

       • User Configs: The file at $HOME/.npmrc is an ini-formatted list of configs.  If present, it is parsed.  If the userconfig option is set
         in the cli or env, that file will be used instead.

       • Global Configs: The file found at ./etc/npmrc (relative to the global prefix will be parsed if it is found.  See npm help prefix for more
         info on the global prefix.  If the globalconfig option is set in the cli, env, or user config, then that file is parsed instead.

       • Defaults: npm's default configuration options are defined in lib/utils/config-defs.js.  These must not be changed.

       See npm help config for much much more information.

   Contributions
       Patches welcome!

       If you would like to help, but don't know what to work on, read the contributing guidelines
       https://github.com/npm/cli/blob/latest/CONTRIBUTING.md and check the issues list.

   Bugs
       When you find issues, please report them: https://github.com/npm/cli/issues

       Please be sure to follow the template and bug reporting guidelines.

   Feature Requests
       Discuss new feature ideas on our discussion forum:

       • https://github.com/npm/feedback

       Or suggest formal RFC proposals:

       • https://github.com/npm/rfcs

   See Also
       • npm help help

       • npm help package.json

       • npm help npmrc

       • npm help config

       • npm help install

       • npm help prefix

       • npm help publish

                                                                     July 2022                                                              NPM(1)
LOGIN(1)                                                           User Commands                                                          LOGIN(1)

NAME
       login - begin session on the system

SYNOPSIS
       login [-p] [-h host] [username] [ENV=VAR...]

       login [-p] [-h host] -f username

       login [-p] -r host

DESCRIPTION
       The login program is used to establish a new session with the system. It is normally invoked automatically by responding to the login:
       prompt on the user's terminal.  login may be special to the shell and may not be invoked as a sub-process. When called from a shell, login
       should be executed as exec login which will cause the user to exit from the current shell (and thus will prevent the new logged in user to
       return to the session of the caller). Attempting to execute login from any shell but the login shell will produce an error message.

       The user is then prompted for a password, where appropriate. Echoing is disabled to prevent revealing the password. Only a small number of
       password failures are permitted before login exits and the communications link is severed.

       If password aging has been enabled for your account, you may be prompted for a new password before proceeding. You will be forced to
       provide your old password and the new password before continuing. Please refer to passwd(1) for more information.

       Your user and group ID will be set according to their values in the /etc/passwd file. The value for $HOME, $SHELL, $PATH, $LOGNAME, and
       $MAIL are set according to the appropriate fields in the password entry. Ulimit, umask and nice values may also be set according to entries
       in the GECOS field.

       On some installations, the environmental variable $TERM will be initialized to the terminal type on your tty line, as specified in
       /etc/ttytype.

       An initialization script for your command interpreter may also be executed. Please see the appropriate manual section for more information
       on this function.

       A subsystem login is indicated by the presence of a "*" as the first character of the login shell. The given home directory will be used as
       the root of a new file system which the user is actually logged into.

       The login program is NOT responsible for removing users from the utmp file. It is the responsibility of getty(8) and init(8) to clean up
       apparent ownership of a terminal session. If you use login from the shell prompt without exec, the user you use will continue to appear to
       be logged in even after you log out of the "subsession".

OPTIONS
       -f
           Do not perform authentication, user is preauthenticated.

           Note: In that case, username is mandatory.

       -h
           Name of the remote host for this login.

       -p
           Preserve environment.

       -r
           Perform autologin protocol for rlogin.

       The -r, -h and -f options are only used when login is invoked by root.

CAVEATS
       This version of login has many compilation options, only some of which may be in use at any particular site.

       The location of files is subject to differences in system configuration.

       The login program is NOT responsible for removing users from the utmp file. It is the responsibility of getty(8) and init(8) to clean up
       apparent ownership of a terminal session. If you use login from the shell prompt without exec, the user you use will continue to appear to
       be logged in even after you log out of the "subsession".

       As with any program, login's appearance can be faked. If non-trusted users have physical access to a machine, an attacker could use this to
       obtain the password of the next person coming to sit in front of the machine. Under Linux, the SAK mechanism can be used by users to
       initiate a trusted path and prevent this kind of attack.

CONFIGURATION
       The following configuration variables in /etc/login.defs change the behavior of this tool:

       CONSOLE_GROUPS (string)
           List of groups to add to the user's supplementary groups set when logging in on the console (as determined by the CONSOLE setting).
           Default is none.

           Use with caution - it is possible for users to gain permanent access to these groups, even when not logged in on the console.

       DEFAULT_HOME (boolean)
           Indicate if login is allowed if we can't cd to the home directory. Default is no.

           If set to yes, the user will login in the root (/) directory if it is not possible to cd to her home directory.

       ENV_PATH (string)
           If set, it will be used to define the PATH environment variable when a regular user login. The value is a colon separated list of paths
           (for example /bin:/usr/bin) and can be preceded by PATH=. The default value is PATH=/bin:/usr/bin.

       ENV_SUPATH (string)
           If set, it will be used to define the PATH environment variable when the superuser login. The value is a colon separated list of paths
           (for example /sbin:/bin:/usr/sbin:/usr/bin) and can be preceded by PATH=. The default value is PATH=/sbin:/bin:/usr/sbin:/usr/bin.

       ERASECHAR (number)
           Terminal ERASE character (010 = backspace, 0177 = DEL).

           The value can be prefixed "0" for an octal value, or "0x" for an hexadecimal value.

       FAIL_DELAY (number)
           Delay in seconds before being allowed another attempt after a login failure.

       FAKE_SHELL (string)
           If set, login will execute this shell instead of the users' shell specified in /etc/passwd.

       HUSHLOGIN_FILE (string)
           If defined, this file can inhibit all the usual chatter during the login sequence. If a full pathname is specified, then hushed mode
           will be enabled if the user's name or shell are found in the file. If not a full pathname, then hushed mode will be enabled if the file
           exists in the user's home directory.

       KILLCHAR (number)
           Terminal KILL character (025 = CTRL/U).

           The value can be prefixed "0" for an octal value, or "0x" for an hexadecimal value.

       LOGIN_RETRIES (number)
           Maximum number of login retries in case of bad password.

           This will most likely be overridden by PAM, since the default pam_unix module has its own built in of 3 retries. However, this is a
           safe fallback in case you are using an authentication module that does not enforce PAM_MAXTRIES.

       LOGIN_TIMEOUT (number)
           Max time in seconds for login.

       LOG_OK_LOGINS (boolean)
           Enable logging of successful logins.

       LOG_UNKFAIL_ENAB (boolean)
           Enable display of unknown usernames when login failures are recorded.

           Note: logging unknown usernames may be a security issue if an user enter her password instead of her login name.

       TTYGROUP (string), TTYPERM (string)
           The terminal permissions: the login tty will be owned by the TTYGROUP group, and the permissions will be set to TTYPERM.

           By default, the ownership of the terminal is set to the user's primary group and the permissions are set to 0600.

           TTYGROUP can be either the name of a group or a numeric group identifier.

           If you have a write program which is "setgid" to a special group which owns the terminals, define TTYGROUP to the group number and
           TTYPERM to 0620. Otherwise leave TTYGROUP commented out and assign TTYPERM to either 622 or 600.

       TTYTYPE_FILE (string)
           If defined, file which maps tty line to TERM environment parameter. Each line of the file is in a format something like "vt100 tty01".

       USERGROUPS_ENAB (boolean)
           If set to yes, userdel will remove the user's group if it contains no more members, and useradd will create by default a group with the
           name of the user.

FILES
       /var/run/utmp
           List of current login sessions.

       /var/log/wtmp
           List of previous login sessions.

       /etc/passwd
           User account information.

       /etc/shadow
           Secure user account information.

       /etc/motd
           System message of the day file.

       /etc/nologin
           Prevent non-root users from logging in.

       /etc/ttytype
           List of terminal types.

       $HOME/.hushlogin
           Suppress printing of system messages.

       /etc/login.defs
           Shadow password suite configuration.

SEE ALSO
       mail(1), passwd(1), sh(1), su(1), login.defs(5), nologin(5), passwd(5), securetty(5), getty(8).

shadow-utils 4.8.1                                                  03/14/2022                                                            LOGIN(1)

------------------------------------------------------------
[ npm logout --help 2>&1 ]
Log out of the registry

Usage:
npm logout

Options:
[--registry <registry>] [--scope <@scope>]

Run "npm help logout" for more info

------------------------------
[ man npm logout 2>&1 ]
NPM-LOGOUT(1)                                                                                                                        NPM-LOGOUT(1)

NAME
       npm-logout - Log out of the registry

   Synopsis
         npm logout

       Note: This command is unaware of workspaces.

   Description
       When logged into a registry that supports token-based authentication, tell the server to end this token's session. This will invalidate the
       token everywhere you're using it, not just for the current environment.

       When logged into a legacy registry that uses username and password authentication, this will clear the credentials in your user
       configuration.  In this case, it will only affect the current environment.

       If --scope is provided, this will find the credentials for the registry connected to that scope, if set.

   Configuration
   registry
       • Default: "https://registry.npmjs.org/"

       • Type: URL

       The base URL of the npm registry.

   scope
       • Default: the scope of the current project, if any, or ""

       • Type: String

       Associate an operation with a scope for a scoped registry.

       Useful when logging in to or out of a private registry:

         # log in, linking the scope to the custom registry
         npm login --scope=@mycorp --registry=https://registry.mycorp.com

         # log out, removing the link and the auth token
         npm logout --scope=@mycorp

       This will cause @mycorp to be mapped to the registry for future installation of packages specified according to the pattern
       @mycorp/package.

       This will also cause npm init to create a scoped package.

         # accept all defaults, and create a package named "@foo/whatever",
         # instead of just named "whatever"
         npm init --scope=@foo --yes

   See Also
       • npm help adduser

       • npm help registry

       • npm help config

       • npm help whoami

                                                                     July 2022                                                       NPM-LOGOUT(1)

------------------------------------------------------------
[ npm ls --help 2>&1 ]
List installed packages

Usage:
npm ls <package-spec>

Options:
[-a|--all] [--json] [-l|--long] [-p|--parseable] [-g|--global] [--depth <depth>]
[--omit <dev|optional|peer> [--omit <dev|optional|peer> ...]] [--link]
[--package-lock-only] [--no-unicode]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces] [--include-workspace-root] [--install-links]

alias: list

Run "npm help ls" for more info

------------------------------
[ man npm ls 2>&1 ]
NPM-LS(1)                                                                                                                                NPM-LS(1)

NAME
       npm-ls - List installed packages

   Synopsis
         npm ls <package-spec>

         alias: list

   Description
       This command will print to stdout all the versions of packages that are installed, as well as their dependencies when --all is specified,
       in a tree structure.

       Note: to get a "bottoms up" view of why a given package is included in the tree at all, use npm help explain.

       Positional arguments are name@version-range identifiers, which will limit the results to only the paths to the packages named.  Note that
       nested packages will also show the paths to the specified packages.  For example, running npm ls promzard in npm's source tree will show:

         npm@8.15.0 /path/to/npm
         └─┬ init-package-json@0.0.4
           └── promzard@0.1.5

       It will print out extraneous, missing, and invalid packages.

       If a project specifies git urls for dependencies these are shown in parentheses after the name@version to make it easier for users to
       recognize potential forks of a project.

       The tree shown is the logical dependency tree, based on package dependencies, not the physical layout of your node_modules folder.

       When run as ll or la, it shows extended information by default.

   Note: Design Changes Pending
       The npm ls command's output and behavior made a ton of sense when npm created a node_modules folder that naively nested every dependency.
       In such a case, the logical dependency graph and physical tree of packages on disk would be roughly identical.

       With the advent of automatic install-time deduplication of dependencies in npm v3, the ls output was modified to display the logical
       dependency graph as a tree structure, since this was more useful to most users.  However, without using npm ls -l, it became impossible
       show where a package was actually installed much of the time!

       With the advent of automatic installation of peerDependencies in npm v7, this gets even more curious, as peerDependencies are logically
       "underneath" their dependents in the dependency graph, but are always physically at or above their location on disk.

       Also, in the years since npm got an ls command (in version 0.0.2!), dependency graphs have gotten much larger as a general rule.
       Therefore, in order to avoid dumping an excessive amount of content to the terminal, npm ls now only shows the top level dependencies,
       unless --all is provided.

       A thorough re-examination of the use cases, intention, behavior, and output of this command, is currently underway.  Expect significant
       changes to at least the default human-readable npm ls output in npm v8.

   Configuration
   all
       • Default: false

       • Type: Boolean

       When running npm outdated and npm ls, setting --all will show all outdated or installed packages, rather than only those directly depended
       upon by the current project.

   json
       • Default: false

       • Type: Boolean

       Whether or not to output JSON data, rather than the normal output.

       • In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

       Not supported by all npm commands.

   long
       • Default: false

       • Type: Boolean

       Show extended information in ls, search, and help-search.

   parseable
       • Default: false

       • Type: Boolean

       Output parseable results from commands that write to standard output. For npm search, this will be tab-separated table format.

   global
       • Default: false

       • Type: Boolean

       Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See npm help
       folders for more on the differences in behavior.

       • packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.

       • bin files are linked to {prefix}/bin

       • man pages are linked to {prefix}/share/man

   depth
       • Default: Infinity if --all is set, otherwise 1

       • Type: null or Number

       The depth to go when recursing packages for npm ls.

       If not set, npm ls will show only the immediate dependencies of the root project. If --all is set, then npm will show all dependencies by
       default.

   omit
       • Default: 'dev' if the NODE_ENV environment variable is set to 'production', otherwise empty.

       • Type: "dev", "optional", or "peer" (can be set multiple times)

       Dependency types to omit from the installation tree on disk.

       Note that these dependencies are still resolved and added to the package-lock.json or npm-shrinkwrap.json file. They are just not
       physically installed on disk.

       If a package type appears in both the --include and --omit lists, then it will be included.

       If the resulting omit list includes 'dev', then the NODE_ENV environment variable will be set to 'production' for all lifecycle scripts.

   link
       • Default: false

       • Type: Boolean

       Used with npm ls, limiting output to only those packages that are linked.

   package-lock-only
       • Default: false

       • Type: Boolean

       If set to true, the current operation will only use the package-lock.json, ignoring node_modules.

       For update this means only the package-lock.json will be updated, instead of checking node_modules and downloading dependencies.

       For list this means the output will be based on the tree described by the package-lock.json, rather than the contents of node_modules.

   unicode
       • Default: false on windows, true on mac/unix systems with a unicode locale, as defined by the LC_ALL, LC_CTYPE, or LANG environment
         variables.

       • Type: Boolean

       When set to true, npm uses unicode characters in the tree output. When false, it uses ascii characters instead of unicode glyphs.

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

   include-workspace-root
       • Default: false

       • Type: Boolean

       Include the workspace root when workspaces are enabled for a command.

       When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate
       only on the specified workspaces, and not on the root project.

       This value is not exported to the environment for child processes.

   install-links
       • Default: false

       • Type: Boolean

       When set file: protocol dependencies that exist outside of the project root will be packed and installed as regular dependencies instead of
       creating a symlink. This option has no effect on workspaces.

   See Also
       • npm help package spec

       • npm help explain

       • npm help config

       • npm help npmrc

       • npm help folders

       • npm help explain

       • npm help install

       • npm help link

       • npm help prune

       • npm help outdated

       • npm help update

                                                                     July 2022                                                           NPM-LS(1)

------------------------------------------------------------
[ npm org --help 2>&1 ]
Manage orgs

Usage:
npm org set orgname username [developer | admin | owner]
npm org rm orgname username
npm org ls orgname [<username>]

Options:
[--registry <registry>] [--otp <otp>] [--json] [-p|--parseable]

alias: ogr

Run "npm help org" for more info

------------------------------
[ man npm org 2>&1 ]
NPM-ORG(1)                                                                                                                              NPM-ORG(1)

NAME
       npm-org - Manage orgs

   Synopsis
         npm org set orgname username [developer | admin | owner]
         npm org rm orgname username
         npm org ls orgname [<username>]

         alias: ogr

       Note: This command is unaware of workspaces.

   Example
       Add a new developer to an org:

         $ npm org set my-org @mx-smith

       Add a new admin to an org (or change a developer to an admin):

         $ npm org set my-org @mx-santos admin

       Remove a user from an org:

         $ npm org rm my-org mx-santos

       List all users in an org:

         $ npm org ls my-org

       List all users in JSON format:

         $ npm org ls my-org --json

       See what role a user has in an org:

         $ npm org ls my-org @mx-santos

   Description
       You can use the npm org commands to manage and view users of an organization.  It supports adding and removing users, changing their roles,
       listing them, and finding specific ones and their roles.

   Configuration
   registry
       • Default: "https://registry.npmjs.org/"

       • Type: URL

       The base URL of the npm registry.

   otp
       • Default: null

       • Type: null or String

       This is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with npm access.

       If not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.

   json
       • Default: false

       • Type: Boolean

       Whether or not to output JSON data, rather than the normal output.

       • In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

       Not supported by all npm commands.

   parseable
       • Default: false

       • Type: Boolean

       Output parseable results from commands that write to standard output. For npm search, this will be tab-separated table format.

   See Also
       • npm help using orgs

       • Documentation on npm Orgs https://docs.npmjs.com/orgs/

                                                                     July 2022                                                          NPM-ORG(1)

------------------------------------------------------------
[ npm outdated --help 2>&1 ]
Check for outdated packages

Usage:
npm outdated [<package-spec> ...]

Options:
[-a|--all] [--json] [-l|--long] [-p|--parseable] [-g|--global]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]

Run "npm help outdated" for more info

------------------------------
[ man npm outdated 2>&1 ]
NPM-OUTDATED(1)                                                                                                                    NPM-OUTDATED(1)

NAME
       npm-outdated - Check for outdated packages

   Synopsis
         npm outdated [<package-spec> ...]

   Description
       This command will check the registry to see if any (or, specific) installed packages are currently outdated.

       By default, only the direct dependencies of the root project and direct dependencies of your configured workspaces are shown.  Use --all to
       find all outdated meta-dependencies as well.

       In the output:

       • wanted is the maximum version of the package that satisfies the semver range specified in package.json. If there's no available semver
         range (i.e.  you're running npm outdated --global, or the package isn't included in package.json), then wanted shows the
         currently-installed version.

       • latest is the version of the package tagged as latest in the registry.  Running npm publish with no special configuration will publish
         the package with a dist-tag of latest. This may or may not be the maximum version of the package, or the most-recently published version
         of the package, depending on how the package's developer manages the latest npm help dist-tag.

       • location is where in the physical tree the package is located.

       • depended by shows which package depends on the displayed dependency

       • package type (when using --long / -l) tells you whether this package is a dependency or a dev/peer/optional dependency. Packages not
         included in package.json are always marked dependencies.

       • homepage (when using --long / -l) is the homepage value contained in the package's packument

       • Red means there's a newer version matching your semver requirements, so you should update now.

       • Yellow indicates that there's a newer version above your semver requirements (usually new major, or new 0.x minor) so proceed with
         caution.

   An example
         $ npm outdated
         Package      Current   Wanted   Latest  Location                  Depended by
         glob          5.0.15   5.0.15    6.0.1  node_modules/glob         dependent-package-name
         nothingness    0.0.3      git      git  node_modules/nothingness  dependent-package-name
         npm            3.5.1    3.5.2    3.5.1  node_modules/npm          dependent-package-name
         local-dev      0.0.3   linked   linked  local-dev                 dependent-package-name
         once           1.3.2    1.3.3    1.3.3  node_modules/once         dependent-package-name

       With these dependencies:

         {
           "glob": "^5.0.15",
           "nothingness": "github:othiym23/nothingness#master",
           "npm": "^3.5.1",
           "once": "^1.3.1"
         }

       A few things to note:

       • glob requires ^5, which prevents npm from installing glob@6, which is outside the semver range.

       • Git dependencies will always be reinstalled, because of how they're specified.  The installed committish might satisfy the dependency
         specifier (if it's something immutable, like a commit SHA), or it might not, so npm outdated and npm update have to fetch Git repos to
         check.  This is why currently doing a reinstall of a Git dependency always forces a new clone and install.

       • npm@3.5.2 is marked as "wanted", but "latest" is npm@3.5.1 because npm uses dist-tags to manage its latest and next release channels.
         npm update will install the newest version, but npm install npm (with no semver range) will install whatever's tagged as latest.

       • once is just plain out of date. Reinstalling node_modules from scratch or running npm update will bring it up to spec.

   Configuration
   all
       • Default: false

       • Type: Boolean

       When running npm outdated and npm ls, setting --all will show all outdated or installed packages, rather than only those directly depended
       upon by the current project.

   json
       • Default: false

       • Type: Boolean

       Whether or not to output JSON data, rather than the normal output.

       • In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

       Not supported by all npm commands.

   long
       • Default: false

       • Type: Boolean

       Show extended information in ls, search, and help-search.

   parseable
       • Default: false

       • Type: Boolean

       Output parseable results from commands that write to standard output. For npm search, this will be tab-separated table format.

   global
       • Default: false

       • Type: Boolean

       Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See npm help
       folders for more on the differences in behavior.

       • packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.

       • bin files are linked to {prefix}/bin

       • man pages are linked to {prefix}/share/man

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   See Also
       • npm help package spec

       • npm help update

       • npm help dist-tag

       • npm help registry

       • npm help folders

       • npm help workspaces

                                                                     July 2022                                                     NPM-OUTDATED(1)

------------------------------------------------------------
[ npm owner --help 2>&1 ]
Manage package owners

Usage:
npm owner add <user> <package-spec>
npm owner rm <user> <package-spec>
npm owner ls <package-spec>

Options:
[--registry <registry>] [--otp <otp>]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces]

alias: author

Run "npm help owner" for more info

------------------------------
[ man npm owner 2>&1 ]
NPM-OWNER(1)                                                                                                                          NPM-OWNER(1)

NAME
       npm-owner - Manage package owners

   Synopsis
         npm owner add <user> <package-spec>
         npm owner rm <user> <package-spec>
         npm owner ls <package-spec>

         alias: author

       Note: This command is unaware of workspaces.

   Description
       Manage ownership of published packages.

       • ls: List all the users who have access to modify a package and push new versions.  Handy when you need to know who to bug for help.

       • add: Add a new user as a maintainer of a package.  This user is enabled to modify metadata, publish new versions, and add other owners.

       • rm: Remove a user from the package owner list.  This immediately revokes their privileges.

       Note that there is only one level of access.  Either you can modify a package, or you can't.  Future versions may contain more fine-grained
       access levels, but that is not implemented at this time.

       If you have two-factor authentication enabled with auth-and-writes (see npm help npm-profile) then you'll need to include an otp on the
       command line when changing ownership with --otp.

   Configuration
   registry
       • Default: "https://registry.npmjs.org/"

       • Type: URL

       The base URL of the npm registry.

   otp
       • Default: null

       • Type: null or String

       This is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with npm access.

       If not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

   See Also
       • npm help package spec

       • npm help profile

       • npm help publish

       • npm help registry

       • npm help adduser

                                                                     July 2022                                                        NPM-OWNER(1)

------------------------------------------------------------
[ npm pack --help 2>&1 ]
Create a tarball from a package

Usage:
npm pack <package-spec>

Options:
[--dry-run] [--json] [--pack-destination <pack-destination>]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces] [--include-workspace-root]

Run "npm help pack" for more info

------------------------------
[ man npm pack 2>&1 ]
NPM-PACK(1)                                                                                                                            NPM-PACK(1)

NAME
       npm-pack - Create a tarball from a package

   Synopsis
         npm pack <package-spec>

   Configuration
   dry-run
       • Default: false

       • Type: Boolean

       Indicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any
       of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack and publish.

       Note: This is NOT honored by other network related commands, eg dist-tags, owner, etc.

   json
       • Default: false

       • Type: Boolean

       Whether or not to output JSON data, rather than the normal output.

       • In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

       Not supported by all npm commands.

   pack-destination
       • Default: "."

       • Type: String

       Directory in which npm pack will save tarballs.

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

   include-workspace-root
       • Default: false

       • Type: Boolean

       Include the workspace root when workspaces are enabled for a command.

       When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate
       only on the specified workspaces, and not on the root project.

       This value is not exported to the environment for child processes.

   Description
       For anything that's installable (that is, a package folder, tarball, tarball url, git url, name@tag, name@version, name, or scoped name),
       this command will fetch it to the cache, copy the tarball to the current working directory as <name>-<version>.tgz, and then write the
       filenames out to stdout.

       If the same package is specified multiple times, then the file will be overwritten the second time.

       If no arguments are supplied, then npm packs the current package folder.

   See Also
       • npm help package spec

       • npm-packlist package http://npm.im/npm-packlist

       • npm help cache

       • npm help publish

       • npm help config

       • npm help npmrc

                                                                     July 2022                                                         NPM-PACK(1)

------------------------------------------------------------
[ npm ping --help 2>&1 ]
Ping npm registry

Usage:
npm ping

Options:
[--registry <registry>]

Run "npm help ping" for more info

------------------------------
[ man npm ping 2>&1 ]
NPM-PING(1)                                                                                                                            NPM-PING(1)

NAME
       npm-ping - Ping npm registry

   Synopsis
         npm ping

       Note: This command is unaware of workspaces.

   Description
       Ping the configured or given npm registry and verify authentication.  If it works it will output something like:

         npm notice PING https://registry.npmjs.org/
         npm notice PONG 255ms

       otherwise you will get an error:

         npm notice PING http://foo.com/
         npm ERR! code E404
         npm ERR! 404 Not Found - GET http://www.foo.com/-/ping?write=true

   Configuration
   registry
       • Default: "https://registry.npmjs.org/"

       • Type: URL

       The base URL of the npm registry.

   See Also
       • npm help doctor

       • npm help config

       • npm help npmrc

                                                                     July 2022                                                         NPM-PING(1)

------------------------------------------------------------
[ npm pkg --help 2>&1 ]
Manages your package.json

Usage:
npm pkg set <key>=<value> [<key>=<value> ...]
npm pkg get [<key> [<key> ...]]
npm pkg delete <key> [<key> ...]
npm pkg set [<array>[<index>].<key>=<value> ...]
npm pkg set [<array>[].<key>=<value> ...]

Options:
[-f|--force] [--json]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces]

Run "npm help pkg" for more info

------------------------------
[ man npm pkg 2>&1 ]
NPM-PKG(1)                                                                                                                              NPM-PKG(1)

NAME
       npm-pkg - Manages your package.json

   Synopsis
         npm pkg set <key>=<value> [<key>=<value> ...]
         npm pkg get [<key> [<key> ...]]
         npm pkg delete <key> [<key> ...]
         npm pkg set [<array>[<index>].<key>=<value> ...]
         npm pkg set [<array>[].<key>=<value> ...]

   Description
       A command that automates the management of package.json files.  npm pkg provide 3 different sub commands that allow you to modify or
       retrieve values for given object keys in your package.json.

       The syntax to retrieve and set fields is a dot separated representation of the nested object properties to be found within your
       package.json, it's the same notation used in npm help view to retrieve information from the registry manifest, below you can find more
       examples on how to use it.

       Returned values are always in json format.

       • npm pkg get <field>
           Retrieves a value key, defined in your package.json file.
           For example, in order to retrieve the name of the current package, you
           can run:

           npm pkg get name
         It's also possible to retrieve multiple values at once:

           npm pkg get name version
         You can view child fields by separating them with a period. To retrieve
         the value of a test script value, you would run the following command:

           npm pkg get scripts.test
         For fields that are arrays, requesting a non-numeric field will return
         all of the values from the objects in the list. For example, to get all
         the contributor emails for a package, you would run:

           npm pkg get contributors.email
         You may also use numeric indices in square braces to specifically select
         an item in an array field. To just get the email address of the first
         contributor in the list, you can run:

           npm pkg get contributors[0].email
         For complex fields you can also name a property in square brackets
         to specifically select a child field. This is especially helpful
         with the exports object:

           npm pkg get "exports[.].require"

       • npm pkg set <field>=<value>
           Sets a value in your package.json based on the field value. When
           saving to your package.json file the same set of rules used during
           npm install and other cli commands that touches the package.json file
           are used, making sure to respect the existing indentation and possibly
           applying some validation prior to saving values to the file.
           The same syntax used to retrieve values from your package can also be used
           to define new properties or overriding existing ones, below are some
           examples of how the dot separated syntax can be used to edit your
           package.json file.
           Defining a new bin named mynewcommand in your package.json that points
           to a file cli.js:

           npm pkg set bin.mynewcommand=cli.js
         Setting multiple fields at once is also possible:

           npm pkg set description='Awesome package' engines.node='>=10'
         It's also possible to add to array values, for example to add a new
         contributor entry:

           npm pkg set contributors[0].name='Foo' contributors[0].email='foo@bar.ca'
         You may also append items to the end of an array using the special
         empty bracket notation:

           npm pkg set contributors[].name='Foo' contributors[].name='Bar'
         It's also possible to parse values as json prior to saving them to your
         package.json file, for example in order to set a "private": true
         property:

           npm pkg set private=true --json
         It also enables saving values as numbers:

           npm pkg set tap.timeout=60 --json

       • npm pkg delete <key>
           Deletes a key from your package.json
           The same syntax used to set values from your package can also be used
           to remove existing ones. For example, in order to remove a script named
           build:

           npm pkg delete scripts.build

   Workspaces support
       You can set/get/delete items across your configured workspaces by using the workspace or workspaces config options.

       For example, setting a funding value across all configured workspaces of a project:

         npm pkg set funding=https://example.com --ws

       When using npm pkg get to retrieve info from your configured workspaces, the returned result will be in a json format in which top level
       keys are the names of each workspace, the values of these keys will be the result values returned from each of the configured workspaces,
       e.g:

         npm pkg get name version --ws
         {
           "a": {
             "name": "a",
             "version": "1.0.0"
           },
           "b": {
             "name": "b",
             "version": "1.0.0"
           }
         }

   Configuration
   force
       • Default: false

       • Type: Boolean

       Removes various protections against unfortunate side effects, common mistakes, unnecessary performance degradation, and malicious input.

       • Allow clobbering non-npm files in global installs.

       • Allow the npm version command to work on an unclean git repository.

       • Allow deleting the cache folder with npm cache clean.

       • Allow installing packages that have an engines declaration requiring a different version of npm.

       • Allow installing packages that have an engines declaration requiring a different version of node, even if --engine-strict is enabled.

       • Allow npm audit fix to install modules outside your stated dependency range (including SemVer-major changes).

       • Allow unpublishing all versions of a published package.

       • Allow conflicting peerDependencies to be installed in the root project.

       • Implicitly set --yes during npm init.

       • Allow clobbering existing values in npm pkg

       • Allow unpublishing of entire packages (not just a single version).

       If you don't have a clear idea of what you want to do, it is strongly recommended that you do not use this option!

   json
       • Default: false

       • Type: Boolean

       Whether or not to output JSON data, rather than the normal output.

       • In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

       Not supported by all npm commands.

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

See Also
       • npm help install

       • npm help init

       • npm help config

       • npm help set-script

       • npm help workspaces

                                                                     July 2022                                                          NPM-PKG(1)

------------------------------------------------------------
[ npm prefix --help 2>&1 ]
Display prefix

Usage:
npm prefix [-g]

Options:
[-g|--global]

Run "npm help prefix" for more info

------------------------------
[ man npm prefix 2>&1 ]
NPM-PREFIX(1)                                                                                                                        NPM-PREFIX(1)

NAME
       npm-prefix - Display prefix

   Synopsis
         npm prefix [-g]

       Note: This command is unaware of workspaces.

   Description
       Print the local prefix to standard output. This is the closest parent directory to contain a package.json file or node_modules directory,
       unless -g is also specified.

       If -g is specified, this will be the value of the global prefix. See npm help config for more detail.

   Example
         npm prefix
         /usr/local/projects/foo

         npm prefix -g
         /usr/local

   Configuration
   global
       • Default: false

       • Type: Boolean

       Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See npm help
       folders for more on the differences in behavior.

       • packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.

       • bin files are linked to {prefix}/bin

       • man pages are linked to {prefix}/share/man

   See Also
       • npm help root

       • npm help bin

       • npm help folders

       • npm help config

       • npm help npmrc

                                                                     July 2022                                                       NPM-PREFIX(1)

------------------------------------------------------------
[ npm profile --help 2>&1 ]
Change settings on your registry profile

Usage:
npm profile enable-2fa [auth-only|auth-and-writes]
npm profile disable-2fa
npm profile get [<key>]
npm profile set <key> <value>

Options:
[--registry <registry>] [--json] [-p|--parseable] [--otp <otp>]

Run "npm help profile" for more info

------------------------------
[ man npm profile 2>&1 ]
NPM-PROFILE(1)                                                                                                                      NPM-PROFILE(1)

NAME
       npm-profile - Change settings on your registry profile

   Synopsis
         npm profile enable-2fa [auth-only|auth-and-writes]
         npm profile disable-2fa
         npm profile get [<key>]
         npm profile set <key> <value>

       Note: This command is unaware of workspaces.

   Description
       Change your profile information on the registry.  Note that this command depends on the registry implementation, so third-party registries
       may not support this interface.

       • npm profile get [<property>]: Display all of the properties of your profile, or one or more specific properties.  It looks like:

         +-----------------+---------------------------+
         | name            | example                   |
         +-----------------+---------------------------+
         | email           | me@example.com (verified) |
         +-----------------+---------------------------+
         | two factor auth | auth-and-writes           |
         +-----------------+---------------------------+
         | fullname        | Example User              |
         +-----------------+---------------------------+
         | homepage        |                           |
         +-----------------+---------------------------+
         | freenode        |                           |
         +-----------------+---------------------------+
         | twitter         |                           |
         +-----------------+---------------------------+
         | github          |                           |
         +-----------------+---------------------------+
         | created         | 2015-02-26T01:38:35.892Z  |
         +-----------------+---------------------------+
         | updated         | 2017-10-02T21:29:45.922Z  |
         +-----------------+---------------------------+

       • npm profile set <property> <value>: Set the value of a profile property. You can set the following properties this way: email, fullname,
         homepage, freenode, twitter, github

       • npm profile set password: Change your password.  This is interactive, you'll be prompted for your current password and a new password.
         You'll also be prompted for an OTP if you have two-factor authentication enabled.

       • npm profile enable-2fa [auth-and-writes|auth-only]: Enables two-factor authentication. Defaults to auth-and-writes mode. Modes are:

         • auth-only: Require an OTP when logging in or making changes to your account's authentication.  The OTP will be required on both the
           website and the command line.

         • auth-and-writes: Requires an OTP at all the times auth-only does, and also requires one when publishing a module, setting the latest
           dist-tag, or changing access via npm access and npm owner.

       • npm profile disable-2fa: Disables two-factor authentication.

   Details
       Some of these commands may not be available on non npmjs.com registries.

   Configuration
   registry
       • Default: "https://registry.npmjs.org/"

       • Type: URL

       The base URL of the npm registry.

   json
       • Default: false

       • Type: Boolean

       Whether or not to output JSON data, rather than the normal output.

       • In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

       Not supported by all npm commands.

   parseable
       • Default: false

       • Type: Boolean

       Output parseable results from commands that write to standard output. For npm search, this will be tab-separated table format.

   otp
       • Default: null

       • Type: null or String

       This is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with npm access.

       If not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.

   See Also
       • npm help adduser

       • npm help registry

       • npm help config

       • npm help npmrc

       • npm help owner

       • npm help whoami

       • npm help token

                                                                     July 2022                                                      NPM-PROFILE(1)

------------------------------------------------------------
[ npm prune --help 2>&1 ]
Remove extraneous packages

Usage:
npm prune [[<@scope>/]<pkg>...]

Options:
[--omit <dev|optional|peer> [--omit <dev|optional|peer> ...]] [--dry-run]
[--json] [--foreground-scripts] [--ignore-scripts]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces] [--include-workspace-root] [--install-links]

Run "npm help prune" for more info

------------------------------
[ man npm prune 2>&1 ]
NPM-PRUNE(1)                                                                                                                          NPM-PRUNE(1)

NAME
       npm-prune - Remove extraneous packages

   Synopsis
         npm prune [[<@scope>/]<pkg>...]

   Description
       This command removes "extraneous" packages.  If a package name is provided, then only packages matching one of the supplied names are
       removed.

       Extraneous packages are those present in the node_modules folder that are not listed as any package's dependency list.

       If the --production flag is specified or the NODE_ENV environment variable is set to production, this command will remove the packages
       specified in your devDependencies. Setting --no-production will negate NODE_ENV being set to production.

       If the --dry-run flag is used then no changes will actually be made.

       If the --json flag is used, then the changes npm prune made (or would have made with --dry-run) are printed as a JSON object.

       In normal operation, extraneous modules are pruned automatically, so you'll only need this command with the --production flag.  However, in
       the real world, operation is not always "normal".  When crashes or mistakes happen, this command can help clean up any resulting garbage.

   Configuration
   omit
       • Default: 'dev' if the NODE_ENV environment variable is set to 'production', otherwise empty.

       • Type: "dev", "optional", or "peer" (can be set multiple times)

       Dependency types to omit from the installation tree on disk.

       Note that these dependencies are still resolved and added to the package-lock.json or npm-shrinkwrap.json file. They are just not
       physically installed on disk.

       If a package type appears in both the --include and --omit lists, then it will be included.

       If the resulting omit list includes 'dev', then the NODE_ENV environment variable will be set to 'production' for all lifecycle scripts.

   dry-run
       • Default: false

       • Type: Boolean

       Indicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any
       of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack and publish.

       Note: This is NOT honored by other network related commands, eg dist-tags, owner, etc.

   json
       • Default: false

       • Type: Boolean

       Whether or not to output JSON data, rather than the normal output.

       • In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

       Not supported by all npm commands.

   foreground-scripts
       • Default: false

       • Type: Boolean

       Run all build scripts (ie, preinstall, install, and postinstall) scripts for installed packages in the foreground process, sharing standard
       input, output, and error with the main npm process.

       Note that this will generally make installs run slower, and be much noisier, but can be useful for debugging.

   ignore-scripts
       • Default: false

       • Type: Boolean

       If true, npm does not run scripts specified in package.json files.

       Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script
       will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

   include-workspace-root
       • Default: false

       • Type: Boolean

       Include the workspace root when workspaces are enabled for a command.

       When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate
       only on the specified workspaces, and not on the root project.

       This value is not exported to the environment for child processes.

   install-links
       • Default: false

       • Type: Boolean

       When set file: protocol dependencies that exist outside of the project root will be packed and installed as regular dependencies instead of
       creating a symlink. This option has no effect on workspaces.

   See Also
       • npm help uninstall

       • npm help folders

       • npm help ls

                                                                     July 2022                                                        NPM-PRUNE(1)

------------------------------------------------------------
[ npm publish --help 2>&1 ]
Publish a package

Usage:
npm publish <package-spec>

Options:
[--tag <tag>] [--access <restricted|public>] [--dry-run] [--otp <otp>]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces] [--include-workspace-root]

Run "npm help publish" for more info

------------------------------
[ man npm publish 2>&1 ]
NPM-PUBLISH(1)                                                                                                                      NPM-PUBLISH(1)

NAME
       npm-publish - Publish a package

   Synopsis
         npm publish <package-spec>

   Description
       Publishes a package to the registry so that it can be installed by name.

       By default npm will publish to the public registry. This can be overridden by specifying a different default registry or using a npm help
       scope in the name, combined with a scope-configured registry (see npm help package.json).

       A package is interpreted the same way as other commands (like npm install and can be:

       • a) a folder containing a program described by a npm help package.json file

       • b) a gzipped tarball containing (a)

       • c) a url that resolves to (b)

       • d) a <name>@<version> that is published on the registry (see npm help registry) with (c)

       • e) a <name>@<tag> (see npm help dist-tag) that points to (d)

       • f) a <name> that has a "latest" tag satisfying (e)

       • g) a <git remote url> that resolves to (a)

       The publish will fail if the package name and version combination already exists in the specified registry.

       Once a package is published with a given name and version, that specific name and version combination can never be used again, even if it
       is removed with npm help unpublish.

       As of npm@5, both a sha1sum and an integrity field with a sha512sum of the tarball will be submitted to the registry during publication.
       Subsequent installs will use the strongest supported algorithm to verify downloads.

       Similar to --dry-run see npm help pack, which figures out the files to be included and packs them into a tarball to be uploaded to the
       registry.

   Files included in package
       To see what will be included in your package, run npx npm-packlist.  All files are included by default, with the following exceptions:

       • Certain files that are relevant to package installation and distribution are always included.  For example, package.json, README.md,
         LICENSE, and so on.

       • If there is a "files" list in npm help package.json, then only the files specified will be included.  (If directories are specified, then
         they will be walked recursively and their contents included, subject to the same ignore rules.)

       • If there is a .gitignore or .npmignore file, then ignored files in that and all child directories will be excluded from the package.  If
         both files exist, then the .gitignore is ignored, and only the .npmignore is used.  .npmignore files follow the same pattern rules
         https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository#_ignoring as .gitignore files

       • If the file matches certain patterns, then it will never be included, unless explicitly added to the "files" list in package.json, or
         un-ignored with a ! rule in a .npmignore or .gitignore file.

       • Symbolic links are never included in npm packages.

       See npm help developers for full details on what's included in the published package, as well as details on how the package is built.

   Configuration
   tag
       • Default: "latest"

       • Type: String

       If you ask npm to install a package and don't tell it a specific version, then it will install the specified tag.

       Also the tag that is added to the package@version specified by the npm tag command, if no explicit tag is given.

       When used by the npm diff command, this is the tag used to fetch the tarball that will be compared with the local files by default.

   access
       • Default: 'restricted' for scoped packages, 'public' for unscoped packages

       • Type: null, "restricted", or "public"

       When publishing scoped packages, the access level defaults to restricted.  If you want your scoped package to be publicly viewable (and
       installable) set --access=public. The only valid values for access are public and restricted. Unscoped packages always have an access level
       of public.

       Note: Using the --access flag on the npm publish command will only set the package access level on the initial publish of the package. Any
       subsequent npm publish commands using the --access flag will not have an effect to the access level. To make changes to the access level
       after the initial publish use npm access.

   dry-run
       • Default: false

       • Type: Boolean

       Indicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any
       of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack and publish.

       Note: This is NOT honored by other network related commands, eg dist-tags, owner, etc.

   otp
       • Default: null

       • Type: null or String

       This is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with npm access.

       If not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

   include-workspace-root
       • Default: false

       • Type: Boolean

       Include the workspace root when workspaces are enabled for a command.

       When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate
       only on the specified workspaces, and not on the root project.

       This value is not exported to the environment for child processes.

   See Also
       • npm help package spec

       • npm-packlist package http://npm.im/npm-packlist

       • npm help registry

       • npm help scope

       • npm help adduser

       • npm help owner

       • npm help deprecate

       • npm help dist-tag

       • npm help pack

       • npm help profile

                                                                     July 2022                                                      NPM-PUBLISH(1)

------------------------------------------------------------
[ npm rebuild --help 2>&1 ]
Rebuild a package

Usage:
npm rebuild [<package-spec>] ...]

Options:
[-g|--global] [--no-bin-links] [--foreground-scripts] [--ignore-scripts]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces] [--include-workspace-root] [--install-links]

alias: rb

Run "npm help rebuild" for more info

------------------------------
[ man npm rebuild 2>&1 ]
NPM-REBUILD(1)                                                                                                                      NPM-REBUILD(1)

NAME
       npm-rebuild - Rebuild a package

   Synopsis
         npm rebuild [<package-spec>] ...]

         alias: rb

   Description
       This command runs the npm build command on the matched folders.  This is useful when you install a new version of node, and must recompile
       all your C++ addons with the new binary.  It is also useful when installing with --ignore-scripts and --no-bin-links, to explicitly choose
       which packages to build and/or link bins.

       If one or more package specs are provided, then only packages with a name and version matching one of the specifiers will be rebuilt.

   Configuration
   global
       • Default: false

       • Type: Boolean

       Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See npm help
       folders for more on the differences in behavior.

       • packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.

       • bin files are linked to {prefix}/bin

       • man pages are linked to {prefix}/share/man

   bin-links
       • Default: true

       • Type: Boolean

       Tells npm to create symlinks (or .cmd shims on Windows) for package executables.

       Set to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on
       ostensibly Unix systems.

   foreground-scripts
       • Default: false

       • Type: Boolean

       Run all build scripts (ie, preinstall, install, and postinstall) scripts for installed packages in the foreground process, sharing standard
       input, output, and error with the main npm process.

       Note that this will generally make installs run slower, and be much noisier, but can be useful for debugging.

   ignore-scripts
       • Default: false

       • Type: Boolean

       If true, npm does not run scripts specified in package.json files.

       Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script
       will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

   include-workspace-root
       • Default: false

       • Type: Boolean

       Include the workspace root when workspaces are enabled for a command.

       When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate
       only on the specified workspaces, and not on the root project.

       This value is not exported to the environment for child processes.

   install-links
       • Default: false

       • Type: Boolean

       When set file: protocol dependencies that exist outside of the project root will be packed and installed as regular dependencies instead of
       creating a symlink. This option has no effect on workspaces.

   See Also
       • npm help package spec

       • npm help install

                                                                     July 2022                                                      NPM-REBUILD(1)

------------------------------------------------------------
[ npm repo --help 2>&1 ]
Open package repository page in the browser

Usage:
npm repo [<pkgname> [<pkgname> ...]]

Options:
[--no-browser|--browser <browser>] [--registry <registry>]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces] [--include-workspace-root]

Run "npm help repo" for more info

------------------------------
[ man npm repo 2>&1 ]
NPM-REPO(1)                                                                                                                            NPM-REPO(1)

NAME
       npm-repo - Open package repository page in the browser

   Synopsis
         npm repo [<pkgname> [<pkgname> ...]]

   Description
       This command tries to guess at the likely location of a package's repository URL, and then tries to open it using the --browser config
       param. If no package name is provided, it will search for a package.json in the current folder and use the repository property.

   Configuration
   browser
       • Default: OS X: "open", Windows: "start", Others: "xdg-open"

       • Type: null, Boolean, or String

       The browser that is called by npm commands to open websites.

       Set to false to suppress browser behavior and instead print urls to terminal.

       Set to true to use default system URL opener.

   registry
       • Default: "https://registry.npmjs.org/"

       • Type: URL

       The base URL of the npm registry.

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

   include-workspace-root
       • Default: false

       • Type: Boolean

       Include the workspace root when workspaces are enabled for a command.

       When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate
       only on the specified workspaces, and not on the root project.

       This value is not exported to the environment for child processes.

   See Also
       • npm help docs

       • npm help config

                                                                     July 2022                                                         NPM-REPO(1)

------------------------------------------------------------
[ npm restart --help 2>&1 ]
Restart a package

Usage:
npm restart [-- <args>]

Options:
[--ignore-scripts] [--script-shell <script-shell>]

Run "npm help restart" for more info

------------------------------
[ man npm restart 2>&1 ]
NPM-RESTART(1)                                                                                                                      NPM-RESTART(1)

NAME
       npm-restart - Restart a package

   Synopsis
         npm restart [-- <args>]

   Description
       This restarts a project.  It is equivalent to running npm run-script restart.

       If the current project has a "restart" script specified in package.json, then the following scripts will be run:

       1. prerestart

       2. restart

       3. postrestart

       If it does not have a "restart" script specified, but it does have stop and/or start scripts, then the following scripts will be run:

       1. prerestart

       2. prestop

       3. stop

       4. poststop

       5. prestart

       6. start

       7. poststart

       8. postrestart

   Configuration
   ignore-scripts
       • Default: false

       • Type: Boolean

       If true, npm does not run scripts specified in package.json files.

       Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script
       will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.

   script-shell
       • Default: '/bin/sh' on POSIX systems, 'cmd.exe' on Windows

       • Type: null or String

       The shell to use for scripts run with the npm exec, npm run and npm init <package-spec> commands.

   See Also
       • npm help run-script

       • npm help scripts

       • npm help test

       • npm help start

       • npm help stop

       • npm help restart

                                                                     July 2022                                                      NPM-RESTART(1)

------------------------------------------------------------
[ npm root --help 2>&1 ]
Display npm root

Usage:
npm root

Options:
[-g|--global]

Run "npm help root" for more info

------------------------------
[ man npm root 2>&1 ]
NPM-ROOT(1)                                                                                                                            NPM-ROOT(1)

NAME
       npm-root - Display npm root

   Synopsis
         npm root

   Description
       Print the effective node_modules folder to standard out.

       Useful for using npm in shell scripts that do things with the node_modules folder.  For example:

         #!/bin/bash
         global_node_modules="$(npm root --global)"
         echo "Global packages installed in: ${global_node_modules}"

   Configuration
   global
       • Default: false

       • Type: Boolean

       Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See npm help
       folders for more on the differences in behavior.

       • packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.

       • bin files are linked to {prefix}/bin

       • man pages are linked to {prefix}/share/man

   See Also
       • npm help prefix

       • npm help bin

       • npm help folders

       • npm help config

       • npm help npmrc

                                                                     July 2022                                                         NPM-ROOT(1)

------------------------------------------------------------
[ npm run-script --help 2>&1 ]
Run arbitrary package scripts

Usage:
npm run-script <command> [-- <args>]

Options:
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces] [--include-workspace-root] [--if-present] [--ignore-scripts]
[--foreground-scripts] [--script-shell <script-shell>]

aliases: run, rum, urn

Run "npm help run-script" for more info

------------------------------
[ man npm run-script 2>&1 ]
NPM-RUN-SCRIPT(1)                                                                                                                NPM-RUN-SCRIPT(1)

NAME
       npm-run-script - Run arbitrary package scripts

   Synopsis
         npm run-script <command> [-- <args>]

         aliases: run, rum, urn

   Description
       This runs an arbitrary command from a package's "scripts" object.  If no "command" is provided, it will list the available scripts.

       run[-script] is used by the test, start, restart, and stop commands, but can be called directly, as well. When the scripts in the package
       are printed out, they're separated into lifecycle (test, start, restart) and directly-run scripts.

       Any positional arguments are passed to the specified script.  Use -- to pass --prefixed flags and options which would otherwise be parsed
       by npm.

       For example:

         npm run test -- --grep="pattern"

       The arguments will only be passed to the script specified after npm run and not to any pre or post script.

       The env script is a special built-in command that can be used to list environment variables that will be available to the script at
       runtime. If an "env" command is defined in your package, it will take precedence over the built-in.

       In addition to the shell's pre-existing PATH, npm run adds node_modules/.bin to the PATH provided to scripts. Any binaries provided by
       locally-installed dependencies can be used without the node_modules/.bin prefix. For example, if there is a devDependency on tap in your
       package, you should write:

         "scripts": {"test": "tap test/*.js"}

       instead of

         "scripts": {"test": "node_modules/.bin/tap test/*.js"}

       The actual shell your script is run within is platform dependent. By default, on Unix-like systems it is the /bin/sh command, on Windows it
       is cmd.exe.  The actual shell referred to by /bin/sh also depends on the system.  You can customize the shell with the script-shell
       configuration.

       Scripts are run from the root of the package folder, regardless of what the current working directory is when npm run is called. If you
       want your script to use different behavior based on what subdirectory you're in, you can use the INIT_CWD environment variable, which holds
       the full path you were in when you ran npm run.

       npm run sets the NODE environment variable to the node executable with which npm is executed.

       If you try to run a script without having a node_modules directory and it fails, you will be given a warning to run npm install, just in
       case you've forgotten.

   Workspaces support
       You may use the workspace or workspaces configs in order to run an arbitrary command from a package's "scripts" object in the context of
       the specified workspaces. If no "command" is provided, it will list the available scripts for each of these configured workspaces.

       Given a project with configured workspaces, e.g:

         .
         +-- package.json
         `-- packages
            +-- a
            |   `-- package.json
            +-- b
            |   `-- package.json
            `-- c
                `-- package.json

       Assuming the workspace configuration is properly set up at the root level package.json file. e.g:

         {
             "workspaces": [ "./packages/*" ]
         }

       And that each of the configured workspaces has a configured test script, we can run tests in all of them using the workspaces config:

         npm test --workspaces

   Filtering workspaces
       It's also possible to run a script in a single workspace using the workspace config along with a name or directory path:

         npm test --workspace=a

       The workspace config can also be specified multiple times in order to run a specific script in the context of multiple workspaces. When
       defining values for the workspace config in the command line, it also possible to use -w as a shorthand, e.g:

         npm test -w a -w b

       This last command will run test in both ./packages/a and ./packages/b packages.

   Configuration
   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

   include-workspace-root
       • Default: false

       • Type: Boolean

       Include the workspace root when workspaces are enabled for a command.

       When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate
       only on the specified workspaces, and not on the root project.

       This value is not exported to the environment for child processes.

   if-present
       • Default: false

       • Type: Boolean

       If true, npm will not exit with an error code when run-script is invoked for a script that isn't defined in the scripts section of
       package.json.  This option can be used when it's desirable to optionally run a script when it's present and fail if the script fails. This
       is useful, for example, when running scripts that may only apply for some builds in an otherwise generic CI setup.

       This value is not exported to the environment for child processes.

   ignore-scripts
       • Default: false

       • Type: Boolean

       If true, npm does not run scripts specified in package.json files.

       Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script
       will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.

   foreground-scripts
       • Default: false

       • Type: Boolean

       Run all build scripts (ie, preinstall, install, and postinstall) scripts for installed packages in the foreground process, sharing standard
       input, output, and error with the main npm process.

       Note that this will generally make installs run slower, and be much noisier, but can be useful for debugging.

   script-shell
       • Default: '/bin/sh' on POSIX systems, 'cmd.exe' on Windows

       • Type: null or String

       The shell to use for scripts run with the npm exec, npm run and npm init <package-spec> commands.

   See Also
       • npm help scripts

       • npm help test

       • npm help start

       • npm help restart

       • npm help stop

       • npm help config

       • npm help workspaces

                                                                     July 2022                                                   NPM-RUN-SCRIPT(1)

------------------------------------------------------------
[ npm search --help 2>&1 ]
Search for packages

Usage:
npm search [search terms ...]

Options:
[-l|--long] [--json] [--color|--no-color|--color always] [-p|--parseable]
[--no-description] [--searchopts <searchopts>] [--searchexclude <searchexclude>]
[--registry <registry>] [--prefer-online] [--prefer-offline] [--offline]

aliases: find, s, se

Run "npm help search" for more info

------------------------------
[ man npm search 2>&1 ]
NPM-SEARCH(1)                                                                                                                        NPM-SEARCH(1)

NAME
       npm-search - Search for packages

   Synopsis
         npm search [search terms ...]

         aliases: find, s, se

       Note: This command is unaware of workspaces.

   Description
       Search the registry for packages matching the search terms. npm search performs a linear, incremental, lexically-ordered search through
       package metadata for all files in the registry. If your terminal has color support, it will further highlight the matches in the results.
       This can be disabled with the config item color

       Additionally, using the --searchopts and --searchexclude options paired with more search terms will include and exclude further patterns.
       The main difference between --searchopts and the standard search terms is that the former does not highlight results in the output and you
       can use them more fine-grained filtering. Additionally, you can add both of these to your config to change default search filtering
       behavior.

       Search also allows targeting of maintainers in search results, by prefixing their npm username with =.

       If a term starts with /, then it's interpreted as a regular expression and supports standard JavaScript RegExp syntax. In this case search
       will ignore a trailing / .  (Note you must escape or quote many regular expression characters in most shells.)

   Configuration
   long
       • Default: false

       • Type: Boolean

       Show extended information in ls, search, and help-search.

   json
       • Default: false

       • Type: Boolean

       Whether or not to output JSON data, rather than the normal output.

       • In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

       Not supported by all npm commands.

   color
       • Default: true unless the NO_COLOR environ is set to something other than '0'

       • Type: "always" or Boolean

       If false, never shows colors. If "always" then always shows colors. If true, then only prints color codes for tty file descriptors.

   parseable
       • Default: false

       • Type: Boolean

       Output parseable results from commands that write to standard output. For npm search, this will be tab-separated table format.

   description
       • Default: true

       • Type: Boolean

       Show the description in npm search

   searchopts
       • Default: ""

       • Type: String

       Space-separated options that are always passed to search.

   searchexclude
       • Default: ""

       • Type: String

       Space-separated options that limit the results from search.

   registry
       • Default: "https://registry.npmjs.org/"

       • Type: URL

       The base URL of the npm registry.

   prefer-online
       • Default: false

       • Type: Boolean

       If true, staleness checks for cached data will be forced, making the CLI look for updates immediately even for fresh package data.

   prefer-offline
       • Default: false

       • Type: Boolean

       If true, staleness checks for cached data will be bypassed, but missing data will be requested from the server. To force full offline mode,
       use --offline.

   offline
       • Default: false

       • Type: Boolean

       Force offline mode: no network requests will be done during install. To allow the CLI to fill in missing cache data, see --prefer-offline.

   See Also
       • npm help registry

       • npm help config

       • npm help npmrc

       • npm help view

       • npm help cache

       • https://npm.im/npm-registry-fetch

                                                                     July 2022                                                       NPM-SEARCH(1)

------------------------------------------------------------
[ npm set --help 2>&1 ]
Set a value in the npm configuration

Usage:
npm set <key>=<value> [<key>=<value> ...] (See `npm config`)

Run "npm help set" for more info

------------------------------
[ man npm set 2>&1 ]
NPM(1)                                                                                                                                      NPM(1)

NAME
       npm - javascript package manager

   Synopsis
   Version
       8.15.0

   Description
       npm is the package manager for the Node JavaScript platform.  It puts modules in place so that node can find them, and manages dependency
       conflicts intelligently.

       It is extremely configurable to support a variety of use cases.  Most commonly, you use it to publish, discover, install, and develop node
       programs.

       Run npm help to get a list of available commands.

   Important
       npm comes preconfigured to use npm's public registry at https://registry.npmjs.org by default. Use of the npm public registry is subject to
       terms of use available at https://docs.npmjs.com/policies/terms.

       You can configure npm to use any compatible registry you like, and even run your own registry. Use of someone else's registry is governed
       by their terms of use.

   Introduction
       You probably got npm because you want to install stuff.

       The very first thing you will most likely want to run in any node program is npm install to install its dependencies.

       You can also run npm install blerg to install the latest version of "blerg".  Check out npm help install for more info.  It can do a lot of
       stuff.

       Use the npm search command to show everything that's available in the public registry.  Use npm ls to show everything you've installed.

   Dependencies
       If a package lists a dependency using a git URL, npm will install that dependency using the git https://github.com/git-guides/install-git
       command and will generate an error if it is not installed.

       If one of the packages npm tries to install is a native node module and requires compiling of C++ Code, npm will use node-gyp
       https://github.com/nodejs/node-gyp for that task.  For a Unix system, node-gyp https://github.com/nodejs/node-gyp needs Python, make and a
       buildchain like GCC. On Windows, Python and Microsoft Visual Studio C++ are needed. For more information visit the node-gyp repository
       https://github.com/nodejs/node-gyp and the node-gyp Wiki https://github.com/nodejs/node-gyp/wiki.

   Directories
       See npm help folders to learn about where npm puts stuff.

       In particular, npm has two modes of operation:

       • local mode: npm installs packages into the current project directory, which defaults to the current working directory.  Packages install
         to ./node_modules, and bins to ./node_modules/.bin.

       • global mode: npm installs packages into the install prefix at $npm_config_prefix/lib/node_modules and bins to $npm_config_prefix/bin.

       Local mode is the default.  Use -g or --global on any command to run in global mode instead.

   Developer Usage
       If you're using npm to develop and publish your code, check out the following help topics:

       • json: Make a package.json file.  See npm help package.json.

       • link: Links your current working code into Node's path, so that you don't have to reinstall every time you make a change.  Use npm help
         npm link to do this.

       • install: It's a good idea to install things if you don't need the symbolic link.  Especially, installing other peoples code from the
         registry is done via npm help install

       • adduser: Create an account or log in.  When you do this, npm will store credentials in the user config file.

       • publish: Use the npm help publish command to upload your code to the registry.

   Configuration
       npm is extremely configurable.  It reads its configuration options from 5 places.

       • Command line switches: Set a config with --key val.  All keys take a value, even if they are booleans (the config parser doesn't know
         what the options are at the time of parsing).  If you do not provide a value (--key) then the option is set to boolean true.

       • Environment Variables: Set any config by prefixing the name in an environment variable with npm_config_.  For example, export
         npm_config_key=val.

       • User Configs: The file at $HOME/.npmrc is an ini-formatted list of configs.  If present, it is parsed.  If the userconfig option is set
         in the cli or env, that file will be used instead.

       • Global Configs: The file found at ./etc/npmrc (relative to the global prefix will be parsed if it is found.  See npm help prefix for more
         info on the global prefix.  If the globalconfig option is set in the cli, env, or user config, then that file is parsed instead.

       • Defaults: npm's default configuration options are defined in lib/utils/config-defs.js.  These must not be changed.

       See npm help config for much much more information.

   Contributions
       Patches welcome!

       If you would like to help, but don't know what to work on, read the contributing guidelines
       https://github.com/npm/cli/blob/latest/CONTRIBUTING.md and check the issues list.

   Bugs
       When you find issues, please report them: https://github.com/npm/cli/issues

       Please be sure to follow the template and bug reporting guidelines.

   Feature Requests
       Discuss new feature ideas on our discussion forum:

       • https://github.com/npm/feedback

       Or suggest formal RFC proposals:

       • https://github.com/npm/rfcs

   See Also
       • npm help help

       • npm help package.json

       • npm help npmrc

       • npm help config

       • npm help install

       • npm help prefix

       • npm help publish

                                                                     July 2022                                                              NPM(1)
No manual entry for set

------------------------------------------------------------
[ npm set-script --help 2>&1 ]
Set tasks in the scripts section of package.json, deprecated

Usage:
npm set-script [<script>] [<command>]

Options:
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces] [--include-workspace-root]

Run "npm help set-script" for more info

------------------------------
[ man npm set-script 2>&1 ]
NPM-SET-SCRIPT(1)                                                                                                                NPM-SET-SCRIPT(1)

NAME
       npm-set-script - Set tasks in the scripts section of package.json

   Synopsis
       An npm command that lets you create a task in the scripts section of the package.json.

       Deprecated.

         npm set-script [<script>] [<command>]

       Example:

       • npm set-script start "http-server ."

         {
           "name": "my-project",
           "scripts": {
             "start": "http-server .",
             "test": "some existing value"
           }
         }

   Configuration
   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

   include-workspace-root
       • Default: false

       • Type: Boolean

       Include the workspace root when workspaces are enabled for a command.

       When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate
       only on the specified workspaces, and not on the root project.

       This value is not exported to the environment for child processes.

   See Also
       • npm help run-script

       • npm help install

       • npm help test

       • npm help start

                                                                     July 2022                                                   NPM-SET-SCRIPT(1)

------------------------------------------------------------
[ npm shrinkwrap --help 2>&1 ]
Lock down dependency versions for publication

Usage:
npm shrinkwrap

Run "npm help shrinkwrap" for more info

------------------------------
[ man npm shrinkwrap 2>&1 ]
NPM-SHRINKWRAP(1)                                                                                                                NPM-SHRINKWRAP(1)

NAME
       npm-shrinkwrap - Lock down dependency versions for publication

   Synopsis
         npm shrinkwrap

       Note: This command is unaware of workspaces.

   Description
       This command repurposes package-lock.json into a publishable npm-shrinkwrap.json or simply creates a new one. The file created and updated
       by this command will then take precedence over any other existing or future package-lock.json files. For a detailed explanation of the
       design and purpose of package locks in npm, see npm help package-lock-json.

   See Also
       • npm help install

       • npm help run-script

       • npm help scripts

       • npm help package.json

       • npm help package-lock.json

       • npm help npm-shrinkwrap.json

       • npm help ls

                                                                     July 2022                                                   NPM-SHRINKWRAP(1)

------------------------------------------------------------
[ npm star --help 2>&1 ]
Mark your favorite packages

Usage:
npm star [<package-spec>...]

Options:
[--registry <registry>] [--no-unicode] [--otp <otp>]

Run "npm help star" for more info

------------------------------
[ man npm star 2>&1 ]
NPM-STAR(1)                                                                                                                            NPM-STAR(1)

NAME
       npm-star - Mark your favorite packages

   Synopsis
         npm star [<package-spec>...]

       Note: This command is unaware of workspaces.

   Description
       "Starring" a package means that you have some interest in it.  It's a vaguely positive way to show that you care.

       It's a boolean thing. Starring repeatedly has no additional effect.

   More
       There's also these extra commands to help you manage your favorite packages:

   Unstar
       You can also "unstar" a package using npm help unstar

       "Unstarring" is the same thing, but in reverse.

   Listing stars
       You can see all your starred packages using npm help stars

   Configuration
   registry
       • Default: "https://registry.npmjs.org/"

       • Type: URL

       The base URL of the npm registry.

   unicode
       • Default: false on windows, true on mac/unix systems with a unicode locale, as defined by the LC_ALL, LC_CTYPE, or LANG environment
         variables.

       • Type: Boolean

       When set to true, npm uses unicode characters in the tree output. When false, it uses ascii characters instead of unicode glyphs.

   otp
       • Default: null

       • Type: null or String

       This is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with npm access.

       If not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.

   See Also
       • npm help package spec

       • npm help unstar

       • npm help stars

       • npm help view

       • npm help whoami

       • npm help adduser

                                                                     July 2022                                                         NPM-STAR(1)

------------------------------------------------------------
[ npm stars --help 2>&1 ]
View packages marked as favorites

Usage:
npm stars [<user>]

Options:
[--registry <registry>]

Run "npm help stars" for more info

------------------------------
[ man npm stars 2>&1 ]
NPM-STARS(1)                                                                                                                          NPM-STARS(1)

NAME
       npm-stars - View packages marked as favorites

   Synopsis
         npm stars [<user>]

       Note: This command is unaware of workspaces.

   Description
       If you have starred a lot of neat things and want to find them again quickly this command lets you do just that.

       You may also want to see your friend's favorite packages, in this case you will most certainly enjoy this command.

   Configuration
   registry
       • Default: "https://registry.npmjs.org/"

       • Type: URL

       The base URL of the npm registry.

   See Also
       • npm help star

       • npm help unstar

       • npm help view

       • npm help whoami

       • npm help adduser

                                                                     July 2022                                                        NPM-STARS(1)

------------------------------------------------------------
[ npm start --help 2>&1 ]
Start a package

Usage:
npm start [-- <args>]

Options:
[--ignore-scripts] [--script-shell <script-shell>]

Run "npm help start" for more info

------------------------------
[ man npm start 2>&1 ]
NPM-START(1)                                                                                                                          NPM-START(1)

NAME
       npm-start - Start a package

   Synopsis
         npm start [-- <args>]

   Description
       This runs a predefined command specified in the "start" property of a package's "scripts" object.

       If the "scripts" object does not define a  "start" property, npm will run node server.js.

       Note that this is different from the default node behavior of running the file specified in a package's "main" attribute when evoking with
       node .

       As of npm@2.0.0 https://blog.npmjs.org/post/98131109725/npm-2-0-0, you can use custom arguments when executing scripts. Refer to npm help
       run-script for more details.

   Example
         {
           "scripts": {
             "start": "node foo.js"
           }
         }

         npm start

         > npm@x.x.x start
         > node foo.js

         (foo.js output would be here)

   Configuration
   ignore-scripts
       • Default: false

       • Type: Boolean

       If true, npm does not run scripts specified in package.json files.

       Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script
       will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.

   script-shell
       • Default: '/bin/sh' on POSIX systems, 'cmd.exe' on Windows

       • Type: null or String

       The shell to use for scripts run with the npm exec, npm run and npm init <package-spec> commands.

   See Also
       • npm help run-script

       • npm help scripts

       • npm help test

       • npm help restart

       • npm help stop

                                                                     July 2022                                                        NPM-START(1)

------------------------------------------------------------
[ npm stop --help 2>&1 ]
Stop a package

Usage:
npm stop [-- <args>]

Options:
[--ignore-scripts] [--script-shell <script-shell>]

Run "npm help stop" for more info

------------------------------
[ man npm stop 2>&1 ]
NPM-STOP(1)                                                                                                                            NPM-STOP(1)

NAME
       npm-stop - Stop a package

   Synopsis
         npm stop [-- <args>]

   Description
       This runs a predefined command specified in the "stop" property of a package's "scripts" object.

       Unlike with npm help start, there is no default script that will run if the "stop" property is not defined.

   Example
         {
           "scripts": {
             "stop": "node bar.js"
           }
         }

         npm stop

         > npm@x.x.x stop
         > node bar.js

         (bar.js output would be here)

   Configuration
   ignore-scripts
       • Default: false

       • Type: Boolean

       If true, npm does not run scripts specified in package.json files.

       Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script
       will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.

   script-shell
       • Default: '/bin/sh' on POSIX systems, 'cmd.exe' on Windows

       • Type: null or String

       The shell to use for scripts run with the npm exec, npm run and npm init <package-spec> commands.

   See Also
       • npm help run-script

       • npm help scripts

       • npm help test

       • npm help start

       • npm help restart

                                                                     July 2022                                                         NPM-STOP(1)

------------------------------------------------------------
[ npm team --help 2>&1 ]
Manage organization teams and team memberships

Usage:
npm team create <scope:team> [--otp <otpcode>]
npm team destroy <scope:team> [--otp <otpcode>]
npm team add <scope:team> <user> [--otp <otpcode>]
npm team rm <scope:team> <user> [--otp <otpcode>]
npm team ls <scope>|<scope:team>

Options:
[--registry <registry>] [--otp <otp>] [-p|--parseable] [--json]

Run "npm help team" for more info

------------------------------
[ man npm team 2>&1 ]
NPM-TEAM(1)                                                                                                                            NPM-TEAM(1)

NAME
       npm-team - Manage organization teams and team memberships

   Synopsis
         npm team create <scope:team> [--otp <otpcode>]
         npm team destroy <scope:team> [--otp <otpcode>]
         npm team add <scope:team> <user> [--otp <otpcode>]
         npm team rm <scope:team> <user> [--otp <otpcode>]
         npm team ls <scope>|<scope:team>

       Note: This command is unaware of workspaces.

   Description
       Used to manage teams in organizations, and change team memberships. Does not handle permissions for packages.

       Teams must always be fully qualified with the organization/scope they belong to when operating on them, separated by a colon (:). That is,
       if you have a newteam team in an org organization, you must always refer to that team as @org:newteam in these commands.

       If you have two-factor authentication enabled in auth-and-writes mode, then you can provide a code from your authenticator with [--otp
       <otpcode>].  If you don't include this then you will be prompted.

       • create / destroy: Create a new team, or destroy an existing one. Note: You cannot remove the developers team, <a
         href="https://docs.npmjs.com/about-developers-team" target="_blank">learn more.</a> Here's how to create a new team newteam under the org
         org:

         npm team create @org:newteam
       You should see a confirming message such as: +@org:newteam once the new team has been created.

       • add: Add a user to an existing team.  Adding a new user username to a team named newteam under the org org:

         npm team add @org:newteam username
       On success, you should see a message: username added to @org:newteam

       • rm: Using npm team rm you can also remove users from a team they belong to.  Here's an example removing user username from newteam team
         in org organization:

         npm team rm @org:newteam username
       Once the user is removed a confirmation message is displayed: username removed from @org:newteam

       • ls: If performed on an organization name, will return a list of existing teams under that organization. If performed on a team, it will
         instead return a list of all users belonging to that particular team.  Here's an example of how to list all teams from an org named org:

         npm team ls @org
       Example listing all members of a team named newteam:

         npm team ls @org:newteam

   Details
       npm team always operates directly on the current registry, configurable from the command line using --registry=<registry url>.

       You must be a team admin to create teams and manage team membership, under the given organization. Listing teams and team memberships may
       be done by any member of the organization.

       Organization creation and management of team admins and organization members is done through the website, not the npm CLI.

       To use teams to manage permissions on packages belonging to your organization, use the npm access command to grant or revoke the
       appropriate permissions.

   Configuration
   registry
       • Default: "https://registry.npmjs.org/"

       • Type: URL

       The base URL of the npm registry.

   otp
       • Default: null

       • Type: null or String

       This is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with npm access.

       If not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.

   parseable
       • Default: false

       • Type: Boolean

       Output parseable results from commands that write to standard output. For npm search, this will be tab-separated table format.

   json
       • Default: false

       • Type: Boolean

       Whether or not to output JSON data, rather than the normal output.

       • In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

       Not supported by all npm commands.

   See Also
       • npm help access

       • npm help config

       • npm help registry

                                                                     July 2022                                                         NPM-TEAM(1)

------------------------------------------------------------
[ npm test --help 2>&1 ]
Test a package

Usage:
npm test [-- <args>]

Options:
[--ignore-scripts] [--script-shell <script-shell>]

aliases: tst, t

Run "npm help test" for more info

------------------------------
[ man npm test 2>&1 ]
NPM-TEST(1)                                                                                                                            NPM-TEST(1)

NAME
       npm-test - Test a package

   Synopsis
         npm test [-- <args>]

         aliases: tst, t

   Description
       This runs a predefined command specified in the "test" property of a package's "scripts" object.

   Example
         {
           "scripts": {
             "test": "node test.js"
           }
         }

         npm test
         > npm@x.x.x test
         > node test.js

         (test.js output would be here)

   Configuration
   ignore-scripts
       • Default: false

       • Type: Boolean

       If true, npm does not run scripts specified in package.json files.

       Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script
       will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.

   script-shell
       • Default: '/bin/sh' on POSIX systems, 'cmd.exe' on Windows

       • Type: null or String

       The shell to use for scripts run with the npm exec, npm run and npm init <package-spec> commands.

   See Also
       • npm help run-script

       • npm help scripts

       • npm help start

       • npm help restart

       • npm help stop

                                                                     July 2022                                                         NPM-TEST(1)

------------------------------------------------------------
[ npm token --help 2>&1 ]
Manage your authentication tokens

Usage:
npm token list
npm token revoke <id|token>
npm token create [--read-only] [--cidr=list]

Options:
[--read-only] [--cidr <cidr> [--cidr <cidr> ...]] [--registry <registry>]
[--otp <otp>]

Run "npm help token" for more info

------------------------------
[ man npm token 2>&1 ]
NPM-TOKEN(1)                                                                                                                          NPM-TOKEN(1)

NAME
       npm-token - Manage your authentication tokens

   Synopsis
         npm token list
         npm token revoke <id|token>
         npm token create [--read-only] [--cidr=list]

       Note: This command is unaware of workspaces.

   Description
       This lets you list, create and revoke authentication tokens.

       • npm token list: Shows a table of all active authentication tokens. You can request this as JSON with --json or tab-separated values with
         --parseable.

         +--------+---------+------------+----------+----------------+
         | id     | token   | created    | read-only | CIDR whitelist |
         +--------+---------+------------+----------+----------------+
         | 7f3134 | 1fa9ba… | 2017-10-02 | yes      |                |
         +--------+---------+------------+----------+----------------+
         | c03241 | af7aef… | 2017-10-02 | no       | 192.168.0.1/24 |
         +--------+---------+------------+----------+----------------+
         | e0cf92 | 3a436a… | 2017-10-02 | no       |                |
         +--------+---------+------------+----------+----------------+
         | 63eb9d | 74ef35… | 2017-09-28 | no       |                |
         +--------+---------+------------+----------+----------------+
         | 2daaa8 | cbad5f… | 2017-09-26 | no       |                |
         +--------+---------+------------+----------+----------------+
         | 68c2fe | 127e51… | 2017-09-23 | no       |                |
         +--------+---------+------------+----------+----------------+
         | 6334e1 | 1dadd1… | 2017-09-23 | no       |                |
         +--------+---------+------------+----------+----------------+

       • npm token create [--read-only] [--cidr=<cidr-ranges>]: Create a new authentication token. It can be --read-only, or accept a list of CIDR
         https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing ranges with which to limit use of this token. This will prompt you for your
         password, and, if you have two-factor authentication enabled, an otp.  Currently, the cli can not generate automation tokens. Please
         refer to the docs website https://docs.npmjs.com/creating-and-viewing-access-tokens for more information on generating automation tokens.

         +----------------+--------------------------------------+
         | token          | a73c9572-f1b9-8983-983d-ba3ac3cc913d |
         +----------------+--------------------------------------+
         | cidr_whitelist |                                      |
         +----------------+--------------------------------------+
         | readonly       | false                                |
         +----------------+--------------------------------------+
         | created        | 2017-10-02T07:52:24.838Z             |
         +----------------+--------------------------------------+

       • npm token revoke <token|id>: Immediately removes an authentication token from the registry.  You will no longer be able to use it.  This
         can accept both complete tokens (such as those you get back from npm token create, and those found in your .npmrc), and ids as seen in
         the parseable or json output of npm token list.  This will NOT accept the truncated token found in the normal npm token list output.

   Configuration
   read-only
       • Default: false

       • Type: Boolean

       This is used to mark a token as unable to publish when configuring limited access tokens with the npm token create command.

   cidr
       • Default: null

       • Type: null or String (can be set multiple times)

       This is a list of CIDR address to be used when configuring limited access tokens with the npm token create command.

   registry
       • Default: "https://registry.npmjs.org/"

       • Type: URL

       The base URL of the npm registry.

   otp
       • Default: null

       • Type: null or String

       This is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with npm access.

       If not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.

   See Also
       • npm help adduser

       • npm help registry

       • npm help config

       • npm help npmrc

       • npm help owner

       • npm help whoami

       • npm help profile

                                                                     July 2022                                                        NPM-TOKEN(1)

------------------------------------------------------------
[ npm uninstall --help 2>&1 ]
Remove a package

Usage:
npm uninstall [<@scope>/]<pkg>...

Options:
[-S|--save|--no-save|--save-prod|--save-dev|--save-optional|--save-peer|--save-bundle]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces] [--include-workspace-root] [--install-links]

aliases: unlink, remove, rm, r, un

Run "npm help uninstall" for more info

------------------------------
[ man npm uninstall 2>&1 ]
NPM-UNINSTALL(1)                                                                                                                  NPM-UNINSTALL(1)

NAME
       npm-uninstall - Remove a package

   Synopsis
         npm uninstall [<@scope>/]<pkg>...

         aliases: unlink, remove, rm, r, un

   Description
       This uninstalls a package, completely removing everything npm installed on its behalf.

       It also removes the package from the dependencies, devDependencies, optionalDependencies, and peerDependencies objects in your
       package.json.

       Further, if you have an npm-shrinkwrap.json or package-lock.json, npm will update those files as well.

       --no-save will tell npm not to remove the package from your package.json, npm-shrinkwrap.json, or package-lock.json files.

       --save or -S will tell npm to remove the package from your package.json, npm-shrinkwrap.json, and package-lock.json files.  This is the
       default, but you may need to use this if you have for instance save=false in your npmrc file

       In global mode (ie, with -g or --global appended to the command), it uninstalls the current package context as a global package.  --no-save
       is ignored in this case.

       Scope is optional and follows the usual rules for npm help scope.

   Examples
         npm uninstall sax

       sax will no longer be in your package.json, npm-shrinkwrap.json, or package-lock.json files.

         npm uninstall lodash --no-save

       lodash will not be removed from your package.json, npm-shrinkwrap.json, or package-lock.json files.

   Configuration
   save
       • Default: true unless when using npm update where it defaults to false

       • Type: Boolean

       Save installed packages to a package.json file as dependencies.

       When used with the npm rm command, removes the dependency from package.json.

       Will also prevent writing to package-lock.json if set to false.

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

   include-workspace-root
       • Default: false

       • Type: Boolean

       Include the workspace root when workspaces are enabled for a command.

       When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate
       only on the specified workspaces, and not on the root project.

       This value is not exported to the environment for child processes.

   install-links
       • Default: false

       • Type: Boolean

       When set file: protocol dependencies that exist outside of the project root will be packed and installed as regular dependencies instead of
       creating a symlink. This option has no effect on workspaces.

   See Also
       • npm help prune

       • npm help install

       • npm help folders

       • npm help config

       • npm help npmrc

                                                                     July 2022                                                    NPM-UNINSTALL(1)

------------------------------------------------------------
[ npm unpublish --help 2>&1 ]
Remove a package from the registry

Usage:
npm unpublish [<package-spec>]

Options:
[--dry-run] [-f|--force]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces]

Run "npm help unpublish" for more info

------------------------------
[ man npm unpublish 2>&1 ]
NPM-UNPUBLISH(1)                                                                                                                  NPM-UNPUBLISH(1)

NAME
       npm-unpublish - Remove a package from the registry

   Synopsis
         npm unpublish [<package-spec>]

       To learn more about how the npm registry treats unpublish, see our <a href="https://docs.npmjs.com/policies/unpublish" target="_blank"
       rel="noopener noreferrer"> unpublish policies</a>

   Warning
       Consider using the npm help deprecate command instead, if your intent is to encourage users to upgrade, or if you no longer want to
       maintain a package.

   Description
       This removes a package version from the registry, deleting its entry and removing the tarball.

       The npm registry will return an error if you are not npm help logged in.

       If you do not specify a version or if you remove all of a package's versions then the registry will remove the root package entry entirely.

       Even if you unpublish a package version, that specific name and version combination can never be reused. In order to publish the package
       again, you must use a new version number. If you unpublish the entire package, you may not publish any new versions of that package until
       24 hours have passed.

   Configuration
   dry-run
       • Default: false

       • Type: Boolean

       Indicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any
       of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack and publish.

       Note: This is NOT honored by other network related commands, eg dist-tags, owner, etc.

   force
       • Default: false

       • Type: Boolean

       Removes various protections against unfortunate side effects, common mistakes, unnecessary performance degradation, and malicious input.

       • Allow clobbering non-npm files in global installs.

       • Allow the npm version command to work on an unclean git repository.

       • Allow deleting the cache folder with npm cache clean.

       • Allow installing packages that have an engines declaration requiring a different version of npm.

       • Allow installing packages that have an engines declaration requiring a different version of node, even if --engine-strict is enabled.

       • Allow npm audit fix to install modules outside your stated dependency range (including SemVer-major changes).

       • Allow unpublishing all versions of a published package.

       • Allow conflicting peerDependencies to be installed in the root project.

       • Implicitly set --yes during npm init.

       • Allow clobbering existing values in npm pkg

       • Allow unpublishing of entire packages (not just a single version).

       If you don't have a clear idea of what you want to do, it is strongly recommended that you do not use this option!

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

   See Also
       • npm help package spec

       • npm help deprecate

       • npm help publish

       • npm help registry

       • npm help adduser

       • npm help owner

       • npm help login

                                                                     July 2022                                                    NPM-UNPUBLISH(1)

------------------------------------------------------------
[ npm unstar --help 2>&1 ]
Remove an item from your favorite packages

Usage:
npm unstar [<package-spec>...]

Options:
[--registry <registry>] [--no-unicode] [--otp <otp>]

Run "npm help unstar" for more info

------------------------------
[ man npm unstar 2>&1 ]
NPM-UNSTAR(1)                                                                                                                        NPM-UNSTAR(1)

NAME
       npm-unstar - Remove an item from your favorite packages

   Synopsis
         npm unstar [<package-spec>...]

       Note: This command is unaware of workspaces.

   Description
       "Unstarring" a package is the opposite of npm help star, it removes an item from your list of favorite packages.

   More
       There's also these extra commands to help you manage your favorite packages:

   Star
       You can "star" a package using npm help star

   Listing stars
       You can see all your starred packages using npm help stars

   Configuration
   registry
       • Default: "https://registry.npmjs.org/"

       • Type: URL

       The base URL of the npm registry.

   unicode
       • Default: false on windows, true on mac/unix systems with a unicode locale, as defined by the LC_ALL, LC_CTYPE, or LANG environment
         variables.

       • Type: Boolean

       When set to true, npm uses unicode characters in the tree output. When false, it uses ascii characters instead of unicode glyphs.

   otp
       • Default: null

       • Type: null or String

       This is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with npm access.

       If not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.

   See Also
       • npm help star

       • npm help stars

       • npm help view

       • npm help whoami

       • npm help adduser

                                                                     July 2022                                                       NPM-UNSTAR(1)

------------------------------------------------------------
[ npm update --help 2>&1 ]
Update packages

Usage:
npm update [<pkg>...]

Options:
[-S|--save|--no-save|--save-prod|--save-dev|--save-optional|--save-peer|--save-bundle]
[-g|--global] [--global-style] [--legacy-bundling]
[--omit <dev|optional|peer> [--omit <dev|optional|peer> ...]]
[--strict-peer-deps] [--no-package-lock] [--foreground-scripts]
[--ignore-scripts] [--no-audit] [--no-bin-links] [--no-fund] [--dry-run]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces] [--include-workspace-root] [--install-links]

aliases: up, upgrade, udpate

Run "npm help update" for more info

------------------------------
[ man npm update 2>&1 ]
NPM-UPDATE(1)                                                                                                                        NPM-UPDATE(1)

NAME
       npm-update - Update packages

   Synopsis
         npm update [<pkg>...]

         aliases: up, upgrade, udpate

   Description
       This command will update all the packages listed to the latest version (specified by the tag config), respecting the semver constraints of
       both your package and its dependencies (if they also require the same package).

       It will also install missing packages.

       If the -g flag is specified, this command will update globally installed packages.

       If no package name is specified, all packages in the specified location (global or local) will be updated.

       Note that by default npm update will not update the semver values of direct dependencies in your project package.json, if you want to also
       update values in package.json you can run: npm update --save (or add the save=true option to a npm help configuration file to make that the
       default behavior).

   Example
       For the examples below, assume that the current package is app and it depends on dependencies, dep1 (dep2, .. etc.).  The published
       versions of dep1 are:

         {
           "dist-tags": { "latest": "1.2.2" },
           "versions": [
             "1.2.2",
             "1.2.1",
             "1.2.0",
             "1.1.2",
             "1.1.1",
             "1.0.0",
             "0.4.1",
             "0.4.0",
             "0.2.0"
           ]
         }

   Caret Dependencies
       If app's package.json contains:

         "dependencies": {
           "dep1": "^1.1.1"
         }

       Then npm update will install dep1@1.2.2, because 1.2.2 is latest and 1.2.2 satisfies ^1.1.1.

   Tilde Dependencies
       However, if app's package.json contains:

         "dependencies": {
           "dep1": "~1.1.1"
         }

       In this case, running npm update will install dep1@1.1.2.  Even though the latest tag points to 1.2.2, this version do not satisfy ~1.1.1,
       which is equivalent to >=1.1.1 <1.2.0.  So the highest-sorting version that satisfies ~1.1.1 is used, which is 1.1.2.

   Caret Dependencies below 1.0.0
       Suppose app has a caret dependency on a version below 1.0.0, for example:

         "dependencies": {
           "dep1": "^0.2.0"
         }

       npm update will install dep1@0.2.0, because there are no other versions which satisfy ^0.2.0.

       If the dependence were on ^0.4.0:

         "dependencies": {
           "dep1": "^0.4.0"
         }

       Then npm update will install dep1@0.4.1, because that is the highest-sorting version that satisfies ^0.4.0 (>= 0.4.0 <0.5.0)

   Subdependencies
       Suppose your app now also has a dependency on dep2

         {
           "name": "my-app",
           "dependencies": {
               "dep1": "^1.0.0",
               "dep2": "1.0.0"
           }
         }

       and dep2 itself depends on this limited range of dep1

         {
         "name": "dep2",
           "dependencies": {
             "dep1": "~1.1.1"
           }
         }

       Then npm update will install dep1@1.1.2 because that is the highest version that dep2 allows.  npm will prioritize having a single version
       of dep1 in your tree rather than two when that single version can satisfy the semver requirements of multiple dependencies in your tree.
       In this case if you really did need your package to use a newer version you would need to use npm install.

   Updating Globally-Installed Packages
       npm update -g will apply the update action to each globally installed package that is outdated -- that is, has a version that is different
       from wanted.

       Note: Globally installed packages are treated as if they are installed with a caret semver range specified. So if you require to update to
       latest you may need to run npm install -g [<pkg>...]

       NOTE: If a package has been upgraded to a version newer than latest, it will be downgraded.

   Configuration
   save
       • Default: true unless when using npm update where it defaults to false

       • Type: Boolean

       Save installed packages to a package.json file as dependencies.

       When used with the npm rm command, removes the dependency from package.json.

       Will also prevent writing to package-lock.json if set to false.

   global
       • Default: false

       • Type: Boolean

       Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory. See npm help
       folders for more on the differences in behavior.

       • packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.

       • bin files are linked to {prefix}/bin

       • man pages are linked to {prefix}/share/man

   global-style
       • Default: false

       • Type: Boolean

       Causes npm to install the package into your local node_modules folder with the same layout it uses with the global node_modules folder.
       Only your direct dependencies will show in node_modules and everything they depend on will be flattened in their node_modules folders. This
       obviously will eliminate some deduping. If used with legacy-bundling, legacy-bundling will be preferred.

   legacy-bundling
       • Default: false

       • Type: Boolean

       Causes npm to install the package such that versions of npm prior to 1.4, such as the one included with node 0.8, can install the package.
       This eliminates all automatic deduping. If used with global-style this option will be preferred.

   omit
       • Default: 'dev' if the NODE_ENV environment variable is set to 'production', otherwise empty.

       • Type: "dev", "optional", or "peer" (can be set multiple times)

       Dependency types to omit from the installation tree on disk.

       Note that these dependencies are still resolved and added to the package-lock.json or npm-shrinkwrap.json file. They are just not
       physically installed on disk.

       If a package type appears in both the --include and --omit lists, then it will be included.

       If the resulting omit list includes 'dev', then the NODE_ENV environment variable will be set to 'production' for all lifecycle scripts.

   strict-peer-deps
       • Default: false

       • Type: Boolean

       If set to true, and --legacy-peer-deps is not set, then any conflicting peerDependencies will be treated as an install failure, even if npm
       could reasonably guess the appropriate resolution based on non-peer dependency relationships.

       By default, conflicting peerDependencies deep in the dependency graph will be resolved using the nearest non-peer dependency specification,
       even if doing so will result in some packages receiving a peer dependency outside the range set in their package's peerDependencies object.

       When such and override is performed, a warning is printed, explaining the conflict and the packages involved. If --strict-peer-deps is set,
       then this warning is treated as a failure.

   package-lock
       • Default: true

       • Type: Boolean

       If set to false, then ignore package-lock.json files when installing. This will also prevent writing package-lock.json if save is true.

       This configuration does not affect npm ci.

   foreground-scripts
       • Default: false

       • Type: Boolean

       Run all build scripts (ie, preinstall, install, and postinstall) scripts for installed packages in the foreground process, sharing standard
       input, output, and error with the main npm process.

       Note that this will generally make installs run slower, and be much noisier, but can be useful for debugging.

   ignore-scripts
       • Default: false

       • Type: Boolean

       If true, npm does not run scripts specified in package.json files.

       Note that commands explicitly intended to run a particular script, such as npm start, npm stop, npm restart, npm test, and npm run-script
       will still run their intended script if ignore-scripts is set, but they will not run any pre- or post-scripts.

   audit
       • Default: true

       • Type: Boolean

       When "true" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See
       the documentation for npm help audit for details on what is submitted.

   bin-links
       • Default: true

       • Type: Boolean

       Tells npm to create symlinks (or .cmd shims on Windows) for package executables.

       Set to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on
       ostensibly Unix systems.

   fund
       • Default: true

       • Type: Boolean

       When "true" displays the message at the end of each npm install acknowledging the number of dependencies looking for funding. See npm help
       npm fund for details.

   dry-run
       • Default: false

       • Type: Boolean

       Indicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any
       of the commands that modify your local installation, eg, install, update, dedupe, uninstall, as well as pack and publish.

       Note: This is NOT honored by other network related commands, eg dist-tags, owner, etc.

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

   include-workspace-root
       • Default: false

       • Type: Boolean

       Include the workspace root when workspaces are enabled for a command.

       When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate
       only on the specified workspaces, and not on the root project.

       This value is not exported to the environment for child processes.

   install-links
       • Default: false

       • Type: Boolean

       When set file: protocol dependencies that exist outside of the project root will be packed and installed as regular dependencies instead of
       creating a symlink. This option has no effect on workspaces.

   See Also
       • npm help install

       • npm help outdated

       • npm help shrinkwrap

       • npm help registry

       • npm help folders

       • npm help ls

                                                                     July 2022                                                       NPM-UPDATE(1)

------------------------------------------------------------
[ npm version --help 2>&1 ]
Bump a package version

Usage:
npm version [<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]

Options:
[--allow-same-version] [--no-commit-hooks] [--no-git-tag-version] [--json]
[--preid prerelease-id] [--sign-git-tag]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces] [--no-workspaces-update] [--include-workspace-root]

alias: verison

Run "npm help version" for more info

------------------------------
[ man npm version 2>&1 ]
NPM-VERSION(1)                                                                                                                      NPM-VERSION(1)

NAME
       npm-version - Bump a package version

   Synopsis
         npm version [<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]

         alias: verison

   Configuration
   allow-same-version
       • Default: false

       • Type: Boolean

       Prevents throwing an error when npm version is used to set the new version to the same value as the current version.

   commit-hooks
       • Default: true

       • Type: Boolean

       Run git commit hooks when using the npm version command.

   git-tag-version
       • Default: true

       • Type: Boolean

       Tag the commit when using the npm version command. Setting this to false results in no commit being made at all.

   json
       • Default: false

       • Type: Boolean

       Whether or not to output JSON data, rather than the normal output.

       • In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

       Not supported by all npm commands.

   preid
       • Default: ""

       • Type: String

       The "prerelease identifier" to use as a prefix for the "prerelease" part of a semver. Like the rc in 1.2.0-rc.8.

   sign-git-tag
       • Default: false

       • Type: Boolean

       If set to true, then the npm version command will tag the version using -s to add a signature.

       Note that git requires you to have set up GPG keys in your git configs for this to work properly.

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

   workspaces-update
       • Default: true

       • Type: Boolean

       If set to true, the npm cli will run an update after operations that may possibly change the workspaces installed to the node_modules
       folder.

   include-workspace-root
       • Default: false

       • Type: Boolean

       Include the workspace root when workspaces are enabled for a command.

       When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate
       only on the specified workspaces, and not on the root project.

       This value is not exported to the environment for child processes.

   Description
       Run this in a package directory to bump the version and write the new data back to package.json, package-lock.json, and, if present,
       npm-shrinkwrap.json.

       The newversion argument should be a valid semver string, a valid second argument to semver.inc https://github.com/npm/node-semver#functions
       (one of patch, minor, major, prepatch, preminor, premajor, prerelease), or from-git. In the second case, the existing version will be
       incremented by 1 in the specified field.  from-git will try to read the latest git tag, and use that as the new npm version.

       If run in a git repo, it will also create a version commit and tag.  This behavior is controlled by git-tag-version (see below), and can be
       disabled on the command line by running npm --no-git-tag-version version.  It will fail if the working directory is not clean, unless the
       -f or --force flag is set.

       If supplied with -m or --message config option, npm will use it as a commit message when creating a version commit.  If the message config
       contains %s then that will be replaced with the resulting version number.  For example:

         npm version patch -m "Upgrade to %s for reasons"

       If the sign-git-tag config is set, then the tag will be signed using the -s flag to git.  Note that you must have a default GPG key set up
       in your git config for this to work properly.  For example:

         $ npm config set sign-git-tag true
         $ npm version patch

         You need a passphrase to unlock the secret key for
         user: "isaacs (http://blog.izs.me/) <i@izs.me>"
         2048-bit RSA key, ID 6C481CF6, created 2010-08-31

         Enter passphrase:

       If preversion, version, or postversion are in the scripts property of the package.json, they will be executed as part of running npm
       version.

       The exact order of execution is as follows:

       1. Check to make sure the git working directory is clean before we get started.  Your scripts may add files to the commit in future steps.
          This step is skipped if the --force flag is set.

       2. Run the preversion script. These scripts have access to the old version in package.json.  A typical use would be running your full test
          suite before deploying.  Any files you want added to the commit should be explicitly added using git add.

       3. Bump version in package.json as requested (patch, minor, major, etc).

       4. Run the version script. These scripts have access to the new version in package.json (so they can incorporate it into file headers in
          generated files for example).  Again, scripts should explicitly add generated files to the commit using git add.

       5. Commit and tag.

       6. Run the postversion script. Use it to clean up the file system or automatically push the commit and/or tag.

       Take the following example:

         {
           "scripts": {
             "preversion": "npm test",
             "version": "npm run build && git add -A dist",
             "postversion": "git push && git push --tags && rm -rf build/temp"
           }
         }

       This runs all your tests and proceeds only if they pass. Then runs your build script, and adds everything in the dist directory to the
       commit.  After the commit, it pushes the new commit and tag up to the server, and deletes the build/temp directory.

   See Also
       • npm help init

       • npm help run-script

       • npm help scripts

       • npm help package.json

       • npm help config

                                                                     July 2022                                                      NPM-VERSION(1)

------------------------------------------------------------
[ npm view --help 2>&1 ]
View registry info

Usage:
npm view [<package-spec>] [<field>[.subfield]...]

Options:
[--json] [-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces] [--include-workspace-root]

aliases: info, show, v

Run "npm help view" for more info

------------------------------
[ man npm view 2>&1 ]
NPM-VIEW(1)                                                                                                                            NPM-VIEW(1)

NAME
       npm-view - View registry info

   Synopsis
         npm view [<package-spec>] [<field>[.subfield]...]

         aliases: info, show, v

   Description
       This command shows data about a package and prints it to stdout.

       As an example, to view information about the connect package from the registry, you would run:

         npm view connect

       The default version is "latest" if unspecified.

       Field names can be specified after the package descriptor.  For example, to show the dependencies of the ronn package at version 0.3.5, you
       could do the following:

         npm view ronn@0.3.5 dependencies

       You can view child fields by separating them with a period.  To view the git repository URL for the latest version of npm, you would run
       the following command:

         npm view npm repository.url

       This makes it easy to view information about a dependency with a bit of shell scripting. For example, to view all the data about the
       version of opts that ronn depends on, you could write the following:

         npm view opts@$(npm view ronn dependencies.opts)

       For fields that are arrays, requesting a non-numeric field will return all of the values from the objects in the list. For example, to get
       all the contributor email addresses for the express package, you would run:

         npm view express contributors.email

       You may also use numeric indices in square braces to specifically select an item in an array field. To just get the email address of the
       first contributor in the list, you can run:

         npm view express contributors[0].email

       Multiple fields may be specified, and will be printed one after another.  For example, to get all the contributor names and email
       addresses, you can do this:

         npm view express contributors.name contributors.email

       "Person" fields are shown as a string if they would be shown as an object.  So, for example, this will show the list of npm contributors in
       the shortened string format.  (See npm help package.json for more on this.)

         npm view npm contributors

       If a version range is provided, then data will be printed for every matching version of the package.  This will show which version of jsdom
       was required by each matching version of yui3:

         npm view yui3@'>0.5.4' dependencies.jsdom

       To show the connect package version history, you can do this:

         npm view connect versions

   Configuration
   json
       • Default: false

       • Type: Boolean

       Whether or not to output JSON data, rather than the normal output.

       • In npm pkg set it enables parsing set values with JSON.parse() before saving them to your package.json.

       Not supported by all npm commands.

   workspace
       • Default:

       • Type: String (can be set multiple times)

       Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces
       defined by this configuration option.

       Valid values for the workspace config are either:

       • Workspace names

       • Path to a workspace directory

       • Path to a parent workspace directory (will result in selecting all workspaces within that folder)

       When set for the npm init command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it
       up as a brand new workspace within the project.

       This value is not exported to the environment for child processes.

   workspaces
       • Default: null

       • Type: null or Boolean

       Set to true to run the command in the context of all configured workspaces.

       Explicitly setting this to false will cause commands like install to ignore workspaces altogether. When not set explicitly:

       • Commands that operate on the node_modules tree (install, update, etc.)  will link workspaces into the node_modules folder. - Commands
         that do other things (test, exec, publish, etc.) will operate on the root project, unless one or more workspaces are specified in the
         workspace config.

       This value is not exported to the environment for child processes.

   include-workspace-root
       • Default: false

       • Type: Boolean

       Include the workspace root when workspaces are enabled for a command.

       When false, specifying individual workspaces via the workspace config, or all workspaces via the workspaces flag, will cause npm to operate
       only on the specified workspaces, and not on the root project.

       This value is not exported to the environment for child processes.

   Output
       If only a single string field for a single version is output, then it will not be colorized or quoted, to enable piping the output to
       another command. If the field is an object, it will be output as a JavaScript object literal.

       If the --json flag is given, the outputted fields will be JSON.

       If the version range matches multiple versions then each printed value will be prefixed with the version it applies to.

       If multiple fields are requested, then each of them is prefixed with the field name.

   See Also
       • npm help package spec

       • npm help search

       • npm help registry

       • npm help config

       • npm help npmrc

       • npm help docs

                                                                     July 2022                                                         NPM-VIEW(1)

------------------------------------------------------------
[ npm whoami --help 2>&1 ]
Display npm username

Usage:
npm whoami

Options:
[--registry <registry>]

Run "npm help whoami" for more info

------------------------------
[ man npm whoami 2>&1 ]
NPM-WHOAMI(1)                                                                                                                        NPM-WHOAMI(1)

NAME
       npm-whoami - Display npm username

   Synopsis
         npm whoami

       Note: This command is unaware of workspaces.

   Description
       Display the npm username of the currently logged-in user.

       If logged into a registry that provides token-based authentication, then connect to the /-/whoami registry endpoint to find the username
       associated with the token, and print to standard output.

       If logged into a registry that uses Basic Auth, then simply print the username portion of the authentication string.

   Configuration
   registry
       • Default: "https://registry.npmjs.org/"

       • Type: URL

       The base URL of the npm registry.

   See Also
       • npm help config

       • npm help npmrc

       • npm help adduser

                                                                     July 2022                                                       NPM-WHOAMI(1)

