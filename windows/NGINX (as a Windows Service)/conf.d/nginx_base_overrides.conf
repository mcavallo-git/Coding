
# NGINX HTTP CONFIGURATION(S)
#    This settings file is intended to be included from the main "http{...}" directive in "/etc/nginx/nginx.conf"


# ---==========---   ngx_http_core_module  :::  http://nginx.org/en/docs/http/ngx_http_core_module.html
# ---=  CORE  =---          (Stock NGINX configurables)
# ---==========---


#   "client_body_timeout"
#        Defines a timeout for reading client request body. The timeout is set only for a period between
#        two successive read operations, not for the transmission of the whole request body. If a client does not transmit anything
#        within this time, the 408 (Request Time-out) error is returned to the client.
client_body_timeout 600;


#   "client_max_body_size"
#        Sets the maximum allowed size of the client request body, specified in the “Content-Length” request header field.
#        If the size in a request exceeds the configured value, the 413 (Request Entity Too Large) error is returned to the client.
#        Please be aware that browsers cannot correctly display this error.
#        Setting size to 0 disables checking of client request body size.
client_max_body_size 103M;  # no-limit = 0


#   "default_type"
#        Defines the default MIME type of a response. Mapping of file name extensions to MIME types can be set with the types directive.
#        !!! NOTE:  An "application/octet-stream" attachment is a binary file, and is rarely viewable in an email or web client
# default_type application/octet-stream;


#   "error_log"
#        Configures logging. Several logs can be specified on the same level (1.5.2).
#        If on the main configuration level writing a log to a file is not explicitly defined, the default file will be used.
error_log c:/nginx/logs/error.log;


#   "error_page"
#      Context: http,server,location, if in location
#      Defines the URI that will be shown for the specified errors. A uri value can contain variables.
#      Layman's Terms: "Shows an Error Page in-case a given NGINX Virtual-Host is currently down or an error occurs"
# error_page 400 /400.html; location = /400.html { root /var/www/error; internal; } # 400 - Bad Request
#  ^-- GOES IN SERVER DIRECTIVE (required b/c of "location" directive)

#   "keepalive_timeout"
#        The first parameter sets a timeout during which a keep-alive client connection will stay open on
#        the server side. The zero value disables keep-alive client connections. The optional second parameter sets a value in 
#        the “Keep-Alive: timeout=time” response header field. Two parameters may differ.
keepalive_timeout 600;


#   "port_in_redirect"
#        Enables or disables specifying the port in absolute redirects issued by nginx.
port_in_redirect off;


#   "sendfile"
#        Enables or disables the use of sendfile().
sendfile on;


#   "tcp_nopush"
#        Enables or disables the use of the TCP_NOPUSH socket option on FreeBSD or the TCP_CORK
#        socket option on Linux. The options are enabled only when sendfile is used.
tcp_nopush on;


#   "tcp_nodelay"
#        Enables or disables the use of the TCP_NODELAY option. The option is enabled when a
#        connection is transitioned into the keep-alive state. Additionally, it is enabled on SSL connections,
#        for unbuffered proxying, and for WebSocket proxying.
#        !!! NOTE:: setting "tcp_nodelay on" is at the odds with "tcp_nopush on" as they are mutually exclusive, but nginx
#                   has special behavior that if you have "sendfile on", it uses "tcp nopush" for everything but the
#                   last package and then turns nopush off and enables nodelay to avoid a 0.2 sec delay.
tcp_nodelay on;


#   "server_tokens"
#        Enables or disables emitting nginx version on error pages and in the “Server” response header field.
server_tokens off;


#   "server_names_hash_bucket_size"
#        Sets the bucket size for the server names hash tables.
#        The default value depends on the size of the processor’s cache line.
#        The details of setting up hash tables are provided in a separate document.
# server_names_hash_bucket_size 64;


#   "server_name_in_redirect"
#        Enables or disables the use of the primary server name, specified by the server_name 
#        directive, in absolute redirects issued by nginx. When the use of the primary server name is disabled, the name from 
#        the “Host” request header field is used. If this field is not present, the IP address of the server is used.
server_name_in_redirect off;


#   "types_hash_bucket_size"
#        Sets the bucket size for the types hash tables.
#        The details of setting up hash tables are provided in a separate document.
types_hash_bucket_size 64;


#   "types_hash_max_size"
#        Sets the maximum size of the types hash tables.
#        The details of setting up hash tables are provided in a separate document.
types_hash_max_size 2048;


#   "underscores_in_headers"
#        Enables or disables the use of underscores in client request header fields. When the use of 
#        underscores is disabled, request header fields whose names contain underscores are marked as invalid and become subject 
#        to the ignore_invalid_headers directive.
underscores_in_headers on;


#   "variables_hash_bucket_size"
#        Sets the bucket size for the variables hash table.
#        The details of setting up hash tables are provided in a separate document.
#        Note:
#           On 64-bit platforms each hash element is at least 16 bytes long (2 pointers), and 32-byte hash bucket can
#           only hold one hash element (only 24 bytes are usable for elements as 8 bytes are per-bucket technical data).
variables_hash_bucket_size 64; 


#   "variables_hash_max_size"
#        Sets the maximum size of the variables hash table.
#        The details of setting up hash tables are provided in a separate document.
variables_hash_max_size 1024; 



# ---===========---   ngx_http_proxy_module  :::  http://nginx.org/en/docs/http/ngx_http_proxy_module.html
# ---=  PROXY  =---          The ngx_http_proxy_module module allows passing requests to another server.
# ---===========---          Load-Balancing:  https://docs.nginx.com/nginx/admin-guide/load-balancer/using-proxy-protocol/


#   Syntax:   proxy_cache zone | off;
#   Default:  proxy_cache off;
#   Context:  http, server, location
#   Description:  Defines a shared memory zone used for caching.
#                 The same zone can be used in several places.
#                 Parameter value can contain variables (1.7.9).
#                 The off parameter disables caching inherited from the previous configuration level.
# proxy_cache off;


#   "proxy_connect_timeout"
#        Defines a timeout for establishing a connection with a proxied server.
#        It should be noted that this timeout cannot usually exceed 75 seconds.
proxy_connect_timeout 75;


# "proxy_headers_hash_bucket_size"
#   Syntax:   proxy_headers_hash_bucket_size size;
#   Default:  proxy_headers_hash_bucket_size 64;
#   Context:  http, server, location
#   Info:     Sets the bucket size for hash tables used by the proxy_hide_header and proxy_set_header directives.
#             The details of setting up hash tables are provided in a separate document.
proxy_headers_hash_bucket_size 128;


# "proxy_headers_hash_max_size"
#   Syntax:   proxy_headers_hash_max_size size;
#   Default:  proxy_headers_hash_max_size 512;
#   Context:  http, server, location
#   Info:     Sets the maximum size of hash tables used by the proxy_hide_header and proxy_set_header directives.
#             The details of setting up hash tables are provided in a separate document.
proxy_headers_hash_max_size 512;


#   "proxy_read_timeout"
#        Defines a timeout for reading a response from the proxied server. The timeout is set only between two successive
#        read operations, not for the transmission of the whole response. If the proxied server does not transmit
#        anything within this time, the connection is closed.
proxy_read_timeout 600;


#   "proxy_send_timeout"
#        Sets a timeout for transmitting a request to the proxied server. The timeout is set only between two successive
#        write operations, not for the transmission of the whole request. If the proxied server does not receive anything 
#        within this time, the connection is closed.
proxy_send_timeout 600;


#   "send_timeout"
#        Sets a timeout for transmitting a response to the client. The timeout is set only between two successive write
#        operations, not for the transmission of the whole response. If the client does not receive anything within this
#        time, the connection is closed.
send_timeout 600;



# ---==============---   ngx_http_fastcgi_module  :::  http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html
# ---=  FAST-CGI  =---          The ngx_http_fastcgi_module module allows passing requests to a FastCGI server.
# ---==============---      


#   "fastcgi_read_timeout"
#         Defines a timeout for reading a response from the FastCGI server. The timeout is set only between two
#         successive read operations, not for the transmission of the whole response. If the FastCGI server does
#         not transmit anything within this time, the connection is closed.
fastcgi_read_timeout 600;



# ---==========---   ngx_http_gzip_module  :::  http://nginx.org/en/docs/http/ngx_http_gzip_module.html
# ---=  GZIP  =---          The ngx_http_gzip_module module is a filter that compresses responses using the “gzip” method.
# ---==========---          This often helps to reduce the size of transmitted data by half or even more.


#   "gzip"
#         Enables or disables gzipping of responses.
# gzip on;


#   "gzip_disable"
#         Disables gzipping of responses for requests with “User-Agent” header fields matching any of the specified regular expressions.
# gzip_disable 'msie6';




# NGINX HTTP CONFIGURATION(S)
#    This settings file is intended to be included from the main "http{...}" directive in "/etc/nginx/nginx.conf"



#
# ---=============---   ngx_http_log_module  :::  http://nginx.org/en/docs/http/ngx_http_log_module.html
# ---=  LOGGING  =---          The ngx_http_log_module module writes request logs in the specified format. Requests are logged in
# ---=============---          the context of a location where processing ends. It may be different from the original location,
#                              if an internal redirect happens during request processing.


#   "log_format"
#         Specifies log format - Refer to documentation on "ngx_http_log_module" for more info
#         For variables, refer to "Emdedded Variables" @ http://nginx.org/en/docs/http/ngx_http_core_module.html#variables
log_format combined_ssl '\n'
  '$remote_addr [$time_local] \n'
  '$ssl_protocol/$ssl_cipher \n'
  '"$request" $status $body_bytes_sent "$http_referer" \n'
  '"$http_user_agent"'
  '';

map "$hostname:$request_uri" $redirect_action {
  default 0;
  "~*[a-z0-9\-]+.[a-z0-9\-]+:meta$" meta;  # ~* [regex match, case-insensitive]
}

log_format excessive ''
'------------------------------------------------------------\n'
'---CUSTOM---\n'
'redirect_action        =>  $redirect_action \n'
'---HEADERS---\n'
'body_bytes_sent        =>  $body_bytes_sent \n'
'content_type           =>  $content_type \n'
'host                   =>  $host \n'
'hostname               =>  $hostname \n'
'http_referer           =>  $http_referer \n'
'http_upgrade           =>  $http_upgrade \n'
'http_user_agent        =>  $http_user_agent \n'
'remote_addr            =>  $remote_addr \n'
'remote_port            =>  $remote_port \n'
'scheme                 =>  $scheme \n'
'server_addr            =>  $server_addr \n'
'server_name            =>  $server_name \n'
'server_port            =>  $server_port \n'
'server_protocol        =>  $server_protocol \n'
'ssl_cipher             =>  $ssl_cipher \n'
'ssl_client_cert        =>  $ssl_client_cert \n'
'ssl_client_fingerprint =>  $ssl_client_fingerprint \n'
'ssl_client_verify      =>  $ssl_client_verify \n'
'ssl_protocol           =>  $ssl_protocol \n'
'ssl_server_name        =>  $ssl_server_name \n'
'status                 =>  $status \n'
'time_local             =>  $time_local \n'
'uri                    =>  $uri \n'
'---BODY---\n'
'request                =>  $request \n'
'request_body_file      =>  $request_body_file \n'
'request_completion     =>  $request_completion \n'
'request_length         =>  $request_length \n'
'request_method         =>  $request_method \n'
'request_uri            =>  $request_uri \n'
'[request_body]:\n'
'[$request_body]\n'
'---COOKIES---\n'
'uid_got                =>  $uid_got \n'
'uid_reset              =>  $uid_reset \n'
'uid_set                =>  $uid_set \n'
'';

log_format excessive_jenkins ''
'------------------------------------------------------------\n'
'---CUSTOM---\n'
'redirect_action        =>  $redirect_action \n'
'---JENKINS HEADERS---\n'
'X-Hudson-CLI-Port      =>  $http_x_hudson_cli_port \n'
'X-Jenkins-CLI-Port     =>  $http_x_jenkins_cli_port \n'
'X-Jenkins-CLI2-Port    =>  $http_x_jenkins_cli2_port \n'
'X-Jenkins-CLI-Host     =>  $http_x_jenkins_cli_host \n'
'---HEADERS---\n'
'body_bytes_sent        =>  $body_bytes_sent \n'
'content_type           =>  $content_type \n'
'host                   =>  $host \n'
'hostname               =>  $hostname \n'
'http_referer           =>  $http_referer \n'
'http_upgrade           =>  $http_upgrade \n'
'http_user_agent        =>  $http_user_agent \n'
'remote_addr            =>  $remote_addr \n'
'remote_port            =>  $remote_port \n'
'scheme                 =>  $scheme \n'
'server_addr            =>  $server_addr \n'
'server_name            =>  $server_name \n'
'server_port            =>  $server_port \n'
'server_protocol        =>  $server_protocol \n'
'ssl_cipher             =>  $ssl_cipher \n'
'ssl_client_cert        =>  $ssl_client_cert \n'
'ssl_client_fingerprint =>  $ssl_client_fingerprint \n'
'ssl_client_verify      =>  $ssl_client_verify \n'
'ssl_protocol           =>  $ssl_protocol \n'
'ssl_server_name        =>  $ssl_server_name \n'
'status                 =>  $status \n'
'time_local             =>  $time_local \n'
'uri                    =>  $uri \n'
'---BODY---\n'
'request                =>  $request \n'
'request_body_file      =>  $request_body_file \n'
'request_completion     =>  $request_completion \n'
'request_length         =>  $request_length \n'
'request_method         =>  $request_method \n'
'request_uri            =>  $request_uri \n'
'[request_body]:\n'
'[$request_body]\n'
'---COOKIES---\n'
'uid_got                =>  $uid_got \n'
'uid_reset              =>  $uid_reset \n'
'uid_set                =>  $uid_set \n'
'';


log_format api ''
'==-  REQUEST\n'
'time_local         =>  $time_local \n'
'request_method     =>  $request_method \n'
'http_referer       =>  $http_referer \n'
'rebuilt-request    =>  $scheme://$server_name$request_uri \n'
'==-  CLIENT\n'     
'remote_addr        =>  $remote_addr \n'
'remote_port        =>  $remote_port \n'
'http_user_agent    =>  $http_user_agent \n'
'==-  ENCRYPTION\n'
'ssl_client_cert    =>  $ssl_client_cert \n'
'ssl_fingerprint    =>  $ssl_client_fingerprint \n'
'ssl_client_verify  =>  $ssl_client_verify \n'
'ssl_protocol       =>  $ssl_protocol \n'
'ssl_cipher         =>  $ssl_cipher \n'
'==-  SERVER\n'
'hostname           =>  $hostname \n'
'server_name        =>  $server_name \n'
'ssl_server_name    =>  $ssl_server_name \n'
'server_addr        =>  $server_addr \n'
'server_port        =>  $server_port \n'
'==-  RESPONSE\n'
'status             =>  $status \n'
'server_protocol    =>  $server_protocol \n'
'content_type       =>  $content_type \n'
'body_bytes_sent    =>  $body_bytes_sent \n'
'[request_body]:\n'
'[$request_body]\n'
'';

log_format thin '$time_local ==> $scheme://$server_name$request_uri\n(from $remote_addr running [$http_user_agent])\nrequest_body=>[$request_body]\n';

log_format api_thin '$time_local ==> $scheme://$server_name$request_uri\n(from $remote_addr running [$http_user_agent])\nrequest_body=>[$request_body]\n';


#   "access_log"
#         Sets the path, format, and configuration for a buffered log write.
#         Several logs can be specified on the same level.
#         Logging to syslog can be configured by specifying the “syslog:” prefix in the first parameter.
#         The special value off cancels all access_log directives on the current level.
#         If the format is not specified then the predefined “combined” format is used.
# access_log c:/nginx/logs/access.log combined_ssl;



# ---==============---   ngx_http_upstream_module  :::  http://nginx.org/en/docs/http/ngx_http_upstream_module.html
# ---=  UPSTREAM  =---          The ngx_http_upstream_module module is used to define groups of servers that can be referenced by
# ---==============---          the proxy_pass, fastcgi_pass, uwsgi_pass, scgi_pass, memcached_pass, and grpc_pass directives.


#   "upstream"
#         Defines a group of servers.
#         Servers can listen on different ports.
#         In addition, servers listening on TCP and UNIX-domain sockets can be mixed.

# PHP-based servers - use "upstream php_listener_7_0" to abstract backend connection(s) -> This is used by "server" blocks by redirecting via proxy_pass directive
# upstream php_listener_7_0 {
#   server unix:/run/php/php.0-fpm.sock;
# }
# upstream php_listener_7_2 {
#   server unix:/run/php/php7.2-fpm.sock;
# }
